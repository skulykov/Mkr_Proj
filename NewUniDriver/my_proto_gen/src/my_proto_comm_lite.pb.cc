// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: my_proto_comm_lite.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "my_proto_comm_lite.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace my_comm_proto {

void protobuf_ShutdownFile_my_5fproto_5fcomm_5flite_2eproto() {
  delete PInspectionReportMediaFile::default_instance_;
  delete PInspectionReports::default_instance_;
  delete PVehicleReports::default_instance_;
  delete ClsLoginMD::default_instance_;
  delete PMobileHB::default_instance_;
  delete CommPacket::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_my_5fproto_5fcomm_5flite_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_my_5fproto_5fcomm_5flite_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::my_comm_proto::protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
  PInspectionReportMediaFile::default_instance_ = new PInspectionReportMediaFile();
  PInspectionReports::default_instance_ = new PInspectionReports();
  PVehicleReports::default_instance_ = new PVehicleReports();
  ClsLoginMD::default_instance_ = new ClsLoginMD();
  PMobileHB::default_instance_ = new PMobileHB();
  CommPacket::default_instance_ = new CommPacket();
  PInspectionReportMediaFile::default_instance_->InitAsDefaultInstance();
  PInspectionReports::default_instance_->InitAsDefaultInstance();
  PVehicleReports::default_instance_->InitAsDefaultInstance();
  ClsLoginMD::default_instance_->InitAsDefaultInstance();
  PMobileHB::default_instance_->InitAsDefaultInstance();
  CommPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_my_5fproto_5fcomm_5flite_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_my_5fproto_5fcomm_5flite_2eproto_once_);
void protobuf_AddDesc_my_5fproto_5fcomm_5flite_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_my_5fproto_5fcomm_5flite_2eproto_once_,
                 &protobuf_AddDesc_my_5fproto_5fcomm_5flite_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_my_5fproto_5fcomm_5flite_2eproto {
  StaticDescriptorInitializer_my_5fproto_5fcomm_5flite_2eproto() {
    protobuf_AddDesc_my_5fproto_5fcomm_5flite_2eproto();
  }
} static_descriptor_initializer_my_5fproto_5fcomm_5flite_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PInspectionReportMediaFile::kFnameFieldNumber;
const int PInspectionReportMediaFile::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PInspectionReportMediaFile::PInspectionReportMediaFile()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PInspectionReportMediaFile)
}

void PInspectionReportMediaFile::InitAsDefaultInstance() {
}

PInspectionReportMediaFile::PInspectionReportMediaFile(const PInspectionReportMediaFile& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PInspectionReportMediaFile)
}

void PInspectionReportMediaFile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PInspectionReportMediaFile::~PInspectionReportMediaFile() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PInspectionReportMediaFile)
  SharedDtor();
}

void PInspectionReportMediaFile::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PInspectionReportMediaFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PInspectionReportMediaFile& PInspectionReportMediaFile::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PInspectionReportMediaFile* PInspectionReportMediaFile::default_instance_ = NULL;

PInspectionReportMediaFile* PInspectionReportMediaFile::New(::google::protobuf::Arena* arena) const {
  PInspectionReportMediaFile* n = new PInspectionReportMediaFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PInspectionReportMediaFile::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_fname()) {
      fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_payload()) {
      payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PInspectionReportMediaFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PInspectionReportMediaFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }

      // required bytes payload = 2;
      case 2: {
        if (tag == 18) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PInspectionReportMediaFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PInspectionReportMediaFile)
  return false;
#undef DO_
}

void PInspectionReportMediaFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PInspectionReportMediaFile)
  // required string fname = 1;
  if (has_fname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fname(), output);
  }

  // required bytes payload = 2;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->payload(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PInspectionReportMediaFile)
}

int PInspectionReportMediaFile::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_fname()) {
    // required string fname = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fname());
  }

  if (has_payload()) {
    // required bytes payload = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  return total_size;
}
int PInspectionReportMediaFile::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string fname = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fname());

    // required bytes payload = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PInspectionReportMediaFile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PInspectionReportMediaFile*>(&from));
}

void PInspectionReportMediaFile::MergeFrom(const PInspectionReportMediaFile& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fname()) {
      set_has_fname();
      fname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fname_);
    }
    if (from.has_payload()) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PInspectionReportMediaFile::CopyFrom(const PInspectionReportMediaFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PInspectionReportMediaFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PInspectionReportMediaFile::Swap(PInspectionReportMediaFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PInspectionReportMediaFile::InternalSwap(PInspectionReportMediaFile* other) {
  fname_.Swap(&other->fname_);
  payload_.Swap(&other->payload_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PInspectionReportMediaFile::GetTypeName() const {
  return "my_comm_proto.PInspectionReportMediaFile";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PInspectionReportMediaFile

// required string fname = 1;
bool PInspectionReportMediaFile::has_fname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PInspectionReportMediaFile::set_has_fname() {
  _has_bits_[0] |= 0x00000001u;
}
void PInspectionReportMediaFile::clear_has_fname() {
  _has_bits_[0] &= ~0x00000001u;
}
void PInspectionReportMediaFile::clear_fname() {
  fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fname();
}
 const ::std::string& PInspectionReportMediaFile::fname() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionReportMediaFile.fname)
  return fname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionReportMediaFile::set_fname(const ::std::string& value) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionReportMediaFile.fname)
}
 void PInspectionReportMediaFile::set_fname(const char* value) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PInspectionReportMediaFile.fname)
}
 void PInspectionReportMediaFile::set_fname(const char* value, size_t size) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PInspectionReportMediaFile.fname)
}
 ::std::string* PInspectionReportMediaFile::mutable_fname() {
  set_has_fname();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionReportMediaFile.fname)
  return fname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PInspectionReportMediaFile::release_fname() {
  clear_has_fname();
  return fname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionReportMediaFile::set_allocated_fname(::std::string* fname) {
  if (fname != NULL) {
    set_has_fname();
  } else {
    clear_has_fname();
  }
  fname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fname);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PInspectionReportMediaFile.fname)
}

// required bytes payload = 2;
bool PInspectionReportMediaFile::has_payload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PInspectionReportMediaFile::set_has_payload() {
  _has_bits_[0] |= 0x00000002u;
}
void PInspectionReportMediaFile::clear_has_payload() {
  _has_bits_[0] &= ~0x00000002u;
}
void PInspectionReportMediaFile::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
 const ::std::string& PInspectionReportMediaFile::payload() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionReportMediaFile.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionReportMediaFile::set_payload(const ::std::string& value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionReportMediaFile.payload)
}
 void PInspectionReportMediaFile::set_payload(const char* value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PInspectionReportMediaFile.payload)
}
 void PInspectionReportMediaFile::set_payload(const void* value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PInspectionReportMediaFile.payload)
}
 ::std::string* PInspectionReportMediaFile::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionReportMediaFile.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PInspectionReportMediaFile::release_payload() {
  clear_has_payload();
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionReportMediaFile::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PInspectionReportMediaFile.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PInspectionReports::kReportsFieldNumber;
const int PInspectionReports::kMfilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PInspectionReports::PInspectionReports()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PInspectionReports)
}

void PInspectionReports::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  reports_ = const_cast< ::my_comm_proto::PInspectionRowList*>(
      ::my_comm_proto::PInspectionRowList::internal_default_instance());
#else
  reports_ = const_cast< ::my_comm_proto::PInspectionRowList*>(&::my_comm_proto::PInspectionRowList::default_instance());
#endif
}

PInspectionReports::PInspectionReports(const PInspectionReports& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PInspectionReports)
}

void PInspectionReports::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reports_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PInspectionReports::~PInspectionReports() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PInspectionReports)
  SharedDtor();
}

void PInspectionReports::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete reports_;
  }
}

void PInspectionReports::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PInspectionReports& PInspectionReports::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PInspectionReports* PInspectionReports::default_instance_ = NULL;

PInspectionReports* PInspectionReports::New(::google::protobuf::Arena* arena) const {
  PInspectionReports* n = new PInspectionReports;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PInspectionReports::Clear() {
  if (has_reports()) {
    if (reports_ != NULL) reports_->::my_comm_proto::PInspectionRowList::Clear();
  }
  mfiles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PInspectionReports::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PInspectionReports)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .my_comm_proto.PInspectionRowList reports = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reports()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mfiles;
        break;
      }

      // repeated .my_comm_proto.PInspectionReportMediaFile mfiles = 2;
      case 2: {
        if (tag == 18) {
         parse_mfiles:
          DO_(input->IncrementRecursionDepth());
         parse_loop_mfiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mfiles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_mfiles;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PInspectionReports)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PInspectionReports)
  return false;
#undef DO_
}

void PInspectionReports::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PInspectionReports)
  // required .my_comm_proto.PInspectionRowList reports = 1;
  if (has_reports()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->reports_, output);
  }

  // repeated .my_comm_proto.PInspectionReportMediaFile mfiles = 2;
  for (unsigned int i = 0, n = this->mfiles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->mfiles(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PInspectionReports)
}

int PInspectionReports::ByteSize() const {
  int total_size = 0;

  // required .my_comm_proto.PInspectionRowList reports = 1;
  if (has_reports()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reports_);
  }
  // repeated .my_comm_proto.PInspectionReportMediaFile mfiles = 2;
  total_size += 1 * this->mfiles_size();
  for (int i = 0; i < this->mfiles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mfiles(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PInspectionReports::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PInspectionReports*>(&from));
}

void PInspectionReports::MergeFrom(const PInspectionReports& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  mfiles_.MergeFrom(from.mfiles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reports()) {
      mutable_reports()->::my_comm_proto::PInspectionRowList::MergeFrom(from.reports());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PInspectionReports::CopyFrom(const PInspectionReports& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PInspectionReports::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_reports()) {
    if (!this->reports_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->mfiles())) return false;
  return true;
}

void PInspectionReports::Swap(PInspectionReports* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PInspectionReports::InternalSwap(PInspectionReports* other) {
  std::swap(reports_, other->reports_);
  mfiles_.UnsafeArenaSwap(&other->mfiles_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PInspectionReports::GetTypeName() const {
  return "my_comm_proto.PInspectionReports";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PInspectionReports

// required .my_comm_proto.PInspectionRowList reports = 1;
bool PInspectionReports::has_reports() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PInspectionReports::set_has_reports() {
  _has_bits_[0] |= 0x00000001u;
}
void PInspectionReports::clear_has_reports() {
  _has_bits_[0] &= ~0x00000001u;
}
void PInspectionReports::clear_reports() {
  if (reports_ != NULL) reports_->::my_comm_proto::PInspectionRowList::Clear();
  clear_has_reports();
}
const ::my_comm_proto::PInspectionRowList& PInspectionReports::reports() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionReports.reports)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return reports_ != NULL ? *reports_ : *default_instance().reports_;
#else
  return reports_ != NULL ? *reports_ : *default_instance_->reports_;
#endif
}
::my_comm_proto::PInspectionRowList* PInspectionReports::mutable_reports() {
  set_has_reports();
  if (reports_ == NULL) {
    reports_ = new ::my_comm_proto::PInspectionRowList;
  }
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionReports.reports)
  return reports_;
}
::my_comm_proto::PInspectionRowList* PInspectionReports::release_reports() {
  clear_has_reports();
  ::my_comm_proto::PInspectionRowList* temp = reports_;
  reports_ = NULL;
  return temp;
}
void PInspectionReports::set_allocated_reports(::my_comm_proto::PInspectionRowList* reports) {
  delete reports_;
  reports_ = reports;
  if (reports) {
    set_has_reports();
  } else {
    clear_has_reports();
  }
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PInspectionReports.reports)
}

// repeated .my_comm_proto.PInspectionReportMediaFile mfiles = 2;
int PInspectionReports::mfiles_size() const {
  return mfiles_.size();
}
void PInspectionReports::clear_mfiles() {
  mfiles_.Clear();
}
const ::my_comm_proto::PInspectionReportMediaFile& PInspectionReports::mfiles(int index) const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionReports.mfiles)
  return mfiles_.Get(index);
}
::my_comm_proto::PInspectionReportMediaFile* PInspectionReports::mutable_mfiles(int index) {
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionReports.mfiles)
  return mfiles_.Mutable(index);
}
::my_comm_proto::PInspectionReportMediaFile* PInspectionReports::add_mfiles() {
  // @@protoc_insertion_point(field_add:my_comm_proto.PInspectionReports.mfiles)
  return mfiles_.Add();
}
::google::protobuf::RepeatedPtrField< ::my_comm_proto::PInspectionReportMediaFile >*
PInspectionReports::mutable_mfiles() {
  // @@protoc_insertion_point(field_mutable_list:my_comm_proto.PInspectionReports.mfiles)
  return &mfiles_;
}
const ::google::protobuf::RepeatedPtrField< ::my_comm_proto::PInspectionReportMediaFile >&
PInspectionReports::mfiles() const {
  // @@protoc_insertion_point(field_list:my_comm_proto.PInspectionReports.mfiles)
  return mfiles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PVehicleReports::kVehiclesFieldNumber;
const int PVehicleReports::kMfilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PVehicleReports::PVehicleReports()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PVehicleReports)
}

void PVehicleReports::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  vehicles_ = const_cast< ::my_comm_proto::PBoxIdVehicleRowList*>(
      ::my_comm_proto::PBoxIdVehicleRowList::internal_default_instance());
#else
  vehicles_ = const_cast< ::my_comm_proto::PBoxIdVehicleRowList*>(&::my_comm_proto::PBoxIdVehicleRowList::default_instance());
#endif
}

PVehicleReports::PVehicleReports(const PVehicleReports& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PVehicleReports)
}

void PVehicleReports::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicles_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVehicleReports::~PVehicleReports() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PVehicleReports)
  SharedDtor();
}

void PVehicleReports::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete vehicles_;
  }
}

void PVehicleReports::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PVehicleReports& PVehicleReports::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PVehicleReports* PVehicleReports::default_instance_ = NULL;

PVehicleReports* PVehicleReports::New(::google::protobuf::Arena* arena) const {
  PVehicleReports* n = new PVehicleReports;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PVehicleReports::Clear() {
  if (has_vehicles()) {
    if (vehicles_ != NULL) vehicles_->::my_comm_proto::PBoxIdVehicleRowList::Clear();
  }
  mfiles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PVehicleReports::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PVehicleReports)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .my_comm_proto.PBoxIdVehicleRowList vehicles = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mfiles;
        break;
      }

      // repeated .my_comm_proto.PInspectionReportMediaFile mfiles = 2;
      case 2: {
        if (tag == 18) {
         parse_mfiles:
          DO_(input->IncrementRecursionDepth());
         parse_loop_mfiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mfiles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_mfiles;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PVehicleReports)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PVehicleReports)
  return false;
#undef DO_
}

void PVehicleReports::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PVehicleReports)
  // required .my_comm_proto.PBoxIdVehicleRowList vehicles = 1;
  if (has_vehicles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->vehicles_, output);
  }

  // repeated .my_comm_proto.PInspectionReportMediaFile mfiles = 2;
  for (unsigned int i = 0, n = this->mfiles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->mfiles(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PVehicleReports)
}

int PVehicleReports::ByteSize() const {
  int total_size = 0;

  // required .my_comm_proto.PBoxIdVehicleRowList vehicles = 1;
  if (has_vehicles()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vehicles_);
  }
  // repeated .my_comm_proto.PInspectionReportMediaFile mfiles = 2;
  total_size += 1 * this->mfiles_size();
  for (int i = 0; i < this->mfiles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mfiles(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVehicleReports::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PVehicleReports*>(&from));
}

void PVehicleReports::MergeFrom(const PVehicleReports& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  mfiles_.MergeFrom(from.mfiles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vehicles()) {
      mutable_vehicles()->::my_comm_proto::PBoxIdVehicleRowList::MergeFrom(from.vehicles());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PVehicleReports::CopyFrom(const PVehicleReports& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVehicleReports::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_vehicles()) {
    if (!this->vehicles_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->mfiles())) return false;
  return true;
}

void PVehicleReports::Swap(PVehicleReports* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PVehicleReports::InternalSwap(PVehicleReports* other) {
  std::swap(vehicles_, other->vehicles_);
  mfiles_.UnsafeArenaSwap(&other->mfiles_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PVehicleReports::GetTypeName() const {
  return "my_comm_proto.PVehicleReports";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PVehicleReports

// required .my_comm_proto.PBoxIdVehicleRowList vehicles = 1;
bool PVehicleReports::has_vehicles() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PVehicleReports::set_has_vehicles() {
  _has_bits_[0] |= 0x00000001u;
}
void PVehicleReports::clear_has_vehicles() {
  _has_bits_[0] &= ~0x00000001u;
}
void PVehicleReports::clear_vehicles() {
  if (vehicles_ != NULL) vehicles_->::my_comm_proto::PBoxIdVehicleRowList::Clear();
  clear_has_vehicles();
}
const ::my_comm_proto::PBoxIdVehicleRowList& PVehicleReports::vehicles() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PVehicleReports.vehicles)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return vehicles_ != NULL ? *vehicles_ : *default_instance().vehicles_;
#else
  return vehicles_ != NULL ? *vehicles_ : *default_instance_->vehicles_;
#endif
}
::my_comm_proto::PBoxIdVehicleRowList* PVehicleReports::mutable_vehicles() {
  set_has_vehicles();
  if (vehicles_ == NULL) {
    vehicles_ = new ::my_comm_proto::PBoxIdVehicleRowList;
  }
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PVehicleReports.vehicles)
  return vehicles_;
}
::my_comm_proto::PBoxIdVehicleRowList* PVehicleReports::release_vehicles() {
  clear_has_vehicles();
  ::my_comm_proto::PBoxIdVehicleRowList* temp = vehicles_;
  vehicles_ = NULL;
  return temp;
}
void PVehicleReports::set_allocated_vehicles(::my_comm_proto::PBoxIdVehicleRowList* vehicles) {
  delete vehicles_;
  vehicles_ = vehicles;
  if (vehicles) {
    set_has_vehicles();
  } else {
    clear_has_vehicles();
  }
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PVehicleReports.vehicles)
}

// repeated .my_comm_proto.PInspectionReportMediaFile mfiles = 2;
int PVehicleReports::mfiles_size() const {
  return mfiles_.size();
}
void PVehicleReports::clear_mfiles() {
  mfiles_.Clear();
}
const ::my_comm_proto::PInspectionReportMediaFile& PVehicleReports::mfiles(int index) const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PVehicleReports.mfiles)
  return mfiles_.Get(index);
}
::my_comm_proto::PInspectionReportMediaFile* PVehicleReports::mutable_mfiles(int index) {
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PVehicleReports.mfiles)
  return mfiles_.Mutable(index);
}
::my_comm_proto::PInspectionReportMediaFile* PVehicleReports::add_mfiles() {
  // @@protoc_insertion_point(field_add:my_comm_proto.PVehicleReports.mfiles)
  return mfiles_.Add();
}
::google::protobuf::RepeatedPtrField< ::my_comm_proto::PInspectionReportMediaFile >*
PVehicleReports::mutable_mfiles() {
  // @@protoc_insertion_point(field_mutable_list:my_comm_proto.PVehicleReports.mfiles)
  return &mfiles_;
}
const ::google::protobuf::RepeatedPtrField< ::my_comm_proto::PInspectionReportMediaFile >&
PVehicleReports::mfiles() const {
  // @@protoc_insertion_point(field_list:my_comm_proto.PVehicleReports.mfiles)
  return mfiles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClsLoginMD::kResFieldNumber;
const int ClsLoginMD::kCidFieldNumber;
const int ClsLoginMD::kUserFieldNumber;
const int ClsLoginMD::kPassFieldNumber;
const int ClsLoginMD::kResourceIDFieldNumber;
const int ClsLoginMD::kDrNameFieldNumber;
const int ClsLoginMD::kVehiclesFieldNumber;
const int ClsLoginMD::kConfigFieldNumber;
const int ClsLoginMD::kDriverProfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClsLoginMD::ClsLoginMD()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.ClsLoginMD)
}

void ClsLoginMD::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  vehicles_ = const_cast< ::my_comm_proto::PBoxIdVehicleRowList*>(
      ::my_comm_proto::PBoxIdVehicleRowList::internal_default_instance());
#else
  vehicles_ = const_cast< ::my_comm_proto::PBoxIdVehicleRowList*>(&::my_comm_proto::PBoxIdVehicleRowList::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  config_ = const_cast< ::my_comm_proto::PConfiguration*>(
      ::my_comm_proto::PConfiguration::internal_default_instance());
#else
  config_ = const_cast< ::my_comm_proto::PConfiguration*>(&::my_comm_proto::PConfiguration::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  driverprof_ = const_cast< ::my_comm_proto::PEmployeeRow*>(
      ::my_comm_proto::PEmployeeRow::internal_default_instance());
#else
  driverprof_ = const_cast< ::my_comm_proto::PEmployeeRow*>(&::my_comm_proto::PEmployeeRow::default_instance());
#endif
}

ClsLoginMD::ClsLoginMD(const ClsLoginMD& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.ClsLoginMD)
}

void ClsLoginMD::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  res_ = false;
  cid_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resourceid_ = 0;
  drname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicles_ = NULL;
  config_ = NULL;
  driverprof_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClsLoginMD::~ClsLoginMD() {
  // @@protoc_insertion_point(destructor:my_comm_proto.ClsLoginMD)
  SharedDtor();
}

void ClsLoginMD::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete vehicles_;
    delete config_;
    delete driverprof_;
  }
}

void ClsLoginMD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClsLoginMD& ClsLoginMD::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

ClsLoginMD* ClsLoginMD::default_instance_ = NULL;

ClsLoginMD* ClsLoginMD::New(::google::protobuf::Arena* arena) const {
  ClsLoginMD* n = new ClsLoginMD;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClsLoginMD::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ClsLoginMD*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(res_, cid_);
    if (has_user()) {
      user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_pass()) {
      pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    resourceid_ = 0;
    if (has_drname()) {
      drname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_vehicles()) {
      if (vehicles_ != NULL) vehicles_->::my_comm_proto::PBoxIdVehicleRowList::Clear();
    }
    if (has_config()) {
      if (config_ != NULL) config_->::my_comm_proto::PConfiguration::Clear();
    }
  }
  if (has_driverprof()) {
    if (driverprof_ != NULL) driverprof_->::my_comm_proto::PEmployeeRow::Clear();
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClsLoginMD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.ClsLoginMD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool res = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required int32 cid = 2;
      case 2: {
        if (tag == 16) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // required string user = 3;
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pass;
        break;
      }

      // required string pass = 4;
      case 4: {
        if (tag == 34) {
         parse_pass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ResourceID;
        break;
      }

      // optional int32 ResourceID = 5;
      case 5: {
        if (tag == 40) {
         parse_ResourceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resourceid_)));
          set_has_resourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_DrName;
        break;
      }

      // optional string DrName = 6;
      case 6: {
        if (tag == 50) {
         parse_DrName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_drname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_vehicles;
        break;
      }

      // optional .my_comm_proto.PBoxIdVehicleRowList vehicles = 7;
      case 7: {
        if (tag == 58) {
         parse_vehicles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_config;
        break;
      }

      // optional .my_comm_proto.PConfiguration config = 8;
      case 8: {
        if (tag == 66) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_driverProf;
        break;
      }

      // optional .my_comm_proto.PEmployeeRow driverProf = 9;
      case 9: {
        if (tag == 74) {
         parse_driverProf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_driverprof()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.ClsLoginMD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.ClsLoginMD)
  return false;
#undef DO_
}

void ClsLoginMD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.ClsLoginMD)
  // required bool res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->res(), output);
  }

  // required int32 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cid(), output);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user(), output);
  }

  // required string pass = 4;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pass(), output);
  }

  // optional int32 ResourceID = 5;
  if (has_resourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->resourceid(), output);
  }

  // optional string DrName = 6;
  if (has_drname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->drname(), output);
  }

  // optional .my_comm_proto.PBoxIdVehicleRowList vehicles = 7;
  if (has_vehicles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->vehicles_, output);
  }

  // optional .my_comm_proto.PConfiguration config = 8;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->config_, output);
  }

  // optional .my_comm_proto.PEmployeeRow driverProf = 9;
  if (has_driverprof()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->driverprof_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.ClsLoginMD)
}

int ClsLoginMD::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_res()) {
    // required bool res = 1;
    total_size += 1 + 1;
  }

  if (has_cid()) {
    // required int32 cid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cid());
  }

  if (has_user()) {
    // required string user = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  if (has_pass()) {
    // required string pass = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pass());
  }

  return total_size;
}
int ClsLoginMD::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bool res = 1;
    total_size += 1 + 1;

    // required int32 cid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cid());

    // required string user = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());

    // required string pass = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pass());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 240u) {
    // optional int32 ResourceID = 5;
    if (has_resourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resourceid());
    }

    // optional string DrName = 6;
    if (has_drname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->drname());
    }

    // optional .my_comm_proto.PBoxIdVehicleRowList vehicles = 7;
    if (has_vehicles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicles_);
    }

    // optional .my_comm_proto.PConfiguration config = 8;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->config_);
    }

  }
  // optional .my_comm_proto.PEmployeeRow driverProf = 9;
  if (has_driverprof()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->driverprof_);
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClsLoginMD::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClsLoginMD*>(&from));
}

void ClsLoginMD::MergeFrom(const ClsLoginMD& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_user()) {
      set_has_user();
      user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
    }
    if (from.has_pass()) {
      set_has_pass();
      pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_);
    }
    if (from.has_resourceid()) {
      set_resourceid(from.resourceid());
    }
    if (from.has_drname()) {
      set_has_drname();
      drname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drname_);
    }
    if (from.has_vehicles()) {
      mutable_vehicles()->::my_comm_proto::PBoxIdVehicleRowList::MergeFrom(from.vehicles());
    }
    if (from.has_config()) {
      mutable_config()->::my_comm_proto::PConfiguration::MergeFrom(from.config());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_driverprof()) {
      mutable_driverprof()->::my_comm_proto::PEmployeeRow::MergeFrom(from.driverprof());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClsLoginMD::CopyFrom(const ClsLoginMD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClsLoginMD::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_vehicles()) {
    if (!this->vehicles_->IsInitialized()) return false;
  }
  if (has_config()) {
    if (!this->config_->IsInitialized()) return false;
  }
  if (has_driverprof()) {
    if (!this->driverprof_->IsInitialized()) return false;
  }
  return true;
}

void ClsLoginMD::Swap(ClsLoginMD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClsLoginMD::InternalSwap(ClsLoginMD* other) {
  std::swap(res_, other->res_);
  std::swap(cid_, other->cid_);
  user_.Swap(&other->user_);
  pass_.Swap(&other->pass_);
  std::swap(resourceid_, other->resourceid_);
  drname_.Swap(&other->drname_);
  std::swap(vehicles_, other->vehicles_);
  std::swap(config_, other->config_);
  std::swap(driverprof_, other->driverprof_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClsLoginMD::GetTypeName() const {
  return "my_comm_proto.ClsLoginMD";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClsLoginMD

// required bool res = 1;
bool ClsLoginMD::has_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClsLoginMD::set_has_res() {
  _has_bits_[0] |= 0x00000001u;
}
void ClsLoginMD::clear_has_res() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClsLoginMD::clear_res() {
  res_ = false;
  clear_has_res();
}
 bool ClsLoginMD::res() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.ClsLoginMD.res)
  return res_;
}
 void ClsLoginMD::set_res(bool value) {
  set_has_res();
  res_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.ClsLoginMD.res)
}

// required int32 cid = 2;
bool ClsLoginMD::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClsLoginMD::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
void ClsLoginMD::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClsLoginMD::clear_cid() {
  cid_ = 0;
  clear_has_cid();
}
 ::google::protobuf::int32 ClsLoginMD::cid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.ClsLoginMD.cid)
  return cid_;
}
 void ClsLoginMD::set_cid(::google::protobuf::int32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.ClsLoginMD.cid)
}

// required string user = 3;
bool ClsLoginMD::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ClsLoginMD::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
void ClsLoginMD::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
void ClsLoginMD::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
 const ::std::string& ClsLoginMD::user() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.ClsLoginMD.user)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClsLoginMD::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.ClsLoginMD.user)
}
 void ClsLoginMD::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.ClsLoginMD.user)
}
 void ClsLoginMD::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.ClsLoginMD.user)
}
 ::std::string* ClsLoginMD::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.ClsLoginMD.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClsLoginMD::release_user() {
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClsLoginMD::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.ClsLoginMD.user)
}

// required string pass = 4;
bool ClsLoginMD::has_pass() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ClsLoginMD::set_has_pass() {
  _has_bits_[0] |= 0x00000008u;
}
void ClsLoginMD::clear_has_pass() {
  _has_bits_[0] &= ~0x00000008u;
}
void ClsLoginMD::clear_pass() {
  pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pass();
}
 const ::std::string& ClsLoginMD::pass() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.ClsLoginMD.pass)
  return pass_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClsLoginMD::set_pass(const ::std::string& value) {
  set_has_pass();
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.ClsLoginMD.pass)
}
 void ClsLoginMD::set_pass(const char* value) {
  set_has_pass();
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.ClsLoginMD.pass)
}
 void ClsLoginMD::set_pass(const char* value, size_t size) {
  set_has_pass();
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.ClsLoginMD.pass)
}
 ::std::string* ClsLoginMD::mutable_pass() {
  set_has_pass();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.ClsLoginMD.pass)
  return pass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClsLoginMD::release_pass() {
  clear_has_pass();
  return pass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClsLoginMD::set_allocated_pass(::std::string* pass) {
  if (pass != NULL) {
    set_has_pass();
  } else {
    clear_has_pass();
  }
  pass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.ClsLoginMD.pass)
}

// optional int32 ResourceID = 5;
bool ClsLoginMD::has_resourceid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ClsLoginMD::set_has_resourceid() {
  _has_bits_[0] |= 0x00000010u;
}
void ClsLoginMD::clear_has_resourceid() {
  _has_bits_[0] &= ~0x00000010u;
}
void ClsLoginMD::clear_resourceid() {
  resourceid_ = 0;
  clear_has_resourceid();
}
 ::google::protobuf::int32 ClsLoginMD::resourceid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.ClsLoginMD.ResourceID)
  return resourceid_;
}
 void ClsLoginMD::set_resourceid(::google::protobuf::int32 value) {
  set_has_resourceid();
  resourceid_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.ClsLoginMD.ResourceID)
}

// optional string DrName = 6;
bool ClsLoginMD::has_drname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ClsLoginMD::set_has_drname() {
  _has_bits_[0] |= 0x00000020u;
}
void ClsLoginMD::clear_has_drname() {
  _has_bits_[0] &= ~0x00000020u;
}
void ClsLoginMD::clear_drname() {
  drname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_drname();
}
 const ::std::string& ClsLoginMD::drname() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.ClsLoginMD.DrName)
  return drname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClsLoginMD::set_drname(const ::std::string& value) {
  set_has_drname();
  drname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.ClsLoginMD.DrName)
}
 void ClsLoginMD::set_drname(const char* value) {
  set_has_drname();
  drname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.ClsLoginMD.DrName)
}
 void ClsLoginMD::set_drname(const char* value, size_t size) {
  set_has_drname();
  drname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.ClsLoginMD.DrName)
}
 ::std::string* ClsLoginMD::mutable_drname() {
  set_has_drname();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.ClsLoginMD.DrName)
  return drname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClsLoginMD::release_drname() {
  clear_has_drname();
  return drname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClsLoginMD::set_allocated_drname(::std::string* drname) {
  if (drname != NULL) {
    set_has_drname();
  } else {
    clear_has_drname();
  }
  drname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drname);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.ClsLoginMD.DrName)
}

// optional .my_comm_proto.PBoxIdVehicleRowList vehicles = 7;
bool ClsLoginMD::has_vehicles() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ClsLoginMD::set_has_vehicles() {
  _has_bits_[0] |= 0x00000040u;
}
void ClsLoginMD::clear_has_vehicles() {
  _has_bits_[0] &= ~0x00000040u;
}
void ClsLoginMD::clear_vehicles() {
  if (vehicles_ != NULL) vehicles_->::my_comm_proto::PBoxIdVehicleRowList::Clear();
  clear_has_vehicles();
}
const ::my_comm_proto::PBoxIdVehicleRowList& ClsLoginMD::vehicles() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.ClsLoginMD.vehicles)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return vehicles_ != NULL ? *vehicles_ : *default_instance().vehicles_;
#else
  return vehicles_ != NULL ? *vehicles_ : *default_instance_->vehicles_;
#endif
}
::my_comm_proto::PBoxIdVehicleRowList* ClsLoginMD::mutable_vehicles() {
  set_has_vehicles();
  if (vehicles_ == NULL) {
    vehicles_ = new ::my_comm_proto::PBoxIdVehicleRowList;
  }
  // @@protoc_insertion_point(field_mutable:my_comm_proto.ClsLoginMD.vehicles)
  return vehicles_;
}
::my_comm_proto::PBoxIdVehicleRowList* ClsLoginMD::release_vehicles() {
  clear_has_vehicles();
  ::my_comm_proto::PBoxIdVehicleRowList* temp = vehicles_;
  vehicles_ = NULL;
  return temp;
}
void ClsLoginMD::set_allocated_vehicles(::my_comm_proto::PBoxIdVehicleRowList* vehicles) {
  delete vehicles_;
  vehicles_ = vehicles;
  if (vehicles) {
    set_has_vehicles();
  } else {
    clear_has_vehicles();
  }
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.ClsLoginMD.vehicles)
}

// optional .my_comm_proto.PConfiguration config = 8;
bool ClsLoginMD::has_config() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ClsLoginMD::set_has_config() {
  _has_bits_[0] |= 0x00000080u;
}
void ClsLoginMD::clear_has_config() {
  _has_bits_[0] &= ~0x00000080u;
}
void ClsLoginMD::clear_config() {
  if (config_ != NULL) config_->::my_comm_proto::PConfiguration::Clear();
  clear_has_config();
}
const ::my_comm_proto::PConfiguration& ClsLoginMD::config() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.ClsLoginMD.config)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return config_ != NULL ? *config_ : *default_instance().config_;
#else
  return config_ != NULL ? *config_ : *default_instance_->config_;
#endif
}
::my_comm_proto::PConfiguration* ClsLoginMD::mutable_config() {
  set_has_config();
  if (config_ == NULL) {
    config_ = new ::my_comm_proto::PConfiguration;
  }
  // @@protoc_insertion_point(field_mutable:my_comm_proto.ClsLoginMD.config)
  return config_;
}
::my_comm_proto::PConfiguration* ClsLoginMD::release_config() {
  clear_has_config();
  ::my_comm_proto::PConfiguration* temp = config_;
  config_ = NULL;
  return temp;
}
void ClsLoginMD::set_allocated_config(::my_comm_proto::PConfiguration* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.ClsLoginMD.config)
}

// optional .my_comm_proto.PEmployeeRow driverProf = 9;
bool ClsLoginMD::has_driverprof() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ClsLoginMD::set_has_driverprof() {
  _has_bits_[0] |= 0x00000100u;
}
void ClsLoginMD::clear_has_driverprof() {
  _has_bits_[0] &= ~0x00000100u;
}
void ClsLoginMD::clear_driverprof() {
  if (driverprof_ != NULL) driverprof_->::my_comm_proto::PEmployeeRow::Clear();
  clear_has_driverprof();
}
const ::my_comm_proto::PEmployeeRow& ClsLoginMD::driverprof() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.ClsLoginMD.driverProf)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return driverprof_ != NULL ? *driverprof_ : *default_instance().driverprof_;
#else
  return driverprof_ != NULL ? *driverprof_ : *default_instance_->driverprof_;
#endif
}
::my_comm_proto::PEmployeeRow* ClsLoginMD::mutable_driverprof() {
  set_has_driverprof();
  if (driverprof_ == NULL) {
    driverprof_ = new ::my_comm_proto::PEmployeeRow;
  }
  // @@protoc_insertion_point(field_mutable:my_comm_proto.ClsLoginMD.driverProf)
  return driverprof_;
}
::my_comm_proto::PEmployeeRow* ClsLoginMD::release_driverprof() {
  clear_has_driverprof();
  ::my_comm_proto::PEmployeeRow* temp = driverprof_;
  driverprof_ = NULL;
  return temp;
}
void ClsLoginMD::set_allocated_driverprof(::my_comm_proto::PEmployeeRow* driverprof) {
  delete driverprof_;
  driverprof_ = driverprof;
  if (driverprof) {
    set_has_driverprof();
  } else {
    clear_has_driverprof();
  }
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.ClsLoginMD.driverProf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PMobileHB::kRidFieldNumber;
const int PMobileHB::kLatFieldNumber;
const int PMobileHB::kLonFieldNumber;
const int PMobileHB::kSpdFieldNumber;
const int PMobileHB::kCogFieldNumber;
const int PMobileHB::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PMobileHB::PMobileHB()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PMobileHB)
}

void PMobileHB::InitAsDefaultInstance() {
}

PMobileHB::PMobileHB(const PMobileHB& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PMobileHB)
}

void PMobileHB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rid_ = 0;
  lat_ = 0;
  lon_ = 0;
  spd_ = 0;
  cog_ = 0;
  ts_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PMobileHB::~PMobileHB() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PMobileHB)
  SharedDtor();
}

void PMobileHB::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PMobileHB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PMobileHB& PMobileHB::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PMobileHB* PMobileHB::default_instance_ = NULL;

PMobileHB* PMobileHB::New(::google::protobuf::Arena* arena) const {
  PMobileHB* n = new PMobileHB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PMobileHB::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PMobileHB*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(rid_, cog_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PMobileHB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PMobileHB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_lat;
        break;
      }

      // required float lat = 2;
      case 2: {
        if (tag == 21) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_lon;
        break;
      }

      // required float lon = 3;
      case 3: {
        if (tag == 29) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_spd;
        break;
      }

      // required int32 spd = 4;
      case 4: {
        if (tag == 32) {
         parse_spd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spd_)));
          set_has_spd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cog;
        break;
      }

      // required int32 cog = 5;
      case 5: {
        if (tag == 40) {
         parse_cog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cog_)));
          set_has_cog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ts;
        break;
      }

      // required int64 ts = 6;
      case 6: {
        if (tag == 48) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PMobileHB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PMobileHB)
  return false;
#undef DO_
}

void PMobileHB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PMobileHB)
  // required int32 rid = 1;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rid(), output);
  }

  // required float lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lat(), output);
  }

  // required float lon = 3;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lon(), output);
  }

  // required int32 spd = 4;
  if (has_spd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->spd(), output);
  }

  // required int32 cog = 5;
  if (has_cog()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cog(), output);
  }

  // required int64 ts = 6;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->ts(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PMobileHB)
}

int PMobileHB::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_rid()) {
    // required int32 rid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rid());
  }

  if (has_lat()) {
    // required float lat = 2;
    total_size += 1 + 4;
  }

  if (has_lon()) {
    // required float lon = 3;
    total_size += 1 + 4;
  }

  if (has_spd()) {
    // required int32 spd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->spd());
  }

  if (has_cog()) {
    // required int32 cog = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cog());
  }

  if (has_ts()) {
    // required int64 ts = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ts());
  }

  return total_size;
}
int PMobileHB::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int32 rid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rid());

    // required float lat = 2;
    total_size += 1 + 4;

    // required float lon = 3;
    total_size += 1 + 4;

    // required int32 spd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->spd());

    // required int32 cog = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cog());

    // required int64 ts = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ts());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PMobileHB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PMobileHB*>(&from));
}

void PMobileHB::MergeFrom(const PMobileHB& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_spd()) {
      set_spd(from.spd());
    }
    if (from.has_cog()) {
      set_cog(from.cog());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PMobileHB::CopyFrom(const PMobileHB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMobileHB::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PMobileHB::Swap(PMobileHB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PMobileHB::InternalSwap(PMobileHB* other) {
  std::swap(rid_, other->rid_);
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  std::swap(spd_, other->spd_);
  std::swap(cog_, other->cog_);
  std::swap(ts_, other->ts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PMobileHB::GetTypeName() const {
  return "my_comm_proto.PMobileHB";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PMobileHB

// required int32 rid = 1;
bool PMobileHB::has_rid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PMobileHB::set_has_rid() {
  _has_bits_[0] |= 0x00000001u;
}
void PMobileHB::clear_has_rid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PMobileHB::clear_rid() {
  rid_ = 0;
  clear_has_rid();
}
 ::google::protobuf::int32 PMobileHB::rid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PMobileHB.rid)
  return rid_;
}
 void PMobileHB::set_rid(::google::protobuf::int32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PMobileHB.rid)
}

// required float lat = 2;
bool PMobileHB::has_lat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PMobileHB::set_has_lat() {
  _has_bits_[0] |= 0x00000002u;
}
void PMobileHB::clear_has_lat() {
  _has_bits_[0] &= ~0x00000002u;
}
void PMobileHB::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
 float PMobileHB::lat() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PMobileHB.lat)
  return lat_;
}
 void PMobileHB::set_lat(float value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PMobileHB.lat)
}

// required float lon = 3;
bool PMobileHB::has_lon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PMobileHB::set_has_lon() {
  _has_bits_[0] |= 0x00000004u;
}
void PMobileHB::clear_has_lon() {
  _has_bits_[0] &= ~0x00000004u;
}
void PMobileHB::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
 float PMobileHB::lon() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PMobileHB.lon)
  return lon_;
}
 void PMobileHB::set_lon(float value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PMobileHB.lon)
}

// required int32 spd = 4;
bool PMobileHB::has_spd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PMobileHB::set_has_spd() {
  _has_bits_[0] |= 0x00000008u;
}
void PMobileHB::clear_has_spd() {
  _has_bits_[0] &= ~0x00000008u;
}
void PMobileHB::clear_spd() {
  spd_ = 0;
  clear_has_spd();
}
 ::google::protobuf::int32 PMobileHB::spd() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PMobileHB.spd)
  return spd_;
}
 void PMobileHB::set_spd(::google::protobuf::int32 value) {
  set_has_spd();
  spd_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PMobileHB.spd)
}

// required int32 cog = 5;
bool PMobileHB::has_cog() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PMobileHB::set_has_cog() {
  _has_bits_[0] |= 0x00000010u;
}
void PMobileHB::clear_has_cog() {
  _has_bits_[0] &= ~0x00000010u;
}
void PMobileHB::clear_cog() {
  cog_ = 0;
  clear_has_cog();
}
 ::google::protobuf::int32 PMobileHB::cog() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PMobileHB.cog)
  return cog_;
}
 void PMobileHB::set_cog(::google::protobuf::int32 value) {
  set_has_cog();
  cog_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PMobileHB.cog)
}

// required int64 ts = 6;
bool PMobileHB::has_ts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PMobileHB::set_has_ts() {
  _has_bits_[0] |= 0x00000020u;
}
void PMobileHB::clear_has_ts() {
  _has_bits_[0] &= ~0x00000020u;
}
void PMobileHB::clear_ts() {
  ts_ = GOOGLE_LONGLONG(0);
  clear_has_ts();
}
 ::google::protobuf::int64 PMobileHB::ts() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PMobileHB.ts)
  return ts_;
}
 void PMobileHB::set_ts(::google::protobuf::int64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PMobileHB.ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommPacket::kReqFieldNumber;
const int CommPacket::kRIDFieldNumber;
const int CommPacket::kCIDFieldNumber;
const int CommPacket::kUserFieldNumber;
const int CommPacket::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommPacket::CommPacket()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.CommPacket)
}

void CommPacket::InitAsDefaultInstance() {
}

CommPacket::CommPacket(const CommPacket& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.CommPacket)
}

void CommPacket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  req_ = 0;
  rid_ = 0;
  cid_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommPacket::~CommPacket() {
  // @@protoc_insertion_point(destructor:my_comm_proto.CommPacket)
  SharedDtor();
}

void CommPacket::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CommPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommPacket& CommPacket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

CommPacket* CommPacket::default_instance_ = NULL;

CommPacket* CommPacket::New(::google::protobuf::Arena* arena) const {
  CommPacket* n = new CommPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommPacket::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CommPacket*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(req_, rid_);
    cid_ = 0;
    if (has_user()) {
      user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_payload()) {
      payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CommPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.CommPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 req = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &req_)));
          set_has_req();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rID;
        break;
      }

      // required int32 rID = 2;
      case 2: {
        if (tag == 16) {
         parse_rID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cID;
        break;
      }

      // required int32 cID = 3;
      case 3: {
        if (tag == 24) {
         parse_cID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // required string user = 4;
      case 4: {
        if (tag == 34) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_payload;
        break;
      }

      // required bytes payload = 5;
      case 5: {
        if (tag == 42) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.CommPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.CommPacket)
  return false;
#undef DO_
}

void CommPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.CommPacket)
  // required int32 req = 1;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->req(), output);
  }

  // required int32 rID = 2;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rid(), output);
  }

  // required int32 cID = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cid(), output);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user(), output);
  }

  // required bytes payload = 5;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->payload(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.CommPacket)
}

int CommPacket::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_req()) {
    // required int32 req = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->req());
  }

  if (has_rid()) {
    // required int32 rID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rid());
  }

  if (has_cid()) {
    // required int32 cID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cid());
  }

  if (has_user()) {
    // required string user = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  if (has_payload()) {
    // required bytes payload = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  return total_size;
}
int CommPacket::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 req = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->req());

    // required int32 rID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rid());

    // required int32 cID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cid());

    // required string user = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());

    // required bytes payload = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommPacket*>(&from));
}

void CommPacket::MergeFrom(const CommPacket& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req()) {
      set_req(from.req());
    }
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_user()) {
      set_has_user();
      user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
    }
    if (from.has_payload()) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CommPacket::CopyFrom(const CommPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CommPacket::Swap(CommPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommPacket::InternalSwap(CommPacket* other) {
  std::swap(req_, other->req_);
  std::swap(rid_, other->rid_);
  std::swap(cid_, other->cid_);
  user_.Swap(&other->user_);
  payload_.Swap(&other->payload_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CommPacket::GetTypeName() const {
  return "my_comm_proto.CommPacket";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommPacket

// required int32 req = 1;
bool CommPacket::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommPacket::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
void CommPacket::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommPacket::clear_req() {
  req_ = 0;
  clear_has_req();
}
 ::google::protobuf::int32 CommPacket::req() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.CommPacket.req)
  return req_;
}
 void CommPacket::set_req(::google::protobuf::int32 value) {
  set_has_req();
  req_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.CommPacket.req)
}

// required int32 rID = 2;
bool CommPacket::has_rid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CommPacket::set_has_rid() {
  _has_bits_[0] |= 0x00000002u;
}
void CommPacket::clear_has_rid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CommPacket::clear_rid() {
  rid_ = 0;
  clear_has_rid();
}
 ::google::protobuf::int32 CommPacket::rid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.CommPacket.rID)
  return rid_;
}
 void CommPacket::set_rid(::google::protobuf::int32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.CommPacket.rID)
}

// required int32 cID = 3;
bool CommPacket::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CommPacket::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
void CommPacket::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CommPacket::clear_cid() {
  cid_ = 0;
  clear_has_cid();
}
 ::google::protobuf::int32 CommPacket::cid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.CommPacket.cID)
  return cid_;
}
 void CommPacket::set_cid(::google::protobuf::int32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.CommPacket.cID)
}

// required string user = 4;
bool CommPacket::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CommPacket::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
void CommPacket::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
void CommPacket::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
 const ::std::string& CommPacket::user() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.CommPacket.user)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommPacket::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.CommPacket.user)
}
 void CommPacket::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.CommPacket.user)
}
 void CommPacket::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.CommPacket.user)
}
 ::std::string* CommPacket::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.CommPacket.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CommPacket::release_user() {
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommPacket::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.CommPacket.user)
}

// required bytes payload = 5;
bool CommPacket::has_payload() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CommPacket::set_has_payload() {
  _has_bits_[0] |= 0x00000010u;
}
void CommPacket::clear_has_payload() {
  _has_bits_[0] &= ~0x00000010u;
}
void CommPacket::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
 const ::std::string& CommPacket::payload() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.CommPacket.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommPacket::set_payload(const ::std::string& value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.CommPacket.payload)
}
 void CommPacket::set_payload(const char* value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.CommPacket.payload)
}
 void CommPacket::set_payload(const void* value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.CommPacket.payload)
}
 ::std::string* CommPacket::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.CommPacket.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CommPacket::release_payload() {
  clear_has_payload();
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommPacket::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.CommPacket.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace my_comm_proto

// @@protoc_insertion_point(global_scope)

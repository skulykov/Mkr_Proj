// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: my_common_proto_comm_lite.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "my_common_proto_comm_lite.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace my_comm_proto {

void protobuf_ShutdownFile_my_5fcommon_5fproto_5fcomm_5flite_2eproto() {
  delete PAMessage::default_instance_;
  delete PWOIStatus::default_instance_;
  delete PWorkOrderItem::default_instance_;
  delete PWorkOrderList::default_instance_;
  delete PWOIStatusList::default_instance_;
  delete PBoxIdVehicleRow::default_instance_;
  delete PBoxIdVehicleRowList::default_instance_;
  delete PConfiguration::default_instance_;
  delete PEmployeeRow::default_instance_;
  delete PTimeLogRow::default_instance_;
  delete PHosAlertRow::default_instance_;
  delete PRecapRow::default_instance_;
  delete PRuleSelectionHistoryRow::default_instance_;
  delete PTimeLogRowList::default_instance_;
  delete PRecapRowList::default_instance_;
  delete PRuleSelectionHistoryRowList::default_instance_;
  delete PInspectionItem::default_instance_;
  delete PInspectionItemList::default_instance_;
  delete PInspectionCategoryRow::default_instance_;
  delete PInspectionRow::default_instance_;
  delete PInspectionRowList::default_instance_;
  delete PInspectionCategoryRowList::default_instance_;
  delete PRegister::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  PAMessage::default_instance_ = new PAMessage();
  PWOIStatus::default_instance_ = new PWOIStatus();
  PWorkOrderItem::default_instance_ = new PWorkOrderItem();
  PWorkOrderList::default_instance_ = new PWorkOrderList();
  PWOIStatusList::default_instance_ = new PWOIStatusList();
  PBoxIdVehicleRow::default_instance_ = new PBoxIdVehicleRow();
  PBoxIdVehicleRowList::default_instance_ = new PBoxIdVehicleRowList();
  PConfiguration::default_instance_ = new PConfiguration();
  PEmployeeRow::default_instance_ = new PEmployeeRow();
  PTimeLogRow::default_instance_ = new PTimeLogRow();
  PHosAlertRow::default_instance_ = new PHosAlertRow();
  PRecapRow::default_instance_ = new PRecapRow();
  PRuleSelectionHistoryRow::default_instance_ = new PRuleSelectionHistoryRow();
  PTimeLogRowList::default_instance_ = new PTimeLogRowList();
  PRecapRowList::default_instance_ = new PRecapRowList();
  PRuleSelectionHistoryRowList::default_instance_ = new PRuleSelectionHistoryRowList();
  PInspectionItem::default_instance_ = new PInspectionItem();
  PInspectionItemList::default_instance_ = new PInspectionItemList();
  PInspectionCategoryRow::default_instance_ = new PInspectionCategoryRow();
  PInspectionRow::default_instance_ = new PInspectionRow();
  PInspectionRowList::default_instance_ = new PInspectionRowList();
  PInspectionCategoryRowList::default_instance_ = new PInspectionCategoryRowList();
  PRegister::default_instance_ = new PRegister();
  PAMessage::default_instance_->InitAsDefaultInstance();
  PWOIStatus::default_instance_->InitAsDefaultInstance();
  PWorkOrderItem::default_instance_->InitAsDefaultInstance();
  PWorkOrderList::default_instance_->InitAsDefaultInstance();
  PWOIStatusList::default_instance_->InitAsDefaultInstance();
  PBoxIdVehicleRow::default_instance_->InitAsDefaultInstance();
  PBoxIdVehicleRowList::default_instance_->InitAsDefaultInstance();
  PConfiguration::default_instance_->InitAsDefaultInstance();
  PEmployeeRow::default_instance_->InitAsDefaultInstance();
  PTimeLogRow::default_instance_->InitAsDefaultInstance();
  PHosAlertRow::default_instance_->InitAsDefaultInstance();
  PRecapRow::default_instance_->InitAsDefaultInstance();
  PRuleSelectionHistoryRow::default_instance_->InitAsDefaultInstance();
  PTimeLogRowList::default_instance_->InitAsDefaultInstance();
  PRecapRowList::default_instance_->InitAsDefaultInstance();
  PRuleSelectionHistoryRowList::default_instance_->InitAsDefaultInstance();
  PInspectionItem::default_instance_->InitAsDefaultInstance();
  PInspectionItemList::default_instance_->InitAsDefaultInstance();
  PInspectionCategoryRow::default_instance_->InitAsDefaultInstance();
  PInspectionRow::default_instance_->InitAsDefaultInstance();
  PInspectionRowList::default_instance_->InitAsDefaultInstance();
  PInspectionCategoryRowList::default_instance_->InitAsDefaultInstance();
  PRegister::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_my_5fcommon_5fproto_5fcomm_5flite_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto_once_);
void protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto_once_,
                 &protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_my_5fcommon_5fproto_5fcomm_5flite_2eproto {
  StaticDescriptorInitializer_my_5fcommon_5fproto_5fcomm_5flite_2eproto() {
    protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
  }
} static_descriptor_initializer_my_5fcommon_5fproto_5fcomm_5flite_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PAMessage::kAIDFieldNumber;
const int PAMessage::kRIDFieldNumber;
const int PAMessage::kMsgFieldNumber;
const int PAMessage::kTsFieldNumber;
const int PAMessage::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PAMessage::PAMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PAMessage)
}

void PAMessage::InitAsDefaultInstance() {
}

PAMessage::PAMessage(const PAMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PAMessage)
}

void PAMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aid_ = 0;
  rid_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ts_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PAMessage::~PAMessage() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PAMessage)
  SharedDtor();
}

void PAMessage::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PAMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PAMessage& PAMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PAMessage* PAMessage::default_instance_ = NULL;

PAMessage* PAMessage::New(::google::protobuf::Arena* arena) const {
  PAMessage* n = new PAMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PAMessage::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PAMessage*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(aid_, rid_);
    ZR_(ts_, type_);
    if (has_msg()) {
      msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PAMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PAMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 aID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rID;
        break;
      }

      // required int32 rID = 2;
      case 2: {
        if (tag == 16) {
         parse_rID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // required string msg = 3;
      case 3: {
        if (tag == 26) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ts;
        break;
      }

      // required int64 ts = 4;
      case 4: {
        if (tag == 32) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // required int32 type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PAMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PAMessage)
  return false;
#undef DO_
}

void PAMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PAMessage)
  // required int32 aID = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->aid(), output);
  }

  // required int32 rID = 2;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rid(), output);
  }

  // required string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  // required int64 ts = 4;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ts(), output);
  }

  // required int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PAMessage)
}

int PAMessage::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_aid()) {
    // required int32 aID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->aid());
  }

  if (has_rid()) {
    // required int32 rID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rid());
  }

  if (has_msg()) {
    // required string msg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  if (has_ts()) {
    // required int64 ts = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ts());
  }

  if (has_type()) {
    // required int32 type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
int PAMessage::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 aID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->aid());

    // required int32 rID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rid());

    // required string msg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());

    // required int64 ts = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ts());

    // required int32 type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PAMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PAMessage*>(&from));
}

void PAMessage::MergeFrom(const PAMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PAMessage::CopyFrom(const PAMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PAMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PAMessage::Swap(PAMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PAMessage::InternalSwap(PAMessage* other) {
  std::swap(aid_, other->aid_);
  std::swap(rid_, other->rid_);
  msg_.Swap(&other->msg_);
  std::swap(ts_, other->ts_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PAMessage::GetTypeName() const {
  return "my_comm_proto.PAMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PAMessage

// required int32 aID = 1;
bool PAMessage::has_aid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PAMessage::set_has_aid() {
  _has_bits_[0] |= 0x00000001u;
}
void PAMessage::clear_has_aid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PAMessage::clear_aid() {
  aid_ = 0;
  clear_has_aid();
}
 ::google::protobuf::int32 PAMessage::aid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PAMessage.aID)
  return aid_;
}
 void PAMessage::set_aid(::google::protobuf::int32 value) {
  set_has_aid();
  aid_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PAMessage.aID)
}

// required int32 rID = 2;
bool PAMessage::has_rid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PAMessage::set_has_rid() {
  _has_bits_[0] |= 0x00000002u;
}
void PAMessage::clear_has_rid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PAMessage::clear_rid() {
  rid_ = 0;
  clear_has_rid();
}
 ::google::protobuf::int32 PAMessage::rid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PAMessage.rID)
  return rid_;
}
 void PAMessage::set_rid(::google::protobuf::int32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PAMessage.rID)
}

// required string msg = 3;
bool PAMessage::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PAMessage::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
void PAMessage::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
void PAMessage::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
 const ::std::string& PAMessage::msg() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PAMessage.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PAMessage::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PAMessage.msg)
}
 void PAMessage::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PAMessage.msg)
}
 void PAMessage::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PAMessage.msg)
}
 ::std::string* PAMessage::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PAMessage.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PAMessage::release_msg() {
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PAMessage::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PAMessage.msg)
}

// required int64 ts = 4;
bool PAMessage::has_ts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PAMessage::set_has_ts() {
  _has_bits_[0] |= 0x00000008u;
}
void PAMessage::clear_has_ts() {
  _has_bits_[0] &= ~0x00000008u;
}
void PAMessage::clear_ts() {
  ts_ = GOOGLE_LONGLONG(0);
  clear_has_ts();
}
 ::google::protobuf::int64 PAMessage::ts() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PAMessage.ts)
  return ts_;
}
 void PAMessage::set_ts(::google::protobuf::int64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PAMessage.ts)
}

// required int32 type = 5;
bool PAMessage::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PAMessage::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void PAMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void PAMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::google::protobuf::int32 PAMessage::type() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PAMessage.type)
  return type_;
}
 void PAMessage::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PAMessage.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PWOIStatus::kIDFieldNumber;
const int PWOIStatus::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PWOIStatus::PWOIStatus()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PWOIStatus)
}

void PWOIStatus::InitAsDefaultInstance() {
}

PWOIStatus::PWOIStatus(const PWOIStatus& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PWOIStatus)
}

void PWOIStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PWOIStatus::~PWOIStatus() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PWOIStatus)
  SharedDtor();
}

void PWOIStatus::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PWOIStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PWOIStatus& PWOIStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PWOIStatus* PWOIStatus::default_instance_ = NULL;

PWOIStatus* PWOIStatus::New(::google::protobuf::Arena* arena) const {
  PWOIStatus* n = new PWOIStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PWOIStatus::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PWOIStatus*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, status_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PWOIStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PWOIStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PWOIStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PWOIStatus)
  return false;
#undef DO_
}

void PWOIStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PWOIStatus)
  // required int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PWOIStatus)
}

int PWOIStatus::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required int64 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  if (has_status()) {
    // required int32 status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  return total_size;
}
int PWOIStatus::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());

    // required int32 status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PWOIStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PWOIStatus*>(&from));
}

void PWOIStatus::MergeFrom(const PWOIStatus& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PWOIStatus::CopyFrom(const PWOIStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PWOIStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PWOIStatus::Swap(PWOIStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PWOIStatus::InternalSwap(PWOIStatus* other) {
  std::swap(id_, other->id_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PWOIStatus::GetTypeName() const {
  return "my_comm_proto.PWOIStatus";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PWOIStatus

// required int64 ID = 1;
bool PWOIStatus::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PWOIStatus::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PWOIStatus::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PWOIStatus::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::int64 PWOIStatus::id() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWOIStatus.ID)
  return id_;
}
 void PWOIStatus::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PWOIStatus.ID)
}

// required int32 status = 2;
bool PWOIStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PWOIStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void PWOIStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void PWOIStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::google::protobuf::int32 PWOIStatus::status() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWOIStatus.status)
  return status_;
}
 void PWOIStatus::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PWOIStatus.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PWorkOrderItem::kIDFieldNumber;
const int PWorkOrderItem::kNameFieldNumber;
const int PWorkOrderItem::kCallerFieldNumber;
const int PWorkOrderItem::kPhoneFieldNumber;
const int PWorkOrderItem::kReferenceFieldNumber;
const int PWorkOrderItem::kLocationNameFieldNumber;
const int PWorkOrderItem::kStreetFieldNumber;
const int PWorkOrderItem::kCityFieldNumber;
const int PWorkOrderItem::kCountryFieldNumber;
const int PWorkOrderItem::kPostalCodeFieldNumber;
const int PWorkOrderItem::kProvinceFieldNumber;
const int PWorkOrderItem::kInstructionsFieldNumber;
const int PWorkOrderItem::kStartTimeFieldNumber;
const int PWorkOrderItem::kEndTimeFieldNumber;
const int PWorkOrderItem::kActInstrsFieldNumber;
const int PWorkOrderItem::kCreatedTSFieldNumber;
const int PWorkOrderItem::kLastUpdtdTSFieldNumber;
const int PWorkOrderItem::kAcceptedTSFieldNumber;
const int PWorkOrderItem::kCompletedTSFieldNumber;
const int PWorkOrderItem::kStatusFieldNumber;
const int PWorkOrderItem::kServiceGroupFieldNumber;
const int PWorkOrderItem::kResourceIDFieldNumber;
const int PWorkOrderItem::kLatFieldNumber;
const int PWorkOrderItem::kLonFieldNumber;
const int PWorkOrderItem::kEditFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PWorkOrderItem::PWorkOrderItem()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PWorkOrderItem)
}

void PWorkOrderItem::InitAsDefaultInstance() {
}

PWorkOrderItem::PWorkOrderItem(const PWorkOrderItem& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PWorkOrderItem)
}

void PWorkOrderItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caller_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locationname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  street_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postalcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instructions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  starttime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  actinstrs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdts_ = GOOGLE_LONGLONG(0);
  lastupdtdts_ = GOOGLE_LONGLONG(0);
  acceptedts_ = GOOGLE_LONGLONG(0);
  completedts_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  servicegroup_ = 0;
  resourceid_ = GOOGLE_LONGLONG(0);
  lat_ = 0;
  lon_ = 0;
  editflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PWorkOrderItem::~PWorkOrderItem() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PWorkOrderItem)
  SharedDtor();
}

void PWorkOrderItem::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caller_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locationname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  street_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postalcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  province_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instructions_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actinstrs_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PWorkOrderItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PWorkOrderItem& PWorkOrderItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PWorkOrderItem* PWorkOrderItem::default_instance_ = NULL;

PWorkOrderItem* PWorkOrderItem::New(::google::protobuf::Arena* arena) const {
  PWorkOrderItem* n = new PWorkOrderItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PWorkOrderItem::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PWorkOrderItem*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_caller()) {
      caller_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_phone()) {
      phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_reference()) {
      reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_locationname()) {
      locationname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_street()) {
      street_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_city()) {
      city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(starttime_, endtime_);
    if (has_country()) {
      country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_postalcode()) {
      postalcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_province()) {
      province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_instructions()) {
      instructions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_actinstrs()) {
      actinstrs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    createdts_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(lastupdtdts_, lon_);
  }
  editflag_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PWorkOrderItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PWorkOrderItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (tag == 18) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Caller;
        break;
      }

      // required string Caller = 3;
      case 3: {
        if (tag == 26) {
         parse_Caller:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caller()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Phone;
        break;
      }

      // optional string Phone = 4;
      case 4: {
        if (tag == 34) {
         parse_Phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Reference;
        break;
      }

      // required string Reference = 5;
      case 5: {
        if (tag == 42) {
         parse_Reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_LocationName;
        break;
      }

      // required string LocationName = 6;
      case 6: {
        if (tag == 50) {
         parse_LocationName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locationname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Street;
        break;
      }

      // optional string Street = 7;
      case 7: {
        if (tag == 58) {
         parse_Street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_City;
        break;
      }

      // optional string City = 9;
      case 9: {
        if (tag == 74) {
         parse_City:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Country;
        break;
      }

      // optional string Country = 10;
      case 10: {
        if (tag == 82) {
         parse_Country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_PostalCode;
        break;
      }

      // optional string PostalCode = 11;
      case 11: {
        if (tag == 90) {
         parse_PostalCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postalcode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_Province;
        break;
      }

      // optional string Province = 13;
      case 13: {
        if (tag == 106) {
         parse_Province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_Instructions;
        break;
      }

      // required string Instructions = 14;
      case 14: {
        if (tag == 114) {
         parse_Instructions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instructions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_StartTime;
        break;
      }

      // required int64 StartTime = 15;
      case 15: {
        if (tag == 120) {
         parse_StartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_EndTime;
        break;
      }

      // required int64 EndTime = 16;
      case 16: {
        if (tag == 128) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_ActInstrs;
        break;
      }

      // required string ActInstrs = 17;
      case 17: {
        if (tag == 138) {
         parse_ActInstrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actinstrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_CreatedTS;
        break;
      }

      // optional int64 CreatedTS = 18;
      case 18: {
        if (tag == 144) {
         parse_CreatedTS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createdts_)));
          set_has_createdts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_LastUpdtdTS;
        break;
      }

      // optional int64 LastUpdtdTS = 19;
      case 19: {
        if (tag == 152) {
         parse_LastUpdtdTS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastupdtdts_)));
          set_has_lastupdtdts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_AcceptedTS;
        break;
      }

      // optional int64 AcceptedTS = 20;
      case 20: {
        if (tag == 160) {
         parse_AcceptedTS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &acceptedts_)));
          set_has_acceptedts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_CompletedTS;
        break;
      }

      // optional int64 CompletedTS = 21;
      case 21: {
        if (tag == 168) {
         parse_CompletedTS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &completedts_)));
          set_has_completedts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_status;
        break;
      }

      // required int32 status = 22;
      case 22: {
        if (tag == 176) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_serviceGroup;
        break;
      }

      // required int32 serviceGroup = 23;
      case 23: {
        if (tag == 184) {
         parse_serviceGroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servicegroup_)));
          set_has_servicegroup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_resourceID;
        break;
      }

      // required int64 resourceID = 24;
      case 24: {
        if (tag == 192) {
         parse_resourceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &resourceid_)));
          set_has_resourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_Lat;
        break;
      }

      // optional float Lat = 25;
      case 25: {
        if (tag == 205) {
         parse_Lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(213)) goto parse_Lon;
        break;
      }

      // optional float Lon = 26;
      case 26: {
        if (tag == 213) {
         parse_Lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_editFlag;
        break;
      }

      // optional int32 editFlag = 27;
      case 27: {
        if (tag == 216) {
         parse_editFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &editflag_)));
          set_has_editflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PWorkOrderItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PWorkOrderItem)
  return false;
#undef DO_
}

void PWorkOrderItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PWorkOrderItem)
  // required int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required string Caller = 3;
  if (has_caller()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->caller(), output);
  }

  // optional string Phone = 4;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->phone(), output);
  }

  // required string Reference = 5;
  if (has_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->reference(), output);
  }

  // required string LocationName = 6;
  if (has_locationname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->locationname(), output);
  }

  // optional string Street = 7;
  if (has_street()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->street(), output);
  }

  // optional string City = 9;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->city(), output);
  }

  // optional string Country = 10;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->country(), output);
  }

  // optional string PostalCode = 11;
  if (has_postalcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->postalcode(), output);
  }

  // optional string Province = 13;
  if (has_province()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->province(), output);
  }

  // required string Instructions = 14;
  if (has_instructions()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->instructions(), output);
  }

  // required int64 StartTime = 15;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->starttime(), output);
  }

  // required int64 EndTime = 16;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->endtime(), output);
  }

  // required string ActInstrs = 17;
  if (has_actinstrs()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->actinstrs(), output);
  }

  // optional int64 CreatedTS = 18;
  if (has_createdts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->createdts(), output);
  }

  // optional int64 LastUpdtdTS = 19;
  if (has_lastupdtdts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->lastupdtdts(), output);
  }

  // optional int64 AcceptedTS = 20;
  if (has_acceptedts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->acceptedts(), output);
  }

  // optional int64 CompletedTS = 21;
  if (has_completedts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->completedts(), output);
  }

  // required int32 status = 22;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->status(), output);
  }

  // required int32 serviceGroup = 23;
  if (has_servicegroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->servicegroup(), output);
  }

  // required int64 resourceID = 24;
  if (has_resourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->resourceid(), output);
  }

  // optional float Lat = 25;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->lat(), output);
  }

  // optional float Lon = 26;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->lon(), output);
  }

  // optional int32 editFlag = 27;
  if (has_editflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->editflag(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PWorkOrderItem)
}

int PWorkOrderItem::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required int64 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  if (has_name()) {
    // required string Name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_caller()) {
    // required string Caller = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->caller());
  }

  if (has_reference()) {
    // required string Reference = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference());
  }

  if (has_locationname()) {
    // required string LocationName = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->locationname());
  }

  if (has_instructions()) {
    // required string Instructions = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instructions());
  }

  if (has_starttime()) {
    // required int64 StartTime = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->starttime());
  }

  if (has_endtime()) {
    // required int64 EndTime = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->endtime());
  }

  if (has_actinstrs()) {
    // required string ActInstrs = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->actinstrs());
  }

  if (has_status()) {
    // required int32 status = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  if (has_servicegroup()) {
    // required int32 serviceGroup = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->servicegroup());
  }

  if (has_resourceid()) {
    // required int64 resourceID = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->resourceid());
  }

  return total_size;
}
int PWorkOrderItem::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00387837) ^ 0x00387837) == 0) {  // All required fields are present.
    // required int64 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());

    // required string Name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string Caller = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->caller());

    // required string Reference = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference());

    // required string LocationName = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->locationname());

    // required string Instructions = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instructions());

    // required int64 StartTime = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->starttime());

    // required int64 EndTime = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->endtime());

    // required string ActInstrs = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->actinstrs());

    // required int32 status = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

    // required int32 serviceGroup = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->servicegroup());

    // required int64 resourceID = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->resourceid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 200u) {
    // optional string Phone = 4;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string Street = 7;
    if (has_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->street());
    }

    // optional string City = 9;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

  }
  if (_has_bits_[8 / 32] & 34560u) {
    // optional string Country = 10;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string PostalCode = 11;
    if (has_postalcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postalcode());
    }

    // optional string Province = 13;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional int64 CreatedTS = 18;
    if (has_createdts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createdts());
    }

  }
  if (_has_bits_[16 / 32] & 13041664u) {
    // optional int64 LastUpdtdTS = 19;
    if (has_lastupdtdts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastupdtdts());
    }

    // optional int64 AcceptedTS = 20;
    if (has_acceptedts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->acceptedts());
    }

    // optional int64 CompletedTS = 21;
    if (has_completedts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->completedts());
    }

    // optional float Lat = 25;
    if (has_lat()) {
      total_size += 2 + 4;
    }

    // optional float Lon = 26;
    if (has_lon()) {
      total_size += 2 + 4;
    }

  }
  // optional int32 editFlag = 27;
  if (has_editflag()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->editflag());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PWorkOrderItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PWorkOrderItem*>(&from));
}

void PWorkOrderItem::MergeFrom(const PWorkOrderItem& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_caller()) {
      set_has_caller();
      caller_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caller_);
    }
    if (from.has_phone()) {
      set_has_phone();
      phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
    }
    if (from.has_reference()) {
      set_has_reference();
      reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
    }
    if (from.has_locationname()) {
      set_has_locationname();
      locationname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.locationname_);
    }
    if (from.has_street()) {
      set_has_street();
      street_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.street_);
    }
    if (from.has_city()) {
      set_has_city();
      city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_country()) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (from.has_postalcode()) {
      set_has_postalcode();
      postalcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.postalcode_);
    }
    if (from.has_province()) {
      set_has_province();
      province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.province_);
    }
    if (from.has_instructions()) {
      set_has_instructions();
      instructions_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instructions_);
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_actinstrs()) {
      set_has_actinstrs();
      actinstrs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.actinstrs_);
    }
    if (from.has_createdts()) {
      set_createdts(from.createdts());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lastupdtdts()) {
      set_lastupdtdts(from.lastupdtdts());
    }
    if (from.has_acceptedts()) {
      set_acceptedts(from.acceptedts());
    }
    if (from.has_completedts()) {
      set_completedts(from.completedts());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_servicegroup()) {
      set_servicegroup(from.servicegroup());
    }
    if (from.has_resourceid()) {
      set_resourceid(from.resourceid());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_editflag()) {
      set_editflag(from.editflag());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PWorkOrderItem::CopyFrom(const PWorkOrderItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PWorkOrderItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00387837) != 0x00387837) return false;

  return true;
}

void PWorkOrderItem::Swap(PWorkOrderItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PWorkOrderItem::InternalSwap(PWorkOrderItem* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  caller_.Swap(&other->caller_);
  phone_.Swap(&other->phone_);
  reference_.Swap(&other->reference_);
  locationname_.Swap(&other->locationname_);
  street_.Swap(&other->street_);
  city_.Swap(&other->city_);
  country_.Swap(&other->country_);
  postalcode_.Swap(&other->postalcode_);
  province_.Swap(&other->province_);
  instructions_.Swap(&other->instructions_);
  std::swap(starttime_, other->starttime_);
  std::swap(endtime_, other->endtime_);
  actinstrs_.Swap(&other->actinstrs_);
  std::swap(createdts_, other->createdts_);
  std::swap(lastupdtdts_, other->lastupdtdts_);
  std::swap(acceptedts_, other->acceptedts_);
  std::swap(completedts_, other->completedts_);
  std::swap(status_, other->status_);
  std::swap(servicegroup_, other->servicegroup_);
  std::swap(resourceid_, other->resourceid_);
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  std::swap(editflag_, other->editflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PWorkOrderItem::GetTypeName() const {
  return "my_comm_proto.PWorkOrderItem";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PWorkOrderItem

// required int64 ID = 1;
bool PWorkOrderItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PWorkOrderItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PWorkOrderItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PWorkOrderItem::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::int64 PWorkOrderItem::id() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.ID)
  return id_;
}
 void PWorkOrderItem::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.ID)
}

// required string Name = 2;
bool PWorkOrderItem::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PWorkOrderItem::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void PWorkOrderItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void PWorkOrderItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& PWorkOrderItem::name() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.Name)
}
 void PWorkOrderItem::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PWorkOrderItem.Name)
}
 void PWorkOrderItem::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PWorkOrderItem.Name)
}
 ::std::string* PWorkOrderItem::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PWorkOrderItem.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PWorkOrderItem::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PWorkOrderItem.Name)
}

// required string Caller = 3;
bool PWorkOrderItem::has_caller() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PWorkOrderItem::set_has_caller() {
  _has_bits_[0] |= 0x00000004u;
}
void PWorkOrderItem::clear_has_caller() {
  _has_bits_[0] &= ~0x00000004u;
}
void PWorkOrderItem::clear_caller() {
  caller_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_caller();
}
 const ::std::string& PWorkOrderItem::caller() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.Caller)
  return caller_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_caller(const ::std::string& value) {
  set_has_caller();
  caller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.Caller)
}
 void PWorkOrderItem::set_caller(const char* value) {
  set_has_caller();
  caller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PWorkOrderItem.Caller)
}
 void PWorkOrderItem::set_caller(const char* value, size_t size) {
  set_has_caller();
  caller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PWorkOrderItem.Caller)
}
 ::std::string* PWorkOrderItem::mutable_caller() {
  set_has_caller();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PWorkOrderItem.Caller)
  return caller_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PWorkOrderItem::release_caller() {
  clear_has_caller();
  return caller_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_allocated_caller(::std::string* caller) {
  if (caller != NULL) {
    set_has_caller();
  } else {
    clear_has_caller();
  }
  caller_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caller);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PWorkOrderItem.Caller)
}

// optional string Phone = 4;
bool PWorkOrderItem::has_phone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PWorkOrderItem::set_has_phone() {
  _has_bits_[0] |= 0x00000008u;
}
void PWorkOrderItem::clear_has_phone() {
  _has_bits_[0] &= ~0x00000008u;
}
void PWorkOrderItem::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phone();
}
 const ::std::string& PWorkOrderItem::phone() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.Phone)
  return phone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_phone(const ::std::string& value) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.Phone)
}
 void PWorkOrderItem::set_phone(const char* value) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PWorkOrderItem.Phone)
}
 void PWorkOrderItem::set_phone(const char* value, size_t size) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PWorkOrderItem.Phone)
}
 ::std::string* PWorkOrderItem::mutable_phone() {
  set_has_phone();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PWorkOrderItem.Phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PWorkOrderItem::release_phone() {
  clear_has_phone();
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    set_has_phone();
  } else {
    clear_has_phone();
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PWorkOrderItem.Phone)
}

// required string Reference = 5;
bool PWorkOrderItem::has_reference() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PWorkOrderItem::set_has_reference() {
  _has_bits_[0] |= 0x00000010u;
}
void PWorkOrderItem::clear_has_reference() {
  _has_bits_[0] &= ~0x00000010u;
}
void PWorkOrderItem::clear_reference() {
  reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reference();
}
 const ::std::string& PWorkOrderItem::reference() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.Reference)
  return reference_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_reference(const ::std::string& value) {
  set_has_reference();
  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.Reference)
}
 void PWorkOrderItem::set_reference(const char* value) {
  set_has_reference();
  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PWorkOrderItem.Reference)
}
 void PWorkOrderItem::set_reference(const char* value, size_t size) {
  set_has_reference();
  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PWorkOrderItem.Reference)
}
 ::std::string* PWorkOrderItem::mutable_reference() {
  set_has_reference();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PWorkOrderItem.Reference)
  return reference_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PWorkOrderItem::release_reference() {
  clear_has_reference();
  return reference_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_allocated_reference(::std::string* reference) {
  if (reference != NULL) {
    set_has_reference();
  } else {
    clear_has_reference();
  }
  reference_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PWorkOrderItem.Reference)
}

// required string LocationName = 6;
bool PWorkOrderItem::has_locationname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PWorkOrderItem::set_has_locationname() {
  _has_bits_[0] |= 0x00000020u;
}
void PWorkOrderItem::clear_has_locationname() {
  _has_bits_[0] &= ~0x00000020u;
}
void PWorkOrderItem::clear_locationname() {
  locationname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_locationname();
}
 const ::std::string& PWorkOrderItem::locationname() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.LocationName)
  return locationname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_locationname(const ::std::string& value) {
  set_has_locationname();
  locationname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.LocationName)
}
 void PWorkOrderItem::set_locationname(const char* value) {
  set_has_locationname();
  locationname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PWorkOrderItem.LocationName)
}
 void PWorkOrderItem::set_locationname(const char* value, size_t size) {
  set_has_locationname();
  locationname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PWorkOrderItem.LocationName)
}
 ::std::string* PWorkOrderItem::mutable_locationname() {
  set_has_locationname();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PWorkOrderItem.LocationName)
  return locationname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PWorkOrderItem::release_locationname() {
  clear_has_locationname();
  return locationname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_allocated_locationname(::std::string* locationname) {
  if (locationname != NULL) {
    set_has_locationname();
  } else {
    clear_has_locationname();
  }
  locationname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locationname);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PWorkOrderItem.LocationName)
}

// optional string Street = 7;
bool PWorkOrderItem::has_street() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PWorkOrderItem::set_has_street() {
  _has_bits_[0] |= 0x00000040u;
}
void PWorkOrderItem::clear_has_street() {
  _has_bits_[0] &= ~0x00000040u;
}
void PWorkOrderItem::clear_street() {
  street_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_street();
}
 const ::std::string& PWorkOrderItem::street() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.Street)
  return street_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_street(const ::std::string& value) {
  set_has_street();
  street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.Street)
}
 void PWorkOrderItem::set_street(const char* value) {
  set_has_street();
  street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PWorkOrderItem.Street)
}
 void PWorkOrderItem::set_street(const char* value, size_t size) {
  set_has_street();
  street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PWorkOrderItem.Street)
}
 ::std::string* PWorkOrderItem::mutable_street() {
  set_has_street();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PWorkOrderItem.Street)
  return street_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PWorkOrderItem::release_street() {
  clear_has_street();
  return street_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_allocated_street(::std::string* street) {
  if (street != NULL) {
    set_has_street();
  } else {
    clear_has_street();
  }
  street_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), street);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PWorkOrderItem.Street)
}

// optional string City = 9;
bool PWorkOrderItem::has_city() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PWorkOrderItem::set_has_city() {
  _has_bits_[0] |= 0x00000080u;
}
void PWorkOrderItem::clear_has_city() {
  _has_bits_[0] &= ~0x00000080u;
}
void PWorkOrderItem::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
 const ::std::string& PWorkOrderItem::city() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.City)
  return city_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.City)
}
 void PWorkOrderItem::set_city(const char* value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PWorkOrderItem.City)
}
 void PWorkOrderItem::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PWorkOrderItem.City)
}
 ::std::string* PWorkOrderItem::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PWorkOrderItem.City)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PWorkOrderItem::release_city() {
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PWorkOrderItem.City)
}

// optional string Country = 10;
bool PWorkOrderItem::has_country() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PWorkOrderItem::set_has_country() {
  _has_bits_[0] |= 0x00000100u;
}
void PWorkOrderItem::clear_has_country() {
  _has_bits_[0] &= ~0x00000100u;
}
void PWorkOrderItem::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
 const ::std::string& PWorkOrderItem::country() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.Country)
  return country_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.Country)
}
 void PWorkOrderItem::set_country(const char* value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PWorkOrderItem.Country)
}
 void PWorkOrderItem::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PWorkOrderItem.Country)
}
 ::std::string* PWorkOrderItem::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PWorkOrderItem.Country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PWorkOrderItem::release_country() {
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PWorkOrderItem.Country)
}

// optional string PostalCode = 11;
bool PWorkOrderItem::has_postalcode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PWorkOrderItem::set_has_postalcode() {
  _has_bits_[0] |= 0x00000200u;
}
void PWorkOrderItem::clear_has_postalcode() {
  _has_bits_[0] &= ~0x00000200u;
}
void PWorkOrderItem::clear_postalcode() {
  postalcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_postalcode();
}
 const ::std::string& PWorkOrderItem::postalcode() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.PostalCode)
  return postalcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_postalcode(const ::std::string& value) {
  set_has_postalcode();
  postalcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.PostalCode)
}
 void PWorkOrderItem::set_postalcode(const char* value) {
  set_has_postalcode();
  postalcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PWorkOrderItem.PostalCode)
}
 void PWorkOrderItem::set_postalcode(const char* value, size_t size) {
  set_has_postalcode();
  postalcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PWorkOrderItem.PostalCode)
}
 ::std::string* PWorkOrderItem::mutable_postalcode() {
  set_has_postalcode();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PWorkOrderItem.PostalCode)
  return postalcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PWorkOrderItem::release_postalcode() {
  clear_has_postalcode();
  return postalcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_allocated_postalcode(::std::string* postalcode) {
  if (postalcode != NULL) {
    set_has_postalcode();
  } else {
    clear_has_postalcode();
  }
  postalcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), postalcode);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PWorkOrderItem.PostalCode)
}

// optional string Province = 13;
bool PWorkOrderItem::has_province() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PWorkOrderItem::set_has_province() {
  _has_bits_[0] |= 0x00000400u;
}
void PWorkOrderItem::clear_has_province() {
  _has_bits_[0] &= ~0x00000400u;
}
void PWorkOrderItem::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
 const ::std::string& PWorkOrderItem::province() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.Province)
  return province_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.Province)
}
 void PWorkOrderItem::set_province(const char* value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PWorkOrderItem.Province)
}
 void PWorkOrderItem::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PWorkOrderItem.Province)
}
 ::std::string* PWorkOrderItem::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PWorkOrderItem.Province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PWorkOrderItem::release_province() {
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PWorkOrderItem.Province)
}

// required string Instructions = 14;
bool PWorkOrderItem::has_instructions() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PWorkOrderItem::set_has_instructions() {
  _has_bits_[0] |= 0x00000800u;
}
void PWorkOrderItem::clear_has_instructions() {
  _has_bits_[0] &= ~0x00000800u;
}
void PWorkOrderItem::clear_instructions() {
  instructions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instructions();
}
 const ::std::string& PWorkOrderItem::instructions() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.Instructions)
  return instructions_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_instructions(const ::std::string& value) {
  set_has_instructions();
  instructions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.Instructions)
}
 void PWorkOrderItem::set_instructions(const char* value) {
  set_has_instructions();
  instructions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PWorkOrderItem.Instructions)
}
 void PWorkOrderItem::set_instructions(const char* value, size_t size) {
  set_has_instructions();
  instructions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PWorkOrderItem.Instructions)
}
 ::std::string* PWorkOrderItem::mutable_instructions() {
  set_has_instructions();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PWorkOrderItem.Instructions)
  return instructions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PWorkOrderItem::release_instructions() {
  clear_has_instructions();
  return instructions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_allocated_instructions(::std::string* instructions) {
  if (instructions != NULL) {
    set_has_instructions();
  } else {
    clear_has_instructions();
  }
  instructions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instructions);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PWorkOrderItem.Instructions)
}

// required int64 StartTime = 15;
bool PWorkOrderItem::has_starttime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PWorkOrderItem::set_has_starttime() {
  _has_bits_[0] |= 0x00001000u;
}
void PWorkOrderItem::clear_has_starttime() {
  _has_bits_[0] &= ~0x00001000u;
}
void PWorkOrderItem::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
 ::google::protobuf::int64 PWorkOrderItem::starttime() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.StartTime)
  return starttime_;
}
 void PWorkOrderItem::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.StartTime)
}

// required int64 EndTime = 16;
bool PWorkOrderItem::has_endtime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PWorkOrderItem::set_has_endtime() {
  _has_bits_[0] |= 0x00002000u;
}
void PWorkOrderItem::clear_has_endtime() {
  _has_bits_[0] &= ~0x00002000u;
}
void PWorkOrderItem::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
 ::google::protobuf::int64 PWorkOrderItem::endtime() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.EndTime)
  return endtime_;
}
 void PWorkOrderItem::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.EndTime)
}

// required string ActInstrs = 17;
bool PWorkOrderItem::has_actinstrs() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PWorkOrderItem::set_has_actinstrs() {
  _has_bits_[0] |= 0x00004000u;
}
void PWorkOrderItem::clear_has_actinstrs() {
  _has_bits_[0] &= ~0x00004000u;
}
void PWorkOrderItem::clear_actinstrs() {
  actinstrs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_actinstrs();
}
 const ::std::string& PWorkOrderItem::actinstrs() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.ActInstrs)
  return actinstrs_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_actinstrs(const ::std::string& value) {
  set_has_actinstrs();
  actinstrs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.ActInstrs)
}
 void PWorkOrderItem::set_actinstrs(const char* value) {
  set_has_actinstrs();
  actinstrs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PWorkOrderItem.ActInstrs)
}
 void PWorkOrderItem::set_actinstrs(const char* value, size_t size) {
  set_has_actinstrs();
  actinstrs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PWorkOrderItem.ActInstrs)
}
 ::std::string* PWorkOrderItem::mutable_actinstrs() {
  set_has_actinstrs();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PWorkOrderItem.ActInstrs)
  return actinstrs_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PWorkOrderItem::release_actinstrs() {
  clear_has_actinstrs();
  return actinstrs_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PWorkOrderItem::set_allocated_actinstrs(::std::string* actinstrs) {
  if (actinstrs != NULL) {
    set_has_actinstrs();
  } else {
    clear_has_actinstrs();
  }
  actinstrs_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actinstrs);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PWorkOrderItem.ActInstrs)
}

// optional int64 CreatedTS = 18;
bool PWorkOrderItem::has_createdts() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PWorkOrderItem::set_has_createdts() {
  _has_bits_[0] |= 0x00008000u;
}
void PWorkOrderItem::clear_has_createdts() {
  _has_bits_[0] &= ~0x00008000u;
}
void PWorkOrderItem::clear_createdts() {
  createdts_ = GOOGLE_LONGLONG(0);
  clear_has_createdts();
}
 ::google::protobuf::int64 PWorkOrderItem::createdts() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.CreatedTS)
  return createdts_;
}
 void PWorkOrderItem::set_createdts(::google::protobuf::int64 value) {
  set_has_createdts();
  createdts_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.CreatedTS)
}

// optional int64 LastUpdtdTS = 19;
bool PWorkOrderItem::has_lastupdtdts() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void PWorkOrderItem::set_has_lastupdtdts() {
  _has_bits_[0] |= 0x00010000u;
}
void PWorkOrderItem::clear_has_lastupdtdts() {
  _has_bits_[0] &= ~0x00010000u;
}
void PWorkOrderItem::clear_lastupdtdts() {
  lastupdtdts_ = GOOGLE_LONGLONG(0);
  clear_has_lastupdtdts();
}
 ::google::protobuf::int64 PWorkOrderItem::lastupdtdts() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.LastUpdtdTS)
  return lastupdtdts_;
}
 void PWorkOrderItem::set_lastupdtdts(::google::protobuf::int64 value) {
  set_has_lastupdtdts();
  lastupdtdts_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.LastUpdtdTS)
}

// optional int64 AcceptedTS = 20;
bool PWorkOrderItem::has_acceptedts() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void PWorkOrderItem::set_has_acceptedts() {
  _has_bits_[0] |= 0x00020000u;
}
void PWorkOrderItem::clear_has_acceptedts() {
  _has_bits_[0] &= ~0x00020000u;
}
void PWorkOrderItem::clear_acceptedts() {
  acceptedts_ = GOOGLE_LONGLONG(0);
  clear_has_acceptedts();
}
 ::google::protobuf::int64 PWorkOrderItem::acceptedts() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.AcceptedTS)
  return acceptedts_;
}
 void PWorkOrderItem::set_acceptedts(::google::protobuf::int64 value) {
  set_has_acceptedts();
  acceptedts_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.AcceptedTS)
}

// optional int64 CompletedTS = 21;
bool PWorkOrderItem::has_completedts() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void PWorkOrderItem::set_has_completedts() {
  _has_bits_[0] |= 0x00040000u;
}
void PWorkOrderItem::clear_has_completedts() {
  _has_bits_[0] &= ~0x00040000u;
}
void PWorkOrderItem::clear_completedts() {
  completedts_ = GOOGLE_LONGLONG(0);
  clear_has_completedts();
}
 ::google::protobuf::int64 PWorkOrderItem::completedts() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.CompletedTS)
  return completedts_;
}
 void PWorkOrderItem::set_completedts(::google::protobuf::int64 value) {
  set_has_completedts();
  completedts_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.CompletedTS)
}

// required int32 status = 22;
bool PWorkOrderItem::has_status() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void PWorkOrderItem::set_has_status() {
  _has_bits_[0] |= 0x00080000u;
}
void PWorkOrderItem::clear_has_status() {
  _has_bits_[0] &= ~0x00080000u;
}
void PWorkOrderItem::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::google::protobuf::int32 PWorkOrderItem::status() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.status)
  return status_;
}
 void PWorkOrderItem::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.status)
}

// required int32 serviceGroup = 23;
bool PWorkOrderItem::has_servicegroup() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void PWorkOrderItem::set_has_servicegroup() {
  _has_bits_[0] |= 0x00100000u;
}
void PWorkOrderItem::clear_has_servicegroup() {
  _has_bits_[0] &= ~0x00100000u;
}
void PWorkOrderItem::clear_servicegroup() {
  servicegroup_ = 0;
  clear_has_servicegroup();
}
 ::google::protobuf::int32 PWorkOrderItem::servicegroup() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.serviceGroup)
  return servicegroup_;
}
 void PWorkOrderItem::set_servicegroup(::google::protobuf::int32 value) {
  set_has_servicegroup();
  servicegroup_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.serviceGroup)
}

// required int64 resourceID = 24;
bool PWorkOrderItem::has_resourceid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void PWorkOrderItem::set_has_resourceid() {
  _has_bits_[0] |= 0x00200000u;
}
void PWorkOrderItem::clear_has_resourceid() {
  _has_bits_[0] &= ~0x00200000u;
}
void PWorkOrderItem::clear_resourceid() {
  resourceid_ = GOOGLE_LONGLONG(0);
  clear_has_resourceid();
}
 ::google::protobuf::int64 PWorkOrderItem::resourceid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.resourceID)
  return resourceid_;
}
 void PWorkOrderItem::set_resourceid(::google::protobuf::int64 value) {
  set_has_resourceid();
  resourceid_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.resourceID)
}

// optional float Lat = 25;
bool PWorkOrderItem::has_lat() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void PWorkOrderItem::set_has_lat() {
  _has_bits_[0] |= 0x00400000u;
}
void PWorkOrderItem::clear_has_lat() {
  _has_bits_[0] &= ~0x00400000u;
}
void PWorkOrderItem::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
 float PWorkOrderItem::lat() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.Lat)
  return lat_;
}
 void PWorkOrderItem::set_lat(float value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.Lat)
}

// optional float Lon = 26;
bool PWorkOrderItem::has_lon() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void PWorkOrderItem::set_has_lon() {
  _has_bits_[0] |= 0x00800000u;
}
void PWorkOrderItem::clear_has_lon() {
  _has_bits_[0] &= ~0x00800000u;
}
void PWorkOrderItem::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
 float PWorkOrderItem::lon() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.Lon)
  return lon_;
}
 void PWorkOrderItem::set_lon(float value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.Lon)
}

// optional int32 editFlag = 27;
bool PWorkOrderItem::has_editflag() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void PWorkOrderItem::set_has_editflag() {
  _has_bits_[0] |= 0x01000000u;
}
void PWorkOrderItem::clear_has_editflag() {
  _has_bits_[0] &= ~0x01000000u;
}
void PWorkOrderItem::clear_editflag() {
  editflag_ = 0;
  clear_has_editflag();
}
 ::google::protobuf::int32 PWorkOrderItem::editflag() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderItem.editFlag)
  return editflag_;
}
 void PWorkOrderItem::set_editflag(::google::protobuf::int32 value) {
  set_has_editflag();
  editflag_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PWorkOrderItem.editFlag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PWorkOrderList::kWoItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PWorkOrderList::PWorkOrderList()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PWorkOrderList)
}

void PWorkOrderList::InitAsDefaultInstance() {
}

PWorkOrderList::PWorkOrderList(const PWorkOrderList& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PWorkOrderList)
}

void PWorkOrderList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PWorkOrderList::~PWorkOrderList() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PWorkOrderList)
  SharedDtor();
}

void PWorkOrderList::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PWorkOrderList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PWorkOrderList& PWorkOrderList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PWorkOrderList* PWorkOrderList::default_instance_ = NULL;

PWorkOrderList* PWorkOrderList::New(::google::protobuf::Arena* arena) const {
  PWorkOrderList* n = new PWorkOrderList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PWorkOrderList::Clear() {
  wo_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PWorkOrderList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PWorkOrderList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .my_comm_proto.PWorkOrderItem wo_items = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_wo_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_wo_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_wo_items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PWorkOrderList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PWorkOrderList)
  return false;
#undef DO_
}

void PWorkOrderList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PWorkOrderList)
  // repeated .my_comm_proto.PWorkOrderItem wo_items = 1;
  for (unsigned int i = 0, n = this->wo_items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->wo_items(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PWorkOrderList)
}

int PWorkOrderList::ByteSize() const {
  int total_size = 0;

  // repeated .my_comm_proto.PWorkOrderItem wo_items = 1;
  total_size += 1 * this->wo_items_size();
  for (int i = 0; i < this->wo_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wo_items(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PWorkOrderList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PWorkOrderList*>(&from));
}

void PWorkOrderList::MergeFrom(const PWorkOrderList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  wo_items_.MergeFrom(from.wo_items_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PWorkOrderList::CopyFrom(const PWorkOrderList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PWorkOrderList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->wo_items())) return false;
  return true;
}

void PWorkOrderList::Swap(PWorkOrderList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PWorkOrderList::InternalSwap(PWorkOrderList* other) {
  wo_items_.UnsafeArenaSwap(&other->wo_items_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PWorkOrderList::GetTypeName() const {
  return "my_comm_proto.PWorkOrderList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PWorkOrderList

// repeated .my_comm_proto.PWorkOrderItem wo_items = 1;
int PWorkOrderList::wo_items_size() const {
  return wo_items_.size();
}
void PWorkOrderList::clear_wo_items() {
  wo_items_.Clear();
}
const ::my_comm_proto::PWorkOrderItem& PWorkOrderList::wo_items(int index) const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWorkOrderList.wo_items)
  return wo_items_.Get(index);
}
::my_comm_proto::PWorkOrderItem* PWorkOrderList::mutable_wo_items(int index) {
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PWorkOrderList.wo_items)
  return wo_items_.Mutable(index);
}
::my_comm_proto::PWorkOrderItem* PWorkOrderList::add_wo_items() {
  // @@protoc_insertion_point(field_add:my_comm_proto.PWorkOrderList.wo_items)
  return wo_items_.Add();
}
::google::protobuf::RepeatedPtrField< ::my_comm_proto::PWorkOrderItem >*
PWorkOrderList::mutable_wo_items() {
  // @@protoc_insertion_point(field_mutable_list:my_comm_proto.PWorkOrderList.wo_items)
  return &wo_items_;
}
const ::google::protobuf::RepeatedPtrField< ::my_comm_proto::PWorkOrderItem >&
PWorkOrderList::wo_items() const {
  // @@protoc_insertion_point(field_list:my_comm_proto.PWorkOrderList.wo_items)
  return wo_items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PWOIStatusList::kWostsItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PWOIStatusList::PWOIStatusList()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PWOIStatusList)
}

void PWOIStatusList::InitAsDefaultInstance() {
}

PWOIStatusList::PWOIStatusList(const PWOIStatusList& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PWOIStatusList)
}

void PWOIStatusList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PWOIStatusList::~PWOIStatusList() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PWOIStatusList)
  SharedDtor();
}

void PWOIStatusList::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PWOIStatusList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PWOIStatusList& PWOIStatusList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PWOIStatusList* PWOIStatusList::default_instance_ = NULL;

PWOIStatusList* PWOIStatusList::New(::google::protobuf::Arena* arena) const {
  PWOIStatusList* n = new PWOIStatusList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PWOIStatusList::Clear() {
  wosts_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PWOIStatusList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PWOIStatusList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .my_comm_proto.PWOIStatus wosts_items = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_wosts_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_wosts_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_wosts_items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PWOIStatusList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PWOIStatusList)
  return false;
#undef DO_
}

void PWOIStatusList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PWOIStatusList)
  // repeated .my_comm_proto.PWOIStatus wosts_items = 1;
  for (unsigned int i = 0, n = this->wosts_items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->wosts_items(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PWOIStatusList)
}

int PWOIStatusList::ByteSize() const {
  int total_size = 0;

  // repeated .my_comm_proto.PWOIStatus wosts_items = 1;
  total_size += 1 * this->wosts_items_size();
  for (int i = 0; i < this->wosts_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wosts_items(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PWOIStatusList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PWOIStatusList*>(&from));
}

void PWOIStatusList::MergeFrom(const PWOIStatusList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  wosts_items_.MergeFrom(from.wosts_items_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PWOIStatusList::CopyFrom(const PWOIStatusList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PWOIStatusList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->wosts_items())) return false;
  return true;
}

void PWOIStatusList::Swap(PWOIStatusList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PWOIStatusList::InternalSwap(PWOIStatusList* other) {
  wosts_items_.UnsafeArenaSwap(&other->wosts_items_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PWOIStatusList::GetTypeName() const {
  return "my_comm_proto.PWOIStatusList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PWOIStatusList

// repeated .my_comm_proto.PWOIStatus wosts_items = 1;
int PWOIStatusList::wosts_items_size() const {
  return wosts_items_.size();
}
void PWOIStatusList::clear_wosts_items() {
  wosts_items_.Clear();
}
const ::my_comm_proto::PWOIStatus& PWOIStatusList::wosts_items(int index) const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PWOIStatusList.wosts_items)
  return wosts_items_.Get(index);
}
::my_comm_proto::PWOIStatus* PWOIStatusList::mutable_wosts_items(int index) {
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PWOIStatusList.wosts_items)
  return wosts_items_.Mutable(index);
}
::my_comm_proto::PWOIStatus* PWOIStatusList::add_wosts_items() {
  // @@protoc_insertion_point(field_add:my_comm_proto.PWOIStatusList.wosts_items)
  return wosts_items_.Add();
}
::google::protobuf::RepeatedPtrField< ::my_comm_proto::PWOIStatus >*
PWOIStatusList::mutable_wosts_items() {
  // @@protoc_insertion_point(field_mutable_list:my_comm_proto.PWOIStatusList.wosts_items)
  return &wosts_items_;
}
const ::google::protobuf::RepeatedPtrField< ::my_comm_proto::PWOIStatus >&
PWOIStatusList::wosts_items() const {
  // @@protoc_insertion_point(field_list:my_comm_proto.PWOIStatusList.wosts_items)
  return wosts_items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBoxIdVehicleRow::kIDFieldNumber;
const int PBoxIdVehicleRow::kMTSFieldNumber;
const int PBoxIdVehicleRow::kDescFieldNumber;
const int PBoxIdVehicleRow::kWeightFieldNumber;
const int PBoxIdVehicleRow::kFlagFieldNumber;
const int PBoxIdVehicleRow::kVLFieldNumber;
const int PBoxIdVehicleRow::kVLPFieldNumber;
const int PBoxIdVehicleRow::kCidFieldNumber;
const int PBoxIdVehicleRow::kImgFieldNumber;
const int PBoxIdVehicleRow::kMakerFieldNumber;
const int PBoxIdVehicleRow::kModelFieldNumber;
const int PBoxIdVehicleRow::kColorFieldNumber;
const int PBoxIdVehicleRow::kYearFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBoxIdVehicleRow::PBoxIdVehicleRow()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PBoxIdVehicleRow)
}

void PBoxIdVehicleRow::InitAsDefaultInstance() {
}

PBoxIdVehicleRow::PBoxIdVehicleRow(const PBoxIdVehicleRow& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PBoxIdVehicleRow)
}

void PBoxIdVehicleRow::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
  mts_ = GOOGLE_LONGLONG(0);
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_ = 0;
  flag_ = 0;
  vl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vlp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_ = 0;
  img_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  year_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBoxIdVehicleRow::~PBoxIdVehicleRow() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PBoxIdVehicleRow)
  SharedDtor();
}

void PBoxIdVehicleRow::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vlp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maker_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PBoxIdVehicleRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PBoxIdVehicleRow& PBoxIdVehicleRow::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PBoxIdVehicleRow* PBoxIdVehicleRow::default_instance_ = NULL;

PBoxIdVehicleRow* PBoxIdVehicleRow::New(::google::protobuf::Arena* arena) const {
  PBoxIdVehicleRow* n = new PBoxIdVehicleRow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBoxIdVehicleRow::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBoxIdVehicleRow*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(id_, mts_);
    ZR_(weight_, flag_);
    if (has_desc()) {
      desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_vl()) {
      vl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_vlp()) {
      vlp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    cid_ = 0;
  }
  if (_has_bits_[8 / 32] & 7936u) {
    if (has_img()) {
      img_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_maker()) {
      maker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_model()) {
      model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_color()) {
      color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    year_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PBoxIdVehicleRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PBoxIdVehicleRow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mTS;
        break;
      }

      // required int64 mTS = 2;
      case 2: {
        if (tag == 16) {
         parse_mTS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mts_)));
          set_has_mts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }

      // required string desc = 3;
      case 3: {
        if (tag == 26) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_weight;
        break;
      }

      // required int32 weight = 4;
      case 4: {
        if (tag == 32) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_flag;
        break;
      }

      // required int32 flag = 5;
      case 5: {
        if (tag == 40) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_VL;
        break;
      }

      // required string VL = 6;
      case 6: {
        if (tag == 50) {
         parse_VL:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_VLP;
        break;
      }

      // required string VLP = 7;
      case 7: {
        if (tag == 58) {
         parse_VLP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vlp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_cid;
        break;
      }

      // required int32 cid = 8;
      case 8: {
        if (tag == 64) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Img;
        break;
      }

      // required string Img = 9;
      case 9: {
        if (tag == 74) {
         parse_Img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_maker;
        break;
      }

      // optional string maker = 10;
      case 10: {
        if (tag == 82) {
         parse_maker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_model;
        break;
      }

      // optional string model = 11;
      case 11: {
        if (tag == 90) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_color;
        break;
      }

      // optional string color = 12;
      case 12: {
        if (tag == 98) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_year;
        break;
      }

      // optional int32 year = 13;
      case 13: {
        if (tag == 104) {
         parse_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PBoxIdVehicleRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PBoxIdVehicleRow)
  return false;
#undef DO_
}

void PBoxIdVehicleRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PBoxIdVehicleRow)
  // required int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int64 mTS = 2;
  if (has_mts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->mts(), output);
  }

  // required string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->desc(), output);
  }

  // required int32 weight = 4;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->weight(), output);
  }

  // required int32 flag = 5;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->flag(), output);
  }

  // required string VL = 6;
  if (has_vl()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->vl(), output);
  }

  // required string VLP = 7;
  if (has_vlp()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->vlp(), output);
  }

  // required int32 cid = 8;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cid(), output);
  }

  // required string Img = 9;
  if (has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->img(), output);
  }

  // optional string maker = 10;
  if (has_maker()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->maker(), output);
  }

  // optional string model = 11;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->model(), output);
  }

  // optional string color = 12;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->color(), output);
  }

  // optional int32 year = 13;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->year(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PBoxIdVehicleRow)
}

int PBoxIdVehicleRow::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required int64 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  if (has_mts()) {
    // required int64 mTS = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mts());
  }

  if (has_desc()) {
    // required string desc = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  if (has_weight()) {
    // required int32 weight = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->weight());
  }

  if (has_flag()) {
    // required int32 flag = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  if (has_vl()) {
    // required string VL = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vl());
  }

  if (has_vlp()) {
    // required string VLP = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vlp());
  }

  if (has_cid()) {
    // required int32 cid = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cid());
  }

  if (has_img()) {
    // required string Img = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->img());
  }

  return total_size;
}
int PBoxIdVehicleRow::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required int64 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());

    // required int64 mTS = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mts());

    // required string desc = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());

    // required int32 weight = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->weight());

    // required int32 flag = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());

    // required string VL = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vl());

    // required string VLP = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vlp());

    // required int32 cid = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cid());

    // required string Img = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->img());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[9 / 32] & 7680u) {
    // optional string maker = 10;
    if (has_maker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maker());
    }

    // optional string model = 11;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string color = 12;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }

    // optional int32 year = 13;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBoxIdVehicleRow::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PBoxIdVehicleRow*>(&from));
}

void PBoxIdVehicleRow::MergeFrom(const PBoxIdVehicleRow& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mts()) {
      set_mts(from.mts());
    }
    if (from.has_desc()) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_vl()) {
      set_has_vl();
      vl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vl_);
    }
    if (from.has_vlp()) {
      set_has_vlp();
      vlp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vlp_);
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_img()) {
      set_has_img();
      img_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_);
    }
    if (from.has_maker()) {
      set_has_maker();
      maker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.maker_);
    }
    if (from.has_model()) {
      set_has_model();
      model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (from.has_color()) {
      set_has_color();
      color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
    }
    if (from.has_year()) {
      set_year(from.year());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PBoxIdVehicleRow::CopyFrom(const PBoxIdVehicleRow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBoxIdVehicleRow::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void PBoxIdVehicleRow::Swap(PBoxIdVehicleRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBoxIdVehicleRow::InternalSwap(PBoxIdVehicleRow* other) {
  std::swap(id_, other->id_);
  std::swap(mts_, other->mts_);
  desc_.Swap(&other->desc_);
  std::swap(weight_, other->weight_);
  std::swap(flag_, other->flag_);
  vl_.Swap(&other->vl_);
  vlp_.Swap(&other->vlp_);
  std::swap(cid_, other->cid_);
  img_.Swap(&other->img_);
  maker_.Swap(&other->maker_);
  model_.Swap(&other->model_);
  color_.Swap(&other->color_);
  std::swap(year_, other->year_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PBoxIdVehicleRow::GetTypeName() const {
  return "my_comm_proto.PBoxIdVehicleRow";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBoxIdVehicleRow

// required int64 ID = 1;
bool PBoxIdVehicleRow::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBoxIdVehicleRow::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PBoxIdVehicleRow::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBoxIdVehicleRow::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::int64 PBoxIdVehicleRow::id() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PBoxIdVehicleRow.ID)
  return id_;
}
 void PBoxIdVehicleRow::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PBoxIdVehicleRow.ID)
}

// required int64 mTS = 2;
bool PBoxIdVehicleRow::has_mts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PBoxIdVehicleRow::set_has_mts() {
  _has_bits_[0] |= 0x00000002u;
}
void PBoxIdVehicleRow::clear_has_mts() {
  _has_bits_[0] &= ~0x00000002u;
}
void PBoxIdVehicleRow::clear_mts() {
  mts_ = GOOGLE_LONGLONG(0);
  clear_has_mts();
}
 ::google::protobuf::int64 PBoxIdVehicleRow::mts() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PBoxIdVehicleRow.mTS)
  return mts_;
}
 void PBoxIdVehicleRow::set_mts(::google::protobuf::int64 value) {
  set_has_mts();
  mts_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PBoxIdVehicleRow.mTS)
}

// required string desc = 3;
bool PBoxIdVehicleRow::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PBoxIdVehicleRow::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
void PBoxIdVehicleRow::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
void PBoxIdVehicleRow::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
 const ::std::string& PBoxIdVehicleRow::desc() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PBoxIdVehicleRow.desc)
  return desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBoxIdVehicleRow::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PBoxIdVehicleRow.desc)
}
 void PBoxIdVehicleRow::set_desc(const char* value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PBoxIdVehicleRow.desc)
}
 void PBoxIdVehicleRow::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PBoxIdVehicleRow.desc)
}
 ::std::string* PBoxIdVehicleRow::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PBoxIdVehicleRow.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBoxIdVehicleRow::release_desc() {
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBoxIdVehicleRow::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PBoxIdVehicleRow.desc)
}

// required int32 weight = 4;
bool PBoxIdVehicleRow::has_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PBoxIdVehicleRow::set_has_weight() {
  _has_bits_[0] |= 0x00000008u;
}
void PBoxIdVehicleRow::clear_has_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
void PBoxIdVehicleRow::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
 ::google::protobuf::int32 PBoxIdVehicleRow::weight() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PBoxIdVehicleRow.weight)
  return weight_;
}
 void PBoxIdVehicleRow::set_weight(::google::protobuf::int32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PBoxIdVehicleRow.weight)
}

// required int32 flag = 5;
bool PBoxIdVehicleRow::has_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PBoxIdVehicleRow::set_has_flag() {
  _has_bits_[0] |= 0x00000010u;
}
void PBoxIdVehicleRow::clear_has_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
void PBoxIdVehicleRow::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
 ::google::protobuf::int32 PBoxIdVehicleRow::flag() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PBoxIdVehicleRow.flag)
  return flag_;
}
 void PBoxIdVehicleRow::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PBoxIdVehicleRow.flag)
}

// required string VL = 6;
bool PBoxIdVehicleRow::has_vl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PBoxIdVehicleRow::set_has_vl() {
  _has_bits_[0] |= 0x00000020u;
}
void PBoxIdVehicleRow::clear_has_vl() {
  _has_bits_[0] &= ~0x00000020u;
}
void PBoxIdVehicleRow::clear_vl() {
  vl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vl();
}
 const ::std::string& PBoxIdVehicleRow::vl() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PBoxIdVehicleRow.VL)
  return vl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBoxIdVehicleRow::set_vl(const ::std::string& value) {
  set_has_vl();
  vl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PBoxIdVehicleRow.VL)
}
 void PBoxIdVehicleRow::set_vl(const char* value) {
  set_has_vl();
  vl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PBoxIdVehicleRow.VL)
}
 void PBoxIdVehicleRow::set_vl(const char* value, size_t size) {
  set_has_vl();
  vl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PBoxIdVehicleRow.VL)
}
 ::std::string* PBoxIdVehicleRow::mutable_vl() {
  set_has_vl();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PBoxIdVehicleRow.VL)
  return vl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBoxIdVehicleRow::release_vl() {
  clear_has_vl();
  return vl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBoxIdVehicleRow::set_allocated_vl(::std::string* vl) {
  if (vl != NULL) {
    set_has_vl();
  } else {
    clear_has_vl();
  }
  vl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vl);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PBoxIdVehicleRow.VL)
}

// required string VLP = 7;
bool PBoxIdVehicleRow::has_vlp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PBoxIdVehicleRow::set_has_vlp() {
  _has_bits_[0] |= 0x00000040u;
}
void PBoxIdVehicleRow::clear_has_vlp() {
  _has_bits_[0] &= ~0x00000040u;
}
void PBoxIdVehicleRow::clear_vlp() {
  vlp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vlp();
}
 const ::std::string& PBoxIdVehicleRow::vlp() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PBoxIdVehicleRow.VLP)
  return vlp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBoxIdVehicleRow::set_vlp(const ::std::string& value) {
  set_has_vlp();
  vlp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PBoxIdVehicleRow.VLP)
}
 void PBoxIdVehicleRow::set_vlp(const char* value) {
  set_has_vlp();
  vlp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PBoxIdVehicleRow.VLP)
}
 void PBoxIdVehicleRow::set_vlp(const char* value, size_t size) {
  set_has_vlp();
  vlp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PBoxIdVehicleRow.VLP)
}
 ::std::string* PBoxIdVehicleRow::mutable_vlp() {
  set_has_vlp();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PBoxIdVehicleRow.VLP)
  return vlp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBoxIdVehicleRow::release_vlp() {
  clear_has_vlp();
  return vlp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBoxIdVehicleRow::set_allocated_vlp(::std::string* vlp) {
  if (vlp != NULL) {
    set_has_vlp();
  } else {
    clear_has_vlp();
  }
  vlp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vlp);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PBoxIdVehicleRow.VLP)
}

// required int32 cid = 8;
bool PBoxIdVehicleRow::has_cid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PBoxIdVehicleRow::set_has_cid() {
  _has_bits_[0] |= 0x00000080u;
}
void PBoxIdVehicleRow::clear_has_cid() {
  _has_bits_[0] &= ~0x00000080u;
}
void PBoxIdVehicleRow::clear_cid() {
  cid_ = 0;
  clear_has_cid();
}
 ::google::protobuf::int32 PBoxIdVehicleRow::cid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PBoxIdVehicleRow.cid)
  return cid_;
}
 void PBoxIdVehicleRow::set_cid(::google::protobuf::int32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PBoxIdVehicleRow.cid)
}

// required string Img = 9;
bool PBoxIdVehicleRow::has_img() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PBoxIdVehicleRow::set_has_img() {
  _has_bits_[0] |= 0x00000100u;
}
void PBoxIdVehicleRow::clear_has_img() {
  _has_bits_[0] &= ~0x00000100u;
}
void PBoxIdVehicleRow::clear_img() {
  img_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_img();
}
 const ::std::string& PBoxIdVehicleRow::img() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PBoxIdVehicleRow.Img)
  return img_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBoxIdVehicleRow::set_img(const ::std::string& value) {
  set_has_img();
  img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PBoxIdVehicleRow.Img)
}
 void PBoxIdVehicleRow::set_img(const char* value) {
  set_has_img();
  img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PBoxIdVehicleRow.Img)
}
 void PBoxIdVehicleRow::set_img(const char* value, size_t size) {
  set_has_img();
  img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PBoxIdVehicleRow.Img)
}
 ::std::string* PBoxIdVehicleRow::mutable_img() {
  set_has_img();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PBoxIdVehicleRow.Img)
  return img_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBoxIdVehicleRow::release_img() {
  clear_has_img();
  return img_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBoxIdVehicleRow::set_allocated_img(::std::string* img) {
  if (img != NULL) {
    set_has_img();
  } else {
    clear_has_img();
  }
  img_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), img);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PBoxIdVehicleRow.Img)
}

// optional string maker = 10;
bool PBoxIdVehicleRow::has_maker() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PBoxIdVehicleRow::set_has_maker() {
  _has_bits_[0] |= 0x00000200u;
}
void PBoxIdVehicleRow::clear_has_maker() {
  _has_bits_[0] &= ~0x00000200u;
}
void PBoxIdVehicleRow::clear_maker() {
  maker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_maker();
}
 const ::std::string& PBoxIdVehicleRow::maker() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PBoxIdVehicleRow.maker)
  return maker_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBoxIdVehicleRow::set_maker(const ::std::string& value) {
  set_has_maker();
  maker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PBoxIdVehicleRow.maker)
}
 void PBoxIdVehicleRow::set_maker(const char* value) {
  set_has_maker();
  maker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PBoxIdVehicleRow.maker)
}
 void PBoxIdVehicleRow::set_maker(const char* value, size_t size) {
  set_has_maker();
  maker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PBoxIdVehicleRow.maker)
}
 ::std::string* PBoxIdVehicleRow::mutable_maker() {
  set_has_maker();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PBoxIdVehicleRow.maker)
  return maker_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBoxIdVehicleRow::release_maker() {
  clear_has_maker();
  return maker_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBoxIdVehicleRow::set_allocated_maker(::std::string* maker) {
  if (maker != NULL) {
    set_has_maker();
  } else {
    clear_has_maker();
  }
  maker_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maker);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PBoxIdVehicleRow.maker)
}

// optional string model = 11;
bool PBoxIdVehicleRow::has_model() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PBoxIdVehicleRow::set_has_model() {
  _has_bits_[0] |= 0x00000400u;
}
void PBoxIdVehicleRow::clear_has_model() {
  _has_bits_[0] &= ~0x00000400u;
}
void PBoxIdVehicleRow::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model();
}
 const ::std::string& PBoxIdVehicleRow::model() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PBoxIdVehicleRow.model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBoxIdVehicleRow::set_model(const ::std::string& value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PBoxIdVehicleRow.model)
}
 void PBoxIdVehicleRow::set_model(const char* value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PBoxIdVehicleRow.model)
}
 void PBoxIdVehicleRow::set_model(const char* value, size_t size) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PBoxIdVehicleRow.model)
}
 ::std::string* PBoxIdVehicleRow::mutable_model() {
  set_has_model();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PBoxIdVehicleRow.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBoxIdVehicleRow::release_model() {
  clear_has_model();
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBoxIdVehicleRow::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    set_has_model();
  } else {
    clear_has_model();
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PBoxIdVehicleRow.model)
}

// optional string color = 12;
bool PBoxIdVehicleRow::has_color() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PBoxIdVehicleRow::set_has_color() {
  _has_bits_[0] |= 0x00000800u;
}
void PBoxIdVehicleRow::clear_has_color() {
  _has_bits_[0] &= ~0x00000800u;
}
void PBoxIdVehicleRow::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
 const ::std::string& PBoxIdVehicleRow::color() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PBoxIdVehicleRow.color)
  return color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBoxIdVehicleRow::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PBoxIdVehicleRow.color)
}
 void PBoxIdVehicleRow::set_color(const char* value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PBoxIdVehicleRow.color)
}
 void PBoxIdVehicleRow::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PBoxIdVehicleRow.color)
}
 ::std::string* PBoxIdVehicleRow::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PBoxIdVehicleRow.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PBoxIdVehicleRow::release_color() {
  clear_has_color();
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PBoxIdVehicleRow::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PBoxIdVehicleRow.color)
}

// optional int32 year = 13;
bool PBoxIdVehicleRow::has_year() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PBoxIdVehicleRow::set_has_year() {
  _has_bits_[0] |= 0x00001000u;
}
void PBoxIdVehicleRow::clear_has_year() {
  _has_bits_[0] &= ~0x00001000u;
}
void PBoxIdVehicleRow::clear_year() {
  year_ = 0;
  clear_has_year();
}
 ::google::protobuf::int32 PBoxIdVehicleRow::year() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PBoxIdVehicleRow.year)
  return year_;
}
 void PBoxIdVehicleRow::set_year(::google::protobuf::int32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PBoxIdVehicleRow.year)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBoxIdVehicleRowList::kVitemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBoxIdVehicleRowList::PBoxIdVehicleRowList()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PBoxIdVehicleRowList)
}

void PBoxIdVehicleRowList::InitAsDefaultInstance() {
}

PBoxIdVehicleRowList::PBoxIdVehicleRowList(const PBoxIdVehicleRowList& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PBoxIdVehicleRowList)
}

void PBoxIdVehicleRowList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBoxIdVehicleRowList::~PBoxIdVehicleRowList() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PBoxIdVehicleRowList)
  SharedDtor();
}

void PBoxIdVehicleRowList::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PBoxIdVehicleRowList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PBoxIdVehicleRowList& PBoxIdVehicleRowList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PBoxIdVehicleRowList* PBoxIdVehicleRowList::default_instance_ = NULL;

PBoxIdVehicleRowList* PBoxIdVehicleRowList::New(::google::protobuf::Arena* arena) const {
  PBoxIdVehicleRowList* n = new PBoxIdVehicleRowList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBoxIdVehicleRowList::Clear() {
  vitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PBoxIdVehicleRowList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PBoxIdVehicleRowList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .my_comm_proto.PBoxIdVehicleRow vitem = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_vitem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_vitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_vitem;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PBoxIdVehicleRowList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PBoxIdVehicleRowList)
  return false;
#undef DO_
}

void PBoxIdVehicleRowList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PBoxIdVehicleRowList)
  // repeated .my_comm_proto.PBoxIdVehicleRow vitem = 1;
  for (unsigned int i = 0, n = this->vitem_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->vitem(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PBoxIdVehicleRowList)
}

int PBoxIdVehicleRowList::ByteSize() const {
  int total_size = 0;

  // repeated .my_comm_proto.PBoxIdVehicleRow vitem = 1;
  total_size += 1 * this->vitem_size();
  for (int i = 0; i < this->vitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vitem(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBoxIdVehicleRowList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PBoxIdVehicleRowList*>(&from));
}

void PBoxIdVehicleRowList::MergeFrom(const PBoxIdVehicleRowList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  vitem_.MergeFrom(from.vitem_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PBoxIdVehicleRowList::CopyFrom(const PBoxIdVehicleRowList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBoxIdVehicleRowList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->vitem())) return false;
  return true;
}

void PBoxIdVehicleRowList::Swap(PBoxIdVehicleRowList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBoxIdVehicleRowList::InternalSwap(PBoxIdVehicleRowList* other) {
  vitem_.UnsafeArenaSwap(&other->vitem_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PBoxIdVehicleRowList::GetTypeName() const {
  return "my_comm_proto.PBoxIdVehicleRowList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBoxIdVehicleRowList

// repeated .my_comm_proto.PBoxIdVehicleRow vitem = 1;
int PBoxIdVehicleRowList::vitem_size() const {
  return vitem_.size();
}
void PBoxIdVehicleRowList::clear_vitem() {
  vitem_.Clear();
}
const ::my_comm_proto::PBoxIdVehicleRow& PBoxIdVehicleRowList::vitem(int index) const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PBoxIdVehicleRowList.vitem)
  return vitem_.Get(index);
}
::my_comm_proto::PBoxIdVehicleRow* PBoxIdVehicleRowList::mutable_vitem(int index) {
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PBoxIdVehicleRowList.vitem)
  return vitem_.Mutable(index);
}
::my_comm_proto::PBoxIdVehicleRow* PBoxIdVehicleRowList::add_vitem() {
  // @@protoc_insertion_point(field_add:my_comm_proto.PBoxIdVehicleRowList.vitem)
  return vitem_.Add();
}
::google::protobuf::RepeatedPtrField< ::my_comm_proto::PBoxIdVehicleRow >*
PBoxIdVehicleRowList::mutable_vitem() {
  // @@protoc_insertion_point(field_mutable_list:my_comm_proto.PBoxIdVehicleRowList.vitem)
  return &vitem_;
}
const ::google::protobuf::RepeatedPtrField< ::my_comm_proto::PBoxIdVehicleRow >&
PBoxIdVehicleRowList::vitem() const {
  // @@protoc_insertion_point(field_list:my_comm_proto.PBoxIdVehicleRowList.vitem)
  return vitem_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PConfiguration::kInspHDFieldNumber;
const int PConfiguration::kInspHAFieldNumber;
const int PConfiguration::kImagesLimitFieldNumber;
const int PConfiguration::kViolationthresholdFieldNumber;
const int PConfiguration::kLoginFieldNumber;
const int PConfiguration::kScanFlagFieldNumber;
const int PConfiguration::kSearchTypeFieldNumber;
const int PConfiguration::kScreenLockFieldNumber;
const int PConfiguration::kOdoInputFlagFieldNumber;
const int PConfiguration::kWeightThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PConfiguration::PConfiguration()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PConfiguration)
}

void PConfiguration::InitAsDefaultInstance() {
}

PConfiguration::PConfiguration(const PConfiguration& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PConfiguration)
}

void PConfiguration::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insphd_ = 0;
  inspha_ = 0;
  imageslimit_ = 0;
  violationthreshold_ = 0;
  login_ = 0;
  _scan_flag_ = false;
  searchtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  screenlock_ = 0;
  odoinputflag_ = 0;
  weightthreshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PConfiguration::~PConfiguration() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PConfiguration)
  SharedDtor();
}

void PConfiguration::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  searchtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PConfiguration& PConfiguration::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PConfiguration* PConfiguration::default_instance_ = NULL;

PConfiguration* PConfiguration::New(::google::protobuf::Arena* arena) const {
  PConfiguration* n = new PConfiguration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PConfiguration::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PConfiguration*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(insphd_, _scan_flag_);
    if (has_searchtype()) {
      searchtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    screenlock_ = 0;
  }
  ZR_(odoinputflag_, weightthreshold_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 inspHD = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &insphd_)));
          set_has_insphd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_inspHA;
        break;
      }

      // required int32 inspHA = 2;
      case 2: {
        if (tag == 16) {
         parse_inspHA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inspha_)));
          set_has_inspha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_imagesLimit;
        break;
      }

      // required int32 imagesLimit = 3;
      case 3: {
        if (tag == 24) {
         parse_imagesLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imageslimit_)));
          set_has_imageslimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_violationthreshold;
        break;
      }

      // required int32 violationthreshold = 4;
      case 4: {
        if (tag == 32) {
         parse_violationthreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &violationthreshold_)));
          set_has_violationthreshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_login;
        break;
      }

      // required int32 login = 5;
      case 5: {
        if (tag == 40) {
         parse_login:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_)));
          set_has_login();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse__scan_flag;
        break;
      }

      // required bool _scan_flag = 6;
      case 6: {
        if (tag == 48) {
         parse__scan_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &_scan_flag_)));
          set_has__scan_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_SearchType;
        break;
      }

      // required string SearchType = 7;
      case 7: {
        if (tag == 58) {
         parse_SearchType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searchtype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ScreenLock;
        break;
      }

      // required int32 ScreenLock = 8;
      case 8: {
        if (tag == 64) {
         parse_ScreenLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screenlock_)));
          set_has_screenlock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_OdoInputFlag;
        break;
      }

      // required int32 OdoInputFlag = 9;
      case 9: {
        if (tag == 72) {
         parse_OdoInputFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &odoinputflag_)));
          set_has_odoinputflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_WeightThreshold;
        break;
      }

      // required int32 WeightThreshold = 10;
      case 10: {
        if (tag == 80) {
         parse_WeightThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weightthreshold_)));
          set_has_weightthreshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PConfiguration)
  return false;
#undef DO_
}

void PConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PConfiguration)
  // required int32 inspHD = 1;
  if (has_insphd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->insphd(), output);
  }

  // required int32 inspHA = 2;
  if (has_inspha()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inspha(), output);
  }

  // required int32 imagesLimit = 3;
  if (has_imageslimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->imageslimit(), output);
  }

  // required int32 violationthreshold = 4;
  if (has_violationthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->violationthreshold(), output);
  }

  // required int32 login = 5;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->login(), output);
  }

  // required bool _scan_flag = 6;
  if (has__scan_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->_scan_flag(), output);
  }

  // required string SearchType = 7;
  if (has_searchtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->searchtype(), output);
  }

  // required int32 ScreenLock = 8;
  if (has_screenlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->screenlock(), output);
  }

  // required int32 OdoInputFlag = 9;
  if (has_odoinputflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->odoinputflag(), output);
  }

  // required int32 WeightThreshold = 10;
  if (has_weightthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->weightthreshold(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PConfiguration)
}

int PConfiguration::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_insphd()) {
    // required int32 inspHD = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->insphd());
  }

  if (has_inspha()) {
    // required int32 inspHA = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->inspha());
  }

  if (has_imageslimit()) {
    // required int32 imagesLimit = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->imageslimit());
  }

  if (has_violationthreshold()) {
    // required int32 violationthreshold = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->violationthreshold());
  }

  if (has_login()) {
    // required int32 login = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->login());
  }

  if (has__scan_flag()) {
    // required bool _scan_flag = 6;
    total_size += 1 + 1;
  }

  if (has_searchtype()) {
    // required string SearchType = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->searchtype());
  }

  if (has_screenlock()) {
    // required int32 ScreenLock = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->screenlock());
  }

  if (has_odoinputflag()) {
    // required int32 OdoInputFlag = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->odoinputflag());
  }

  if (has_weightthreshold()) {
    // required int32 WeightThreshold = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->weightthreshold());
  }

  return total_size;
}
int PConfiguration::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required int32 inspHD = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->insphd());

    // required int32 inspHA = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->inspha());

    // required int32 imagesLimit = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->imageslimit());

    // required int32 violationthreshold = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->violationthreshold());

    // required int32 login = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->login());

    // required bool _scan_flag = 6;
    total_size += 1 + 1;

    // required string SearchType = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->searchtype());

    // required int32 ScreenLock = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->screenlock());

    // required int32 OdoInputFlag = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->odoinputflag());

    // required int32 WeightThreshold = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->weightthreshold());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PConfiguration::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PConfiguration*>(&from));
}

void PConfiguration::MergeFrom(const PConfiguration& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_insphd()) {
      set_insphd(from.insphd());
    }
    if (from.has_inspha()) {
      set_inspha(from.inspha());
    }
    if (from.has_imageslimit()) {
      set_imageslimit(from.imageslimit());
    }
    if (from.has_violationthreshold()) {
      set_violationthreshold(from.violationthreshold());
    }
    if (from.has_login()) {
      set_login(from.login());
    }
    if (from.has__scan_flag()) {
      set__scan_flag(from._scan_flag());
    }
    if (from.has_searchtype()) {
      set_has_searchtype();
      searchtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.searchtype_);
    }
    if (from.has_screenlock()) {
      set_screenlock(from.screenlock());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_odoinputflag()) {
      set_odoinputflag(from.odoinputflag());
    }
    if (from.has_weightthreshold()) {
      set_weightthreshold(from.weightthreshold());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PConfiguration::CopyFrom(const PConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PConfiguration::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void PConfiguration::Swap(PConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PConfiguration::InternalSwap(PConfiguration* other) {
  std::swap(insphd_, other->insphd_);
  std::swap(inspha_, other->inspha_);
  std::swap(imageslimit_, other->imageslimit_);
  std::swap(violationthreshold_, other->violationthreshold_);
  std::swap(login_, other->login_);
  std::swap(_scan_flag_, other->_scan_flag_);
  searchtype_.Swap(&other->searchtype_);
  std::swap(screenlock_, other->screenlock_);
  std::swap(odoinputflag_, other->odoinputflag_);
  std::swap(weightthreshold_, other->weightthreshold_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PConfiguration::GetTypeName() const {
  return "my_comm_proto.PConfiguration";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PConfiguration

// required int32 inspHD = 1;
bool PConfiguration::has_insphd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PConfiguration::set_has_insphd() {
  _has_bits_[0] |= 0x00000001u;
}
void PConfiguration::clear_has_insphd() {
  _has_bits_[0] &= ~0x00000001u;
}
void PConfiguration::clear_insphd() {
  insphd_ = 0;
  clear_has_insphd();
}
 ::google::protobuf::int32 PConfiguration::insphd() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PConfiguration.inspHD)
  return insphd_;
}
 void PConfiguration::set_insphd(::google::protobuf::int32 value) {
  set_has_insphd();
  insphd_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PConfiguration.inspHD)
}

// required int32 inspHA = 2;
bool PConfiguration::has_inspha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PConfiguration::set_has_inspha() {
  _has_bits_[0] |= 0x00000002u;
}
void PConfiguration::clear_has_inspha() {
  _has_bits_[0] &= ~0x00000002u;
}
void PConfiguration::clear_inspha() {
  inspha_ = 0;
  clear_has_inspha();
}
 ::google::protobuf::int32 PConfiguration::inspha() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PConfiguration.inspHA)
  return inspha_;
}
 void PConfiguration::set_inspha(::google::protobuf::int32 value) {
  set_has_inspha();
  inspha_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PConfiguration.inspHA)
}

// required int32 imagesLimit = 3;
bool PConfiguration::has_imageslimit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PConfiguration::set_has_imageslimit() {
  _has_bits_[0] |= 0x00000004u;
}
void PConfiguration::clear_has_imageslimit() {
  _has_bits_[0] &= ~0x00000004u;
}
void PConfiguration::clear_imageslimit() {
  imageslimit_ = 0;
  clear_has_imageslimit();
}
 ::google::protobuf::int32 PConfiguration::imageslimit() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PConfiguration.imagesLimit)
  return imageslimit_;
}
 void PConfiguration::set_imageslimit(::google::protobuf::int32 value) {
  set_has_imageslimit();
  imageslimit_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PConfiguration.imagesLimit)
}

// required int32 violationthreshold = 4;
bool PConfiguration::has_violationthreshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PConfiguration::set_has_violationthreshold() {
  _has_bits_[0] |= 0x00000008u;
}
void PConfiguration::clear_has_violationthreshold() {
  _has_bits_[0] &= ~0x00000008u;
}
void PConfiguration::clear_violationthreshold() {
  violationthreshold_ = 0;
  clear_has_violationthreshold();
}
 ::google::protobuf::int32 PConfiguration::violationthreshold() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PConfiguration.violationthreshold)
  return violationthreshold_;
}
 void PConfiguration::set_violationthreshold(::google::protobuf::int32 value) {
  set_has_violationthreshold();
  violationthreshold_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PConfiguration.violationthreshold)
}

// required int32 login = 5;
bool PConfiguration::has_login() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PConfiguration::set_has_login() {
  _has_bits_[0] |= 0x00000010u;
}
void PConfiguration::clear_has_login() {
  _has_bits_[0] &= ~0x00000010u;
}
void PConfiguration::clear_login() {
  login_ = 0;
  clear_has_login();
}
 ::google::protobuf::int32 PConfiguration::login() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PConfiguration.login)
  return login_;
}
 void PConfiguration::set_login(::google::protobuf::int32 value) {
  set_has_login();
  login_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PConfiguration.login)
}

// required bool _scan_flag = 6;
bool PConfiguration::has__scan_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PConfiguration::set_has__scan_flag() {
  _has_bits_[0] |= 0x00000020u;
}
void PConfiguration::clear_has__scan_flag() {
  _has_bits_[0] &= ~0x00000020u;
}
void PConfiguration::clear__scan_flag() {
  _scan_flag_ = false;
  clear_has__scan_flag();
}
 bool PConfiguration::_scan_flag() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PConfiguration._scan_flag)
  return _scan_flag_;
}
 void PConfiguration::set__scan_flag(bool value) {
  set_has__scan_flag();
  _scan_flag_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PConfiguration._scan_flag)
}

// required string SearchType = 7;
bool PConfiguration::has_searchtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PConfiguration::set_has_searchtype() {
  _has_bits_[0] |= 0x00000040u;
}
void PConfiguration::clear_has_searchtype() {
  _has_bits_[0] &= ~0x00000040u;
}
void PConfiguration::clear_searchtype() {
  searchtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_searchtype();
}
 const ::std::string& PConfiguration::searchtype() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PConfiguration.SearchType)
  return searchtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PConfiguration::set_searchtype(const ::std::string& value) {
  set_has_searchtype();
  searchtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PConfiguration.SearchType)
}
 void PConfiguration::set_searchtype(const char* value) {
  set_has_searchtype();
  searchtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PConfiguration.SearchType)
}
 void PConfiguration::set_searchtype(const char* value, size_t size) {
  set_has_searchtype();
  searchtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PConfiguration.SearchType)
}
 ::std::string* PConfiguration::mutable_searchtype() {
  set_has_searchtype();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PConfiguration.SearchType)
  return searchtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PConfiguration::release_searchtype() {
  clear_has_searchtype();
  return searchtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PConfiguration::set_allocated_searchtype(::std::string* searchtype) {
  if (searchtype != NULL) {
    set_has_searchtype();
  } else {
    clear_has_searchtype();
  }
  searchtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), searchtype);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PConfiguration.SearchType)
}

// required int32 ScreenLock = 8;
bool PConfiguration::has_screenlock() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PConfiguration::set_has_screenlock() {
  _has_bits_[0] |= 0x00000080u;
}
void PConfiguration::clear_has_screenlock() {
  _has_bits_[0] &= ~0x00000080u;
}
void PConfiguration::clear_screenlock() {
  screenlock_ = 0;
  clear_has_screenlock();
}
 ::google::protobuf::int32 PConfiguration::screenlock() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PConfiguration.ScreenLock)
  return screenlock_;
}
 void PConfiguration::set_screenlock(::google::protobuf::int32 value) {
  set_has_screenlock();
  screenlock_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PConfiguration.ScreenLock)
}

// required int32 OdoInputFlag = 9;
bool PConfiguration::has_odoinputflag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PConfiguration::set_has_odoinputflag() {
  _has_bits_[0] |= 0x00000100u;
}
void PConfiguration::clear_has_odoinputflag() {
  _has_bits_[0] &= ~0x00000100u;
}
void PConfiguration::clear_odoinputflag() {
  odoinputflag_ = 0;
  clear_has_odoinputflag();
}
 ::google::protobuf::int32 PConfiguration::odoinputflag() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PConfiguration.OdoInputFlag)
  return odoinputflag_;
}
 void PConfiguration::set_odoinputflag(::google::protobuf::int32 value) {
  set_has_odoinputflag();
  odoinputflag_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PConfiguration.OdoInputFlag)
}

// required int32 WeightThreshold = 10;
bool PConfiguration::has_weightthreshold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PConfiguration::set_has_weightthreshold() {
  _has_bits_[0] |= 0x00000200u;
}
void PConfiguration::clear_has_weightthreshold() {
  _has_bits_[0] &= ~0x00000200u;
}
void PConfiguration::clear_weightthreshold() {
  weightthreshold_ = 0;
  clear_has_weightthreshold();
}
 ::google::protobuf::int32 PConfiguration::weightthreshold() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PConfiguration.WeightThreshold)
  return weightthreshold_;
}
 void PConfiguration::set_weightthreshold(::google::protobuf::int32 value) {
  set_has_weightthreshold();
  weightthreshold_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PConfiguration.WeightThreshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PEmployeeRow::kIDFieldNumber;
const int PEmployeeRow::kDriverNameFieldNumber;
const int PEmployeeRow::kUserNameFieldNumber;
const int PEmployeeRow::kEmailFieldNumber;
const int PEmployeeRow::kPasswordFieldNumber;
const int PEmployeeRow::kLicenseFieldNumber;
const int PEmployeeRow::kCountryFieldNumber;
const int PEmployeeRow::kSignatureFieldNumber;
const int PEmployeeRow::kDomainFieldNumber;
const int PEmployeeRow::kCycleFieldNumber;
const int PEmployeeRow::kHOSExceptFieldNumber;
const int PEmployeeRow::kApplyDTSFieldNumber;
const int PEmployeeRow::kTZFieldNumber;
const int PEmployeeRow::kHomeAddressFieldNumber;
const int PEmployeeRow::kIsSupervisorFieldNumber;
const int PEmployeeRow::kStateFieldNumber;
const int PEmployeeRow::kOrgNameFieldNumber;
const int PEmployeeRow::kOrgAddrFieldNumber;
const int PEmployeeRow::kDLSFieldNumber;
const int PEmployeeRow::kPhotoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PEmployeeRow::PEmployeeRow()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PEmployeeRow)
}

void PEmployeeRow::InitAsDefaultInstance() {
}

PEmployeeRow::PEmployeeRow(const PEmployeeRow& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PEmployeeRow)
}

void PEmployeeRow::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drivername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cycle_ = 0;
  hosexcept_ = 0;
  applydts_ = 0;
  tz_ = 0;
  homeaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issupervisor_ = false;
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orgname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orgaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dls_ = false;
  photo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PEmployeeRow::~PEmployeeRow() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PEmployeeRow)
  SharedDtor();
}

void PEmployeeRow::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drivername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  homeaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orgname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orgaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  photo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PEmployeeRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PEmployeeRow& PEmployeeRow::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PEmployeeRow* PEmployeeRow::default_instance_ = NULL;

PEmployeeRow* PEmployeeRow::New(::google::protobuf::Arena* arena) const {
  PEmployeeRow* n = new PEmployeeRow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PEmployeeRow::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PEmployeeRow*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_drivername()) {
      drivername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_username()) {
      username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_email()) {
      email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_license()) {
      license_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_country()) {
      country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_signature()) {
      signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(cycle_, tz_);
    if (has_domain()) {
      domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_homeaddress()) {
      homeaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    issupervisor_ = false;
    if (has_state()) {
      state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 983040u) {
    if (has_orgname()) {
      orgname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_orgaddr()) {
      orgaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    dls_ = false;
    if (has_photo()) {
      photo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PEmployeeRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PEmployeeRow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DriverName;
        break;
      }

      // required string DriverName = 2;
      case 2: {
        if (tag == 18) {
         parse_DriverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_drivername()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserName;
        break;
      }

      // optional string UserName = 3;
      case 3: {
        if (tag == 26) {
         parse_UserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Email;
        break;
      }

      // optional string Email = 4;
      case 4: {
        if (tag == 34) {
         parse_Email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Password;
        break;
      }

      // optional string Password = 5;
      case 5: {
        if (tag == 42) {
         parse_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_License;
        break;
      }

      // optional string License = 6;
      case 6: {
        if (tag == 50) {
         parse_License:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_license()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Country;
        break;
      }

      // optional string Country = 7;
      case 7: {
        if (tag == 58) {
         parse_Country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Signature;
        break;
      }

      // optional string Signature = 8;
      case 8: {
        if (tag == 66) {
         parse_Signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Domain;
        break;
      }

      // optional string Domain = 9;
      case 9: {
        if (tag == 74) {
         parse_Domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Cycle;
        break;
      }

      // optional int32 Cycle = 10;
      case 10: {
        if (tag == 80) {
         parse_Cycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cycle_)));
          set_has_cycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_HOSExcept;
        break;
      }

      // optional int32 HOSExcept = 11;
      case 11: {
        if (tag == 88) {
         parse_HOSExcept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hosexcept_)));
          set_has_hosexcept();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ApplyDTS;
        break;
      }

      // optional int32 ApplyDTS = 12;
      case 12: {
        if (tag == 96) {
         parse_ApplyDTS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applydts_)));
          set_has_applydts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_TZ;
        break;
      }

      // optional float TZ = 13;
      case 13: {
        if (tag == 109) {
         parse_TZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tz_)));
          set_has_tz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_HomeAddress;
        break;
      }

      // optional string HomeAddress = 14;
      case 14: {
        if (tag == 114) {
         parse_HomeAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_homeaddress()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_IsSupervisor;
        break;
      }

      // optional bool IsSupervisor = 15;
      case 15: {
        if (tag == 120) {
         parse_IsSupervisor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issupervisor_)));
          set_has_issupervisor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_State;
        break;
      }

      // optional string State = 16;
      case 16: {
        if (tag == 130) {
         parse_State:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_OrgName;
        break;
      }

      // optional string OrgName = 17;
      case 17: {
        if (tag == 138) {
         parse_OrgName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orgname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_OrgAddr;
        break;
      }

      // optional string OrgAddr = 18;
      case 18: {
        if (tag == 146) {
         parse_OrgAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orgaddr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_DLS;
        break;
      }

      // optional bool DLS = 21;
      case 21: {
        if (tag == 168) {
         parse_DLS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dls_)));
          set_has_dls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_photo;
        break;
      }

      // optional string photo = 22;
      case 22: {
        if (tag == 178) {
         parse_photo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_photo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PEmployeeRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PEmployeeRow)
  return false;
#undef DO_
}

void PEmployeeRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PEmployeeRow)
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string DriverName = 2;
  if (has_drivername()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->drivername(), output);
  }

  // optional string UserName = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // optional string Email = 4;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->email(), output);
  }

  // optional string Password = 5;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->password(), output);
  }

  // optional string License = 6;
  if (has_license()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->license(), output);
  }

  // optional string Country = 7;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->country(), output);
  }

  // optional string Signature = 8;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->signature(), output);
  }

  // optional string Domain = 9;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->domain(), output);
  }

  // optional int32 Cycle = 10;
  if (has_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cycle(), output);
  }

  // optional int32 HOSExcept = 11;
  if (has_hosexcept()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->hosexcept(), output);
  }

  // optional int32 ApplyDTS = 12;
  if (has_applydts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->applydts(), output);
  }

  // optional float TZ = 13;
  if (has_tz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->tz(), output);
  }

  // optional string HomeAddress = 14;
  if (has_homeaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->homeaddress(), output);
  }

  // optional bool IsSupervisor = 15;
  if (has_issupervisor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->issupervisor(), output);
  }

  // optional string State = 16;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->state(), output);
  }

  // optional string OrgName = 17;
  if (has_orgname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->orgname(), output);
  }

  // optional string OrgAddr = 18;
  if (has_orgaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->orgaddr(), output);
  }

  // optional bool DLS = 21;
  if (has_dls()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->dls(), output);
  }

  // optional string photo = 22;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->photo(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PEmployeeRow)
}

int PEmployeeRow::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required string ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_drivername()) {
    // required string DriverName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->drivername());
  }

  return total_size;
}
int PEmployeeRow::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string DriverName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->drivername());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 252u) {
    // optional string UserName = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string Email = 4;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string Password = 5;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string License = 6;
    if (has_license()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->license());
    }

    // optional string Country = 7;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string Signature = 8;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string Domain = 9;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional int32 Cycle = 10;
    if (has_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cycle());
    }

    // optional int32 HOSExcept = 11;
    if (has_hosexcept()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hosexcept());
    }

    // optional int32 ApplyDTS = 12;
    if (has_applydts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->applydts());
    }

    // optional float TZ = 13;
    if (has_tz()) {
      total_size += 1 + 4;
    }

    // optional string HomeAddress = 14;
    if (has_homeaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->homeaddress());
    }

    // optional bool IsSupervisor = 15;
    if (has_issupervisor()) {
      total_size += 1 + 1;
    }

    // optional string State = 16;
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional string OrgName = 17;
    if (has_orgname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orgname());
    }

    // optional string OrgAddr = 18;
    if (has_orgaddr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orgaddr());
    }

    // optional bool DLS = 21;
    if (has_dls()) {
      total_size += 2 + 1;
    }

    // optional string photo = 22;
    if (has_photo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->photo());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PEmployeeRow::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PEmployeeRow*>(&from));
}

void PEmployeeRow::MergeFrom(const PEmployeeRow& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_drivername()) {
      set_has_drivername();
      drivername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drivername_);
    }
    if (from.has_username()) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (from.has_email()) {
      set_has_email();
      email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (from.has_license()) {
      set_has_license();
      license_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.license_);
    }
    if (from.has_country()) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (from.has_signature()) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_domain()) {
      set_has_domain();
      domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
    if (from.has_cycle()) {
      set_cycle(from.cycle());
    }
    if (from.has_hosexcept()) {
      set_hosexcept(from.hosexcept());
    }
    if (from.has_applydts()) {
      set_applydts(from.applydts());
    }
    if (from.has_tz()) {
      set_tz(from.tz());
    }
    if (from.has_homeaddress()) {
      set_has_homeaddress();
      homeaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.homeaddress_);
    }
    if (from.has_issupervisor()) {
      set_issupervisor(from.issupervisor());
    }
    if (from.has_state()) {
      set_has_state();
      state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_orgname()) {
      set_has_orgname();
      orgname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orgname_);
    }
    if (from.has_orgaddr()) {
      set_has_orgaddr();
      orgaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orgaddr_);
    }
    if (from.has_dls()) {
      set_dls(from.dls());
    }
    if (from.has_photo()) {
      set_has_photo();
      photo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.photo_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PEmployeeRow::CopyFrom(const PEmployeeRow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PEmployeeRow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PEmployeeRow::Swap(PEmployeeRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PEmployeeRow::InternalSwap(PEmployeeRow* other) {
  id_.Swap(&other->id_);
  drivername_.Swap(&other->drivername_);
  username_.Swap(&other->username_);
  email_.Swap(&other->email_);
  password_.Swap(&other->password_);
  license_.Swap(&other->license_);
  country_.Swap(&other->country_);
  signature_.Swap(&other->signature_);
  domain_.Swap(&other->domain_);
  std::swap(cycle_, other->cycle_);
  std::swap(hosexcept_, other->hosexcept_);
  std::swap(applydts_, other->applydts_);
  std::swap(tz_, other->tz_);
  homeaddress_.Swap(&other->homeaddress_);
  std::swap(issupervisor_, other->issupervisor_);
  state_.Swap(&other->state_);
  orgname_.Swap(&other->orgname_);
  orgaddr_.Swap(&other->orgaddr_);
  std::swap(dls_, other->dls_);
  photo_.Swap(&other->photo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PEmployeeRow::GetTypeName() const {
  return "my_comm_proto.PEmployeeRow";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PEmployeeRow

// required string ID = 1;
bool PEmployeeRow::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PEmployeeRow::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PEmployeeRow::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PEmployeeRow::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& PEmployeeRow::id() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PEmployeeRow.ID)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PEmployeeRow.ID)
}
 void PEmployeeRow::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PEmployeeRow.ID)
}
 void PEmployeeRow::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PEmployeeRow.ID)
}
 ::std::string* PEmployeeRow::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PEmployeeRow.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PEmployeeRow::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PEmployeeRow.ID)
}

// required string DriverName = 2;
bool PEmployeeRow::has_drivername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PEmployeeRow::set_has_drivername() {
  _has_bits_[0] |= 0x00000002u;
}
void PEmployeeRow::clear_has_drivername() {
  _has_bits_[0] &= ~0x00000002u;
}
void PEmployeeRow::clear_drivername() {
  drivername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_drivername();
}
 const ::std::string& PEmployeeRow::drivername() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PEmployeeRow.DriverName)
  return drivername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_drivername(const ::std::string& value) {
  set_has_drivername();
  drivername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PEmployeeRow.DriverName)
}
 void PEmployeeRow::set_drivername(const char* value) {
  set_has_drivername();
  drivername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PEmployeeRow.DriverName)
}
 void PEmployeeRow::set_drivername(const char* value, size_t size) {
  set_has_drivername();
  drivername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PEmployeeRow.DriverName)
}
 ::std::string* PEmployeeRow::mutable_drivername() {
  set_has_drivername();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PEmployeeRow.DriverName)
  return drivername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PEmployeeRow::release_drivername() {
  clear_has_drivername();
  return drivername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_allocated_drivername(::std::string* drivername) {
  if (drivername != NULL) {
    set_has_drivername();
  } else {
    clear_has_drivername();
  }
  drivername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drivername);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PEmployeeRow.DriverName)
}

// optional string UserName = 3;
bool PEmployeeRow::has_username() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PEmployeeRow::set_has_username() {
  _has_bits_[0] |= 0x00000004u;
}
void PEmployeeRow::clear_has_username() {
  _has_bits_[0] &= ~0x00000004u;
}
void PEmployeeRow::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
 const ::std::string& PEmployeeRow::username() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PEmployeeRow.UserName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PEmployeeRow.UserName)
}
 void PEmployeeRow::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PEmployeeRow.UserName)
}
 void PEmployeeRow::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PEmployeeRow.UserName)
}
 ::std::string* PEmployeeRow::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PEmployeeRow.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PEmployeeRow::release_username() {
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PEmployeeRow.UserName)
}

// optional string Email = 4;
bool PEmployeeRow::has_email() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PEmployeeRow::set_has_email() {
  _has_bits_[0] |= 0x00000008u;
}
void PEmployeeRow::clear_has_email() {
  _has_bits_[0] &= ~0x00000008u;
}
void PEmployeeRow::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
 const ::std::string& PEmployeeRow::email() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PEmployeeRow.Email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PEmployeeRow.Email)
}
 void PEmployeeRow::set_email(const char* value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PEmployeeRow.Email)
}
 void PEmployeeRow::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PEmployeeRow.Email)
}
 ::std::string* PEmployeeRow::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PEmployeeRow.Email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PEmployeeRow::release_email() {
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PEmployeeRow.Email)
}

// optional string Password = 5;
bool PEmployeeRow::has_password() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PEmployeeRow::set_has_password() {
  _has_bits_[0] |= 0x00000010u;
}
void PEmployeeRow::clear_has_password() {
  _has_bits_[0] &= ~0x00000010u;
}
void PEmployeeRow::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
 const ::std::string& PEmployeeRow::password() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PEmployeeRow.Password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PEmployeeRow.Password)
}
 void PEmployeeRow::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PEmployeeRow.Password)
}
 void PEmployeeRow::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PEmployeeRow.Password)
}
 ::std::string* PEmployeeRow::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PEmployeeRow.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PEmployeeRow::release_password() {
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PEmployeeRow.Password)
}

// optional string License = 6;
bool PEmployeeRow::has_license() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PEmployeeRow::set_has_license() {
  _has_bits_[0] |= 0x00000020u;
}
void PEmployeeRow::clear_has_license() {
  _has_bits_[0] &= ~0x00000020u;
}
void PEmployeeRow::clear_license() {
  license_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_license();
}
 const ::std::string& PEmployeeRow::license() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PEmployeeRow.License)
  return license_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_license(const ::std::string& value) {
  set_has_license();
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PEmployeeRow.License)
}
 void PEmployeeRow::set_license(const char* value) {
  set_has_license();
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PEmployeeRow.License)
}
 void PEmployeeRow::set_license(const char* value, size_t size) {
  set_has_license();
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PEmployeeRow.License)
}
 ::std::string* PEmployeeRow::mutable_license() {
  set_has_license();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PEmployeeRow.License)
  return license_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PEmployeeRow::release_license() {
  clear_has_license();
  return license_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_allocated_license(::std::string* license) {
  if (license != NULL) {
    set_has_license();
  } else {
    clear_has_license();
  }
  license_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), license);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PEmployeeRow.License)
}

// optional string Country = 7;
bool PEmployeeRow::has_country() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PEmployeeRow::set_has_country() {
  _has_bits_[0] |= 0x00000040u;
}
void PEmployeeRow::clear_has_country() {
  _has_bits_[0] &= ~0x00000040u;
}
void PEmployeeRow::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
 const ::std::string& PEmployeeRow::country() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PEmployeeRow.Country)
  return country_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PEmployeeRow.Country)
}
 void PEmployeeRow::set_country(const char* value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PEmployeeRow.Country)
}
 void PEmployeeRow::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PEmployeeRow.Country)
}
 ::std::string* PEmployeeRow::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PEmployeeRow.Country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PEmployeeRow::release_country() {
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PEmployeeRow.Country)
}

// optional string Signature = 8;
bool PEmployeeRow::has_signature() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PEmployeeRow::set_has_signature() {
  _has_bits_[0] |= 0x00000080u;
}
void PEmployeeRow::clear_has_signature() {
  _has_bits_[0] &= ~0x00000080u;
}
void PEmployeeRow::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
 const ::std::string& PEmployeeRow::signature() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PEmployeeRow.Signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PEmployeeRow.Signature)
}
 void PEmployeeRow::set_signature(const char* value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PEmployeeRow.Signature)
}
 void PEmployeeRow::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PEmployeeRow.Signature)
}
 ::std::string* PEmployeeRow::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PEmployeeRow.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PEmployeeRow::release_signature() {
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PEmployeeRow.Signature)
}

// optional string Domain = 9;
bool PEmployeeRow::has_domain() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PEmployeeRow::set_has_domain() {
  _has_bits_[0] |= 0x00000100u;
}
void PEmployeeRow::clear_has_domain() {
  _has_bits_[0] &= ~0x00000100u;
}
void PEmployeeRow::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
 const ::std::string& PEmployeeRow::domain() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PEmployeeRow.Domain)
  return domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PEmployeeRow.Domain)
}
 void PEmployeeRow::set_domain(const char* value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PEmployeeRow.Domain)
}
 void PEmployeeRow::set_domain(const char* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PEmployeeRow.Domain)
}
 ::std::string* PEmployeeRow::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PEmployeeRow.Domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PEmployeeRow::release_domain() {
  clear_has_domain();
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PEmployeeRow.Domain)
}

// optional int32 Cycle = 10;
bool PEmployeeRow::has_cycle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PEmployeeRow::set_has_cycle() {
  _has_bits_[0] |= 0x00000200u;
}
void PEmployeeRow::clear_has_cycle() {
  _has_bits_[0] &= ~0x00000200u;
}
void PEmployeeRow::clear_cycle() {
  cycle_ = 0;
  clear_has_cycle();
}
 ::google::protobuf::int32 PEmployeeRow::cycle() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PEmployeeRow.Cycle)
  return cycle_;
}
 void PEmployeeRow::set_cycle(::google::protobuf::int32 value) {
  set_has_cycle();
  cycle_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PEmployeeRow.Cycle)
}

// optional int32 HOSExcept = 11;
bool PEmployeeRow::has_hosexcept() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PEmployeeRow::set_has_hosexcept() {
  _has_bits_[0] |= 0x00000400u;
}
void PEmployeeRow::clear_has_hosexcept() {
  _has_bits_[0] &= ~0x00000400u;
}
void PEmployeeRow::clear_hosexcept() {
  hosexcept_ = 0;
  clear_has_hosexcept();
}
 ::google::protobuf::int32 PEmployeeRow::hosexcept() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PEmployeeRow.HOSExcept)
  return hosexcept_;
}
 void PEmployeeRow::set_hosexcept(::google::protobuf::int32 value) {
  set_has_hosexcept();
  hosexcept_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PEmployeeRow.HOSExcept)
}

// optional int32 ApplyDTS = 12;
bool PEmployeeRow::has_applydts() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PEmployeeRow::set_has_applydts() {
  _has_bits_[0] |= 0x00000800u;
}
void PEmployeeRow::clear_has_applydts() {
  _has_bits_[0] &= ~0x00000800u;
}
void PEmployeeRow::clear_applydts() {
  applydts_ = 0;
  clear_has_applydts();
}
 ::google::protobuf::int32 PEmployeeRow::applydts() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PEmployeeRow.ApplyDTS)
  return applydts_;
}
 void PEmployeeRow::set_applydts(::google::protobuf::int32 value) {
  set_has_applydts();
  applydts_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PEmployeeRow.ApplyDTS)
}

// optional float TZ = 13;
bool PEmployeeRow::has_tz() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PEmployeeRow::set_has_tz() {
  _has_bits_[0] |= 0x00001000u;
}
void PEmployeeRow::clear_has_tz() {
  _has_bits_[0] &= ~0x00001000u;
}
void PEmployeeRow::clear_tz() {
  tz_ = 0;
  clear_has_tz();
}
 float PEmployeeRow::tz() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PEmployeeRow.TZ)
  return tz_;
}
 void PEmployeeRow::set_tz(float value) {
  set_has_tz();
  tz_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PEmployeeRow.TZ)
}

// optional string HomeAddress = 14;
bool PEmployeeRow::has_homeaddress() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PEmployeeRow::set_has_homeaddress() {
  _has_bits_[0] |= 0x00002000u;
}
void PEmployeeRow::clear_has_homeaddress() {
  _has_bits_[0] &= ~0x00002000u;
}
void PEmployeeRow::clear_homeaddress() {
  homeaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_homeaddress();
}
 const ::std::string& PEmployeeRow::homeaddress() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PEmployeeRow.HomeAddress)
  return homeaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_homeaddress(const ::std::string& value) {
  set_has_homeaddress();
  homeaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PEmployeeRow.HomeAddress)
}
 void PEmployeeRow::set_homeaddress(const char* value) {
  set_has_homeaddress();
  homeaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PEmployeeRow.HomeAddress)
}
 void PEmployeeRow::set_homeaddress(const char* value, size_t size) {
  set_has_homeaddress();
  homeaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PEmployeeRow.HomeAddress)
}
 ::std::string* PEmployeeRow::mutable_homeaddress() {
  set_has_homeaddress();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PEmployeeRow.HomeAddress)
  return homeaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PEmployeeRow::release_homeaddress() {
  clear_has_homeaddress();
  return homeaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_allocated_homeaddress(::std::string* homeaddress) {
  if (homeaddress != NULL) {
    set_has_homeaddress();
  } else {
    clear_has_homeaddress();
  }
  homeaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), homeaddress);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PEmployeeRow.HomeAddress)
}

// optional bool IsSupervisor = 15;
bool PEmployeeRow::has_issupervisor() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PEmployeeRow::set_has_issupervisor() {
  _has_bits_[0] |= 0x00004000u;
}
void PEmployeeRow::clear_has_issupervisor() {
  _has_bits_[0] &= ~0x00004000u;
}
void PEmployeeRow::clear_issupervisor() {
  issupervisor_ = false;
  clear_has_issupervisor();
}
 bool PEmployeeRow::issupervisor() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PEmployeeRow.IsSupervisor)
  return issupervisor_;
}
 void PEmployeeRow::set_issupervisor(bool value) {
  set_has_issupervisor();
  issupervisor_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PEmployeeRow.IsSupervisor)
}

// optional string State = 16;
bool PEmployeeRow::has_state() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PEmployeeRow::set_has_state() {
  _has_bits_[0] |= 0x00008000u;
}
void PEmployeeRow::clear_has_state() {
  _has_bits_[0] &= ~0x00008000u;
}
void PEmployeeRow::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_state();
}
 const ::std::string& PEmployeeRow::state() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PEmployeeRow.State)
  return state_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_state(const ::std::string& value) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PEmployeeRow.State)
}
 void PEmployeeRow::set_state(const char* value) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PEmployeeRow.State)
}
 void PEmployeeRow::set_state(const char* value, size_t size) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PEmployeeRow.State)
}
 ::std::string* PEmployeeRow::mutable_state() {
  set_has_state();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PEmployeeRow.State)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PEmployeeRow::release_state() {
  clear_has_state();
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    set_has_state();
  } else {
    clear_has_state();
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PEmployeeRow.State)
}

// optional string OrgName = 17;
bool PEmployeeRow::has_orgname() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void PEmployeeRow::set_has_orgname() {
  _has_bits_[0] |= 0x00010000u;
}
void PEmployeeRow::clear_has_orgname() {
  _has_bits_[0] &= ~0x00010000u;
}
void PEmployeeRow::clear_orgname() {
  orgname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orgname();
}
 const ::std::string& PEmployeeRow::orgname() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PEmployeeRow.OrgName)
  return orgname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_orgname(const ::std::string& value) {
  set_has_orgname();
  orgname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PEmployeeRow.OrgName)
}
 void PEmployeeRow::set_orgname(const char* value) {
  set_has_orgname();
  orgname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PEmployeeRow.OrgName)
}
 void PEmployeeRow::set_orgname(const char* value, size_t size) {
  set_has_orgname();
  orgname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PEmployeeRow.OrgName)
}
 ::std::string* PEmployeeRow::mutable_orgname() {
  set_has_orgname();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PEmployeeRow.OrgName)
  return orgname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PEmployeeRow::release_orgname() {
  clear_has_orgname();
  return orgname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_allocated_orgname(::std::string* orgname) {
  if (orgname != NULL) {
    set_has_orgname();
  } else {
    clear_has_orgname();
  }
  orgname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orgname);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PEmployeeRow.OrgName)
}

// optional string OrgAddr = 18;
bool PEmployeeRow::has_orgaddr() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void PEmployeeRow::set_has_orgaddr() {
  _has_bits_[0] |= 0x00020000u;
}
void PEmployeeRow::clear_has_orgaddr() {
  _has_bits_[0] &= ~0x00020000u;
}
void PEmployeeRow::clear_orgaddr() {
  orgaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orgaddr();
}
 const ::std::string& PEmployeeRow::orgaddr() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PEmployeeRow.OrgAddr)
  return orgaddr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_orgaddr(const ::std::string& value) {
  set_has_orgaddr();
  orgaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PEmployeeRow.OrgAddr)
}
 void PEmployeeRow::set_orgaddr(const char* value) {
  set_has_orgaddr();
  orgaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PEmployeeRow.OrgAddr)
}
 void PEmployeeRow::set_orgaddr(const char* value, size_t size) {
  set_has_orgaddr();
  orgaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PEmployeeRow.OrgAddr)
}
 ::std::string* PEmployeeRow::mutable_orgaddr() {
  set_has_orgaddr();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PEmployeeRow.OrgAddr)
  return orgaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PEmployeeRow::release_orgaddr() {
  clear_has_orgaddr();
  return orgaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_allocated_orgaddr(::std::string* orgaddr) {
  if (orgaddr != NULL) {
    set_has_orgaddr();
  } else {
    clear_has_orgaddr();
  }
  orgaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orgaddr);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PEmployeeRow.OrgAddr)
}

// optional bool DLS = 21;
bool PEmployeeRow::has_dls() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void PEmployeeRow::set_has_dls() {
  _has_bits_[0] |= 0x00040000u;
}
void PEmployeeRow::clear_has_dls() {
  _has_bits_[0] &= ~0x00040000u;
}
void PEmployeeRow::clear_dls() {
  dls_ = false;
  clear_has_dls();
}
 bool PEmployeeRow::dls() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PEmployeeRow.DLS)
  return dls_;
}
 void PEmployeeRow::set_dls(bool value) {
  set_has_dls();
  dls_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PEmployeeRow.DLS)
}

// optional string photo = 22;
bool PEmployeeRow::has_photo() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void PEmployeeRow::set_has_photo() {
  _has_bits_[0] |= 0x00080000u;
}
void PEmployeeRow::clear_has_photo() {
  _has_bits_[0] &= ~0x00080000u;
}
void PEmployeeRow::clear_photo() {
  photo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_photo();
}
 const ::std::string& PEmployeeRow::photo() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PEmployeeRow.photo)
  return photo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_photo(const ::std::string& value) {
  set_has_photo();
  photo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PEmployeeRow.photo)
}
 void PEmployeeRow::set_photo(const char* value) {
  set_has_photo();
  photo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PEmployeeRow.photo)
}
 void PEmployeeRow::set_photo(const char* value, size_t size) {
  set_has_photo();
  photo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PEmployeeRow.photo)
}
 ::std::string* PEmployeeRow::mutable_photo() {
  set_has_photo();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PEmployeeRow.photo)
  return photo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PEmployeeRow::release_photo() {
  clear_has_photo();
  return photo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PEmployeeRow::set_allocated_photo(::std::string* photo) {
  if (photo != NULL) {
    set_has_photo();
  } else {
    clear_has_photo();
  }
  photo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photo);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PEmployeeRow.photo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PTimeLogRow::kEventFieldNumber;
const int PTimeLogRow::kLogTimeFieldNumber;
const int PTimeLogRow::kSignedFieldNumber;
const int PTimeLogRow::kTLIDFieldNumber;
const int PTimeLogRow::kTypeFieldNumber;
const int PTimeLogRow::kOdoFieldNumber;
const int PTimeLogRow::kLogbookstopidFieldNumber;
const int PTimeLogRow::kEqNoFieldNumber;
const int PTimeLogRow::kLatFieldNumber;
const int PTimeLogRow::kLonFieldNumber;
const int PTimeLogRow::kCommentFieldNumber;
const int PTimeLogRow::kDriverIdFieldNumber;
const int PTimeLogRow::kStateFieldNumber;
const int PTimeLogRow::kBoxIDFieldNumber;
const int PTimeLogRow::kOLTFieldNumber;
const int PTimeLogRow::kEditorFieldNumber;
const int PTimeLogRow::kTZFieldNumber;
const int PTimeLogRow::kDSTFieldNumber;
const int PTimeLogRow::kAddrFieldNumber;
const int PTimeLogRow::kArGeoFieldNumber;
const int PTimeLogRow::kCoDriverFieldNumber;
const int PTimeLogRow::kQualifyRadiusRuleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PTimeLogRow::PTimeLogRow()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PTimeLogRow)
}

void PTimeLogRow::InitAsDefaultInstance() {
}

PTimeLogRow::PTimeLogRow(const PTimeLogRow& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PTimeLogRow)
}

void PTimeLogRow::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_ = 0;
  logtime_ = GOOGLE_LONGLONG(0);
  signed__ = false;
  tlid_ = 0;
  type_ = 0;
  odo_ = 0;
  logbookstopid_ = 0;
  eqno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lat_ = 0;
  lon_ = 0;
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driverid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  boxid_ = 0;
  olt_ = GOOGLE_LONGLONG(0);
  editor_ = 0;
  tz_ = 0;
  dst_ = 0;
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  argeo_ = 0;
  codriver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qualifyradiusrule_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PTimeLogRow::~PTimeLogRow() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PTimeLogRow)
  SharedDtor();
}

void PTimeLogRow::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eqno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driverid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codriver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PTimeLogRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PTimeLogRow& PTimeLogRow::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PTimeLogRow* PTimeLogRow::default_instance_ = NULL;

PTimeLogRow* PTimeLogRow::New(::google::protobuf::Arena* arena) const {
  PTimeLogRow* n = new PTimeLogRow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PTimeLogRow::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PTimeLogRow*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(logtime_, logbookstopid_);
    if (has_eqno()) {
      eqno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(lat_, lon_);
    ZR_(olt_, editor_);
    if (has_comment()) {
      comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_driverid()) {
      driverid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_state()) {
      state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ZR_(tz_, dst_);
    ZR_(argeo_, qualifyradiusrule_);
    if (has_addr()) {
      addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_codriver()) {
      codriver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PTimeLogRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PTimeLogRow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Event = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_)));
          set_has_event();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LogTime;
        break;
      }

      // required int64 LogTime = 2;
      case 2: {
        if (tag == 16) {
         parse_LogTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logtime_)));
          set_has_logtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Signed;
        break;
      }

      // required bool Signed = 3;
      case 3: {
        if (tag == 24) {
         parse_Signed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &signed__)));
          set_has_signed_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TLID;
        break;
      }

      // required int32 TLID = 4;
      case 4: {
        if (tag == 32) {
         parse_TLID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tlid_)));
          set_has_tlid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Type;
        break;
      }

      // required int32 Type = 5;
      case 5: {
        if (tag == 40) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Odo;
        break;
      }

      // optional int32 Odo = 6;
      case 6: {
        if (tag == 48) {
         parse_Odo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &odo_)));
          set_has_odo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Logbookstopid;
        break;
      }

      // required int32 Logbookstopid = 7;
      case 7: {
        if (tag == 56) {
         parse_Logbookstopid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logbookstopid_)));
          set_has_logbookstopid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_EqNo;
        break;
      }

      // optional string EqNo = 8;
      case 8: {
        if (tag == 66) {
         parse_EqNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eqno()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_Lat;
        break;
      }

      // optional float Lat = 9;
      case 9: {
        if (tag == 77) {
         parse_Lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_Lon;
        break;
      }

      // optional float Lon = 10;
      case 10: {
        if (tag == 85) {
         parse_Lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_Comment;
        break;
      }

      // required string Comment = 11;
      case 11: {
        if (tag == 90) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_DriverId;
        break;
      }

      // required string DriverId = 12;
      case 12: {
        if (tag == 98) {
         parse_DriverId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driverid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_State;
        break;
      }

      // optional string State = 13;
      case 13: {
        if (tag == 106) {
         parse_State:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_BoxID;
        break;
      }

      // required int32 BoxID = 14;
      case 14: {
        if (tag == 112) {
         parse_BoxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_OLT;
        break;
      }

      // required int64 OLT = 15;
      case 15: {
        if (tag == 120) {
         parse_OLT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &olt_)));
          set_has_olt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_Editor;
        break;
      }

      // optional int32 Editor = 16;
      case 16: {
        if (tag == 128) {
         parse_Editor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &editor_)));
          set_has_editor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_TZ;
        break;
      }

      // optional float TZ = 17;
      case 17: {
        if (tag == 141) {
         parse_TZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tz_)));
          set_has_tz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_DST;
        break;
      }

      // optional float DST = 18;
      case 18: {
        if (tag == 149) {
         parse_DST:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dst_)));
          set_has_dst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_Addr;
        break;
      }

      // optional string Addr = 19;
      case 19: {
        if (tag == 154) {
         parse_Addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_arGeo;
        break;
      }

      // optional int32 arGeo = 20;
      case 20: {
        if (tag == 160) {
         parse_arGeo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &argeo_)));
          set_has_argeo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_CoDriver;
        break;
      }

      // optional string CoDriver = 21;
      case 21: {
        if (tag == 170) {
         parse_CoDriver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codriver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_QualifyRadiusRule;
        break;
      }

      // optional int32 QualifyRadiusRule = 22;
      case 22: {
        if (tag == 176) {
         parse_QualifyRadiusRule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qualifyradiusrule_)));
          set_has_qualifyradiusrule();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PTimeLogRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PTimeLogRow)
  return false;
#undef DO_
}

void PTimeLogRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PTimeLogRow)
  // required int32 Event = 1;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event(), output);
  }

  // required int64 LogTime = 2;
  if (has_logtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->logtime(), output);
  }

  // required bool Signed = 3;
  if (has_signed_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->signed_(), output);
  }

  // required int32 TLID = 4;
  if (has_tlid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tlid(), output);
  }

  // required int32 Type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // optional int32 Odo = 6;
  if (has_odo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->odo(), output);
  }

  // required int32 Logbookstopid = 7;
  if (has_logbookstopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->logbookstopid(), output);
  }

  // optional string EqNo = 8;
  if (has_eqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->eqno(), output);
  }

  // optional float Lat = 9;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->lat(), output);
  }

  // optional float Lon = 10;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->lon(), output);
  }

  // required string Comment = 11;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->comment(), output);
  }

  // required string DriverId = 12;
  if (has_driverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->driverid(), output);
  }

  // optional string State = 13;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->state(), output);
  }

  // required int32 BoxID = 14;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->boxid(), output);
  }

  // required int64 OLT = 15;
  if (has_olt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->olt(), output);
  }

  // optional int32 Editor = 16;
  if (has_editor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->editor(), output);
  }

  // optional float TZ = 17;
  if (has_tz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->tz(), output);
  }

  // optional float DST = 18;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->dst(), output);
  }

  // optional string Addr = 19;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->addr(), output);
  }

  // optional int32 arGeo = 20;
  if (has_argeo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->argeo(), output);
  }

  // optional string CoDriver = 21;
  if (has_codriver()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->codriver(), output);
  }

  // optional int32 QualifyRadiusRule = 22;
  if (has_qualifyradiusrule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->qualifyradiusrule(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PTimeLogRow)
}

int PTimeLogRow::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_event()) {
    // required int32 Event = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event());
  }

  if (has_logtime()) {
    // required int64 LogTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->logtime());
  }

  if (has_signed_()) {
    // required bool Signed = 3;
    total_size += 1 + 1;
  }

  if (has_tlid()) {
    // required int32 TLID = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tlid());
  }

  if (has_type()) {
    // required int32 Type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_logbookstopid()) {
    // required int32 Logbookstopid = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->logbookstopid());
  }

  if (has_comment()) {
    // required string Comment = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  if (has_driverid()) {
    // required string DriverId = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->driverid());
  }

  if (has_boxid()) {
    // required int32 BoxID = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boxid());
  }

  if (has_olt()) {
    // required int64 OLT = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->olt());
  }

  return total_size;
}
int PTimeLogRow::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00006c5f) ^ 0x00006c5f) == 0) {  // All required fields are present.
    // required int32 Event = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event());

    // required int64 LogTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->logtime());

    // required bool Signed = 3;
    total_size += 1 + 1;

    // required int32 TLID = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tlid());

    // required int32 Type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 Logbookstopid = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->logbookstopid());

    // required string Comment = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());

    // required string DriverId = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->driverid());

    // required int32 BoxID = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boxid());

    // required int64 OLT = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->olt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 160u) {
    // optional int32 Odo = 6;
    if (has_odo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->odo());
    }

    // optional string EqNo = 8;
    if (has_eqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eqno());
    }

  }
  if (_has_bits_[8 / 32] & 37632u) {
    // optional float Lat = 9;
    if (has_lat()) {
      total_size += 1 + 4;
    }

    // optional float Lon = 10;
    if (has_lon()) {
      total_size += 1 + 4;
    }

    // optional string State = 13;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // optional int32 Editor = 16;
    if (has_editor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->editor());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional float TZ = 17;
    if (has_tz()) {
      total_size += 2 + 4;
    }

    // optional float DST = 18;
    if (has_dst()) {
      total_size += 2 + 4;
    }

    // optional string Addr = 19;
    if (has_addr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr());
    }

    // optional int32 arGeo = 20;
    if (has_argeo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->argeo());
    }

    // optional string CoDriver = 21;
    if (has_codriver()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codriver());
    }

    // optional int32 QualifyRadiusRule = 22;
    if (has_qualifyradiusrule()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qualifyradiusrule());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PTimeLogRow::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PTimeLogRow*>(&from));
}

void PTimeLogRow::MergeFrom(const PTimeLogRow& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_logtime()) {
      set_logtime(from.logtime());
    }
    if (from.has_signed_()) {
      set_signed_(from.signed_());
    }
    if (from.has_tlid()) {
      set_tlid(from.tlid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_odo()) {
      set_odo(from.odo());
    }
    if (from.has_logbookstopid()) {
      set_logbookstopid(from.logbookstopid());
    }
    if (from.has_eqno()) {
      set_has_eqno();
      eqno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.eqno_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_comment()) {
      set_has_comment();
      comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
    }
    if (from.has_driverid()) {
      set_has_driverid();
      driverid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driverid_);
    }
    if (from.has_state()) {
      set_has_state();
      state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_olt()) {
      set_olt(from.olt());
    }
    if (from.has_editor()) {
      set_editor(from.editor());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tz()) {
      set_tz(from.tz());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
    if (from.has_addr()) {
      set_has_addr();
      addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
    }
    if (from.has_argeo()) {
      set_argeo(from.argeo());
    }
    if (from.has_codriver()) {
      set_has_codriver();
      codriver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codriver_);
    }
    if (from.has_qualifyradiusrule()) {
      set_qualifyradiusrule(from.qualifyradiusrule());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PTimeLogRow::CopyFrom(const PTimeLogRow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PTimeLogRow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00006c5f) != 0x00006c5f) return false;

  return true;
}

void PTimeLogRow::Swap(PTimeLogRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PTimeLogRow::InternalSwap(PTimeLogRow* other) {
  std::swap(event_, other->event_);
  std::swap(logtime_, other->logtime_);
  std::swap(signed__, other->signed__);
  std::swap(tlid_, other->tlid_);
  std::swap(type_, other->type_);
  std::swap(odo_, other->odo_);
  std::swap(logbookstopid_, other->logbookstopid_);
  eqno_.Swap(&other->eqno_);
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  comment_.Swap(&other->comment_);
  driverid_.Swap(&other->driverid_);
  state_.Swap(&other->state_);
  std::swap(boxid_, other->boxid_);
  std::swap(olt_, other->olt_);
  std::swap(editor_, other->editor_);
  std::swap(tz_, other->tz_);
  std::swap(dst_, other->dst_);
  addr_.Swap(&other->addr_);
  std::swap(argeo_, other->argeo_);
  codriver_.Swap(&other->codriver_);
  std::swap(qualifyradiusrule_, other->qualifyradiusrule_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PTimeLogRow::GetTypeName() const {
  return "my_comm_proto.PTimeLogRow";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PTimeLogRow

// required int32 Event = 1;
bool PTimeLogRow::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PTimeLogRow::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
void PTimeLogRow::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
void PTimeLogRow::clear_event() {
  event_ = 0;
  clear_has_event();
}
 ::google::protobuf::int32 PTimeLogRow::event() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRow.Event)
  return event_;
}
 void PTimeLogRow::set_event(::google::protobuf::int32 value) {
  set_has_event();
  event_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PTimeLogRow.Event)
}

// required int64 LogTime = 2;
bool PTimeLogRow::has_logtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PTimeLogRow::set_has_logtime() {
  _has_bits_[0] |= 0x00000002u;
}
void PTimeLogRow::clear_has_logtime() {
  _has_bits_[0] &= ~0x00000002u;
}
void PTimeLogRow::clear_logtime() {
  logtime_ = GOOGLE_LONGLONG(0);
  clear_has_logtime();
}
 ::google::protobuf::int64 PTimeLogRow::logtime() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRow.LogTime)
  return logtime_;
}
 void PTimeLogRow::set_logtime(::google::protobuf::int64 value) {
  set_has_logtime();
  logtime_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PTimeLogRow.LogTime)
}

// required bool Signed = 3;
bool PTimeLogRow::has_signed_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PTimeLogRow::set_has_signed_() {
  _has_bits_[0] |= 0x00000004u;
}
void PTimeLogRow::clear_has_signed_() {
  _has_bits_[0] &= ~0x00000004u;
}
void PTimeLogRow::clear_signed_() {
  signed__ = false;
  clear_has_signed_();
}
 bool PTimeLogRow::signed_() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRow.Signed)
  return signed__;
}
 void PTimeLogRow::set_signed_(bool value) {
  set_has_signed_();
  signed__ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PTimeLogRow.Signed)
}

// required int32 TLID = 4;
bool PTimeLogRow::has_tlid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PTimeLogRow::set_has_tlid() {
  _has_bits_[0] |= 0x00000008u;
}
void PTimeLogRow::clear_has_tlid() {
  _has_bits_[0] &= ~0x00000008u;
}
void PTimeLogRow::clear_tlid() {
  tlid_ = 0;
  clear_has_tlid();
}
 ::google::protobuf::int32 PTimeLogRow::tlid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRow.TLID)
  return tlid_;
}
 void PTimeLogRow::set_tlid(::google::protobuf::int32 value) {
  set_has_tlid();
  tlid_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PTimeLogRow.TLID)
}

// required int32 Type = 5;
bool PTimeLogRow::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PTimeLogRow::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void PTimeLogRow::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void PTimeLogRow::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::google::protobuf::int32 PTimeLogRow::type() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRow.Type)
  return type_;
}
 void PTimeLogRow::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PTimeLogRow.Type)
}

// optional int32 Odo = 6;
bool PTimeLogRow::has_odo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PTimeLogRow::set_has_odo() {
  _has_bits_[0] |= 0x00000020u;
}
void PTimeLogRow::clear_has_odo() {
  _has_bits_[0] &= ~0x00000020u;
}
void PTimeLogRow::clear_odo() {
  odo_ = 0;
  clear_has_odo();
}
 ::google::protobuf::int32 PTimeLogRow::odo() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRow.Odo)
  return odo_;
}
 void PTimeLogRow::set_odo(::google::protobuf::int32 value) {
  set_has_odo();
  odo_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PTimeLogRow.Odo)
}

// required int32 Logbookstopid = 7;
bool PTimeLogRow::has_logbookstopid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PTimeLogRow::set_has_logbookstopid() {
  _has_bits_[0] |= 0x00000040u;
}
void PTimeLogRow::clear_has_logbookstopid() {
  _has_bits_[0] &= ~0x00000040u;
}
void PTimeLogRow::clear_logbookstopid() {
  logbookstopid_ = 0;
  clear_has_logbookstopid();
}
 ::google::protobuf::int32 PTimeLogRow::logbookstopid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRow.Logbookstopid)
  return logbookstopid_;
}
 void PTimeLogRow::set_logbookstopid(::google::protobuf::int32 value) {
  set_has_logbookstopid();
  logbookstopid_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PTimeLogRow.Logbookstopid)
}

// optional string EqNo = 8;
bool PTimeLogRow::has_eqno() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PTimeLogRow::set_has_eqno() {
  _has_bits_[0] |= 0x00000080u;
}
void PTimeLogRow::clear_has_eqno() {
  _has_bits_[0] &= ~0x00000080u;
}
void PTimeLogRow::clear_eqno() {
  eqno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_eqno();
}
 const ::std::string& PTimeLogRow::eqno() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRow.EqNo)
  return eqno_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PTimeLogRow::set_eqno(const ::std::string& value) {
  set_has_eqno();
  eqno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PTimeLogRow.EqNo)
}
 void PTimeLogRow::set_eqno(const char* value) {
  set_has_eqno();
  eqno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PTimeLogRow.EqNo)
}
 void PTimeLogRow::set_eqno(const char* value, size_t size) {
  set_has_eqno();
  eqno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PTimeLogRow.EqNo)
}
 ::std::string* PTimeLogRow::mutable_eqno() {
  set_has_eqno();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PTimeLogRow.EqNo)
  return eqno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PTimeLogRow::release_eqno() {
  clear_has_eqno();
  return eqno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PTimeLogRow::set_allocated_eqno(::std::string* eqno) {
  if (eqno != NULL) {
    set_has_eqno();
  } else {
    clear_has_eqno();
  }
  eqno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eqno);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PTimeLogRow.EqNo)
}

// optional float Lat = 9;
bool PTimeLogRow::has_lat() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PTimeLogRow::set_has_lat() {
  _has_bits_[0] |= 0x00000100u;
}
void PTimeLogRow::clear_has_lat() {
  _has_bits_[0] &= ~0x00000100u;
}
void PTimeLogRow::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
 float PTimeLogRow::lat() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRow.Lat)
  return lat_;
}
 void PTimeLogRow::set_lat(float value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PTimeLogRow.Lat)
}

// optional float Lon = 10;
bool PTimeLogRow::has_lon() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PTimeLogRow::set_has_lon() {
  _has_bits_[0] |= 0x00000200u;
}
void PTimeLogRow::clear_has_lon() {
  _has_bits_[0] &= ~0x00000200u;
}
void PTimeLogRow::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
 float PTimeLogRow::lon() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRow.Lon)
  return lon_;
}
 void PTimeLogRow::set_lon(float value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PTimeLogRow.Lon)
}

// required string Comment = 11;
bool PTimeLogRow::has_comment() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PTimeLogRow::set_has_comment() {
  _has_bits_[0] |= 0x00000400u;
}
void PTimeLogRow::clear_has_comment() {
  _has_bits_[0] &= ~0x00000400u;
}
void PTimeLogRow::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment();
}
 const ::std::string& PTimeLogRow::comment() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRow.Comment)
  return comment_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PTimeLogRow::set_comment(const ::std::string& value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PTimeLogRow.Comment)
}
 void PTimeLogRow::set_comment(const char* value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PTimeLogRow.Comment)
}
 void PTimeLogRow::set_comment(const char* value, size_t size) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PTimeLogRow.Comment)
}
 ::std::string* PTimeLogRow::mutable_comment() {
  set_has_comment();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PTimeLogRow.Comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PTimeLogRow::release_comment() {
  clear_has_comment();
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PTimeLogRow::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PTimeLogRow.Comment)
}

// required string DriverId = 12;
bool PTimeLogRow::has_driverid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PTimeLogRow::set_has_driverid() {
  _has_bits_[0] |= 0x00000800u;
}
void PTimeLogRow::clear_has_driverid() {
  _has_bits_[0] &= ~0x00000800u;
}
void PTimeLogRow::clear_driverid() {
  driverid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_driverid();
}
 const ::std::string& PTimeLogRow::driverid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRow.DriverId)
  return driverid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PTimeLogRow::set_driverid(const ::std::string& value) {
  set_has_driverid();
  driverid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PTimeLogRow.DriverId)
}
 void PTimeLogRow::set_driverid(const char* value) {
  set_has_driverid();
  driverid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PTimeLogRow.DriverId)
}
 void PTimeLogRow::set_driverid(const char* value, size_t size) {
  set_has_driverid();
  driverid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PTimeLogRow.DriverId)
}
 ::std::string* PTimeLogRow::mutable_driverid() {
  set_has_driverid();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PTimeLogRow.DriverId)
  return driverid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PTimeLogRow::release_driverid() {
  clear_has_driverid();
  return driverid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PTimeLogRow::set_allocated_driverid(::std::string* driverid) {
  if (driverid != NULL) {
    set_has_driverid();
  } else {
    clear_has_driverid();
  }
  driverid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driverid);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PTimeLogRow.DriverId)
}

// optional string State = 13;
bool PTimeLogRow::has_state() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PTimeLogRow::set_has_state() {
  _has_bits_[0] |= 0x00001000u;
}
void PTimeLogRow::clear_has_state() {
  _has_bits_[0] &= ~0x00001000u;
}
void PTimeLogRow::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_state();
}
 const ::std::string& PTimeLogRow::state() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRow.State)
  return state_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PTimeLogRow::set_state(const ::std::string& value) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PTimeLogRow.State)
}
 void PTimeLogRow::set_state(const char* value) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PTimeLogRow.State)
}
 void PTimeLogRow::set_state(const char* value, size_t size) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PTimeLogRow.State)
}
 ::std::string* PTimeLogRow::mutable_state() {
  set_has_state();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PTimeLogRow.State)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PTimeLogRow::release_state() {
  clear_has_state();
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PTimeLogRow::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    set_has_state();
  } else {
    clear_has_state();
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PTimeLogRow.State)
}

// required int32 BoxID = 14;
bool PTimeLogRow::has_boxid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PTimeLogRow::set_has_boxid() {
  _has_bits_[0] |= 0x00002000u;
}
void PTimeLogRow::clear_has_boxid() {
  _has_bits_[0] &= ~0x00002000u;
}
void PTimeLogRow::clear_boxid() {
  boxid_ = 0;
  clear_has_boxid();
}
 ::google::protobuf::int32 PTimeLogRow::boxid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRow.BoxID)
  return boxid_;
}
 void PTimeLogRow::set_boxid(::google::protobuf::int32 value) {
  set_has_boxid();
  boxid_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PTimeLogRow.BoxID)
}

// required int64 OLT = 15;
bool PTimeLogRow::has_olt() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PTimeLogRow::set_has_olt() {
  _has_bits_[0] |= 0x00004000u;
}
void PTimeLogRow::clear_has_olt() {
  _has_bits_[0] &= ~0x00004000u;
}
void PTimeLogRow::clear_olt() {
  olt_ = GOOGLE_LONGLONG(0);
  clear_has_olt();
}
 ::google::protobuf::int64 PTimeLogRow::olt() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRow.OLT)
  return olt_;
}
 void PTimeLogRow::set_olt(::google::protobuf::int64 value) {
  set_has_olt();
  olt_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PTimeLogRow.OLT)
}

// optional int32 Editor = 16;
bool PTimeLogRow::has_editor() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PTimeLogRow::set_has_editor() {
  _has_bits_[0] |= 0x00008000u;
}
void PTimeLogRow::clear_has_editor() {
  _has_bits_[0] &= ~0x00008000u;
}
void PTimeLogRow::clear_editor() {
  editor_ = 0;
  clear_has_editor();
}
 ::google::protobuf::int32 PTimeLogRow::editor() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRow.Editor)
  return editor_;
}
 void PTimeLogRow::set_editor(::google::protobuf::int32 value) {
  set_has_editor();
  editor_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PTimeLogRow.Editor)
}

// optional float TZ = 17;
bool PTimeLogRow::has_tz() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void PTimeLogRow::set_has_tz() {
  _has_bits_[0] |= 0x00010000u;
}
void PTimeLogRow::clear_has_tz() {
  _has_bits_[0] &= ~0x00010000u;
}
void PTimeLogRow::clear_tz() {
  tz_ = 0;
  clear_has_tz();
}
 float PTimeLogRow::tz() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRow.TZ)
  return tz_;
}
 void PTimeLogRow::set_tz(float value) {
  set_has_tz();
  tz_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PTimeLogRow.TZ)
}

// optional float DST = 18;
bool PTimeLogRow::has_dst() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void PTimeLogRow::set_has_dst() {
  _has_bits_[0] |= 0x00020000u;
}
void PTimeLogRow::clear_has_dst() {
  _has_bits_[0] &= ~0x00020000u;
}
void PTimeLogRow::clear_dst() {
  dst_ = 0;
  clear_has_dst();
}
 float PTimeLogRow::dst() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRow.DST)
  return dst_;
}
 void PTimeLogRow::set_dst(float value) {
  set_has_dst();
  dst_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PTimeLogRow.DST)
}

// optional string Addr = 19;
bool PTimeLogRow::has_addr() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void PTimeLogRow::set_has_addr() {
  _has_bits_[0] |= 0x00040000u;
}
void PTimeLogRow::clear_has_addr() {
  _has_bits_[0] &= ~0x00040000u;
}
void PTimeLogRow::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addr();
}
 const ::std::string& PTimeLogRow::addr() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRow.Addr)
  return addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PTimeLogRow::set_addr(const ::std::string& value) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PTimeLogRow.Addr)
}
 void PTimeLogRow::set_addr(const char* value) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PTimeLogRow.Addr)
}
 void PTimeLogRow::set_addr(const char* value, size_t size) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PTimeLogRow.Addr)
}
 ::std::string* PTimeLogRow::mutable_addr() {
  set_has_addr();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PTimeLogRow.Addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PTimeLogRow::release_addr() {
  clear_has_addr();
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PTimeLogRow::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    set_has_addr();
  } else {
    clear_has_addr();
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PTimeLogRow.Addr)
}

// optional int32 arGeo = 20;
bool PTimeLogRow::has_argeo() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void PTimeLogRow::set_has_argeo() {
  _has_bits_[0] |= 0x00080000u;
}
void PTimeLogRow::clear_has_argeo() {
  _has_bits_[0] &= ~0x00080000u;
}
void PTimeLogRow::clear_argeo() {
  argeo_ = 0;
  clear_has_argeo();
}
 ::google::protobuf::int32 PTimeLogRow::argeo() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRow.arGeo)
  return argeo_;
}
 void PTimeLogRow::set_argeo(::google::protobuf::int32 value) {
  set_has_argeo();
  argeo_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PTimeLogRow.arGeo)
}

// optional string CoDriver = 21;
bool PTimeLogRow::has_codriver() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void PTimeLogRow::set_has_codriver() {
  _has_bits_[0] |= 0x00100000u;
}
void PTimeLogRow::clear_has_codriver() {
  _has_bits_[0] &= ~0x00100000u;
}
void PTimeLogRow::clear_codriver() {
  codriver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_codriver();
}
 const ::std::string& PTimeLogRow::codriver() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRow.CoDriver)
  return codriver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PTimeLogRow::set_codriver(const ::std::string& value) {
  set_has_codriver();
  codriver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PTimeLogRow.CoDriver)
}
 void PTimeLogRow::set_codriver(const char* value) {
  set_has_codriver();
  codriver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PTimeLogRow.CoDriver)
}
 void PTimeLogRow::set_codriver(const char* value, size_t size) {
  set_has_codriver();
  codriver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PTimeLogRow.CoDriver)
}
 ::std::string* PTimeLogRow::mutable_codriver() {
  set_has_codriver();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PTimeLogRow.CoDriver)
  return codriver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PTimeLogRow::release_codriver() {
  clear_has_codriver();
  return codriver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PTimeLogRow::set_allocated_codriver(::std::string* codriver) {
  if (codriver != NULL) {
    set_has_codriver();
  } else {
    clear_has_codriver();
  }
  codriver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codriver);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PTimeLogRow.CoDriver)
}

// optional int32 QualifyRadiusRule = 22;
bool PTimeLogRow::has_qualifyradiusrule() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void PTimeLogRow::set_has_qualifyradiusrule() {
  _has_bits_[0] |= 0x00200000u;
}
void PTimeLogRow::clear_has_qualifyradiusrule() {
  _has_bits_[0] &= ~0x00200000u;
}
void PTimeLogRow::clear_qualifyradiusrule() {
  qualifyradiusrule_ = 0;
  clear_has_qualifyradiusrule();
}
 ::google::protobuf::int32 PTimeLogRow::qualifyradiusrule() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRow.QualifyRadiusRule)
  return qualifyradiusrule_;
}
 void PTimeLogRow::set_qualifyradiusrule(::google::protobuf::int32 value) {
  set_has_qualifyradiusrule();
  qualifyradiusrule_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PTimeLogRow.QualifyRadiusRule)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PHosAlertRow::kDtFieldNumber;
const int PHosAlertRow::kOndutyruleviolatedFieldNumber;
const int PHosAlertRow::kDrivingruleviolatedFieldNumber;
const int PHosAlertRow::kAlertTypeFieldNumber;
const int PHosAlertRow::kDrivingAvailableFieldNumber;
const int PHosAlertRow::kOndutyAvailableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PHosAlertRow::PHosAlertRow()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PHosAlertRow)
}

void PHosAlertRow::InitAsDefaultInstance() {
}

PHosAlertRow::PHosAlertRow(const PHosAlertRow& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PHosAlertRow)
}

void PHosAlertRow::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dt_ = GOOGLE_LONGLONG(0);
  ondutyruleviolated_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drivingruleviolated_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alerttype_ = 0;
  drivingavailable_ = 0;
  ondutyavailable_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PHosAlertRow::~PHosAlertRow() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PHosAlertRow)
  SharedDtor();
}

void PHosAlertRow::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ondutyruleviolated_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drivingruleviolated_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PHosAlertRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PHosAlertRow& PHosAlertRow::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PHosAlertRow* PHosAlertRow::default_instance_ = NULL;

PHosAlertRow* PHosAlertRow::New(::google::protobuf::Arena* arena) const {
  PHosAlertRow* n = new PHosAlertRow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PHosAlertRow::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PHosAlertRow*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(alerttype_, ondutyavailable_);
    dt_ = GOOGLE_LONGLONG(0);
    if (has_ondutyruleviolated()) {
      ondutyruleviolated_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_drivingruleviolated()) {
      drivingruleviolated_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PHosAlertRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PHosAlertRow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dt_)));
          set_has_dt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ondutyruleviolated;
        break;
      }

      // required string ondutyruleviolated = 2;
      case 2: {
        if (tag == 18) {
         parse_ondutyruleviolated:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ondutyruleviolated()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_drivingruleviolated;
        break;
      }

      // required string drivingruleviolated = 3;
      case 3: {
        if (tag == 26) {
         parse_drivingruleviolated:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_drivingruleviolated()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_alertType;
        break;
      }

      // required int32 alertType = 4;
      case 4: {
        if (tag == 32) {
         parse_alertType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alerttype_)));
          set_has_alerttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_drivingAvailable;
        break;
      }

      // required int32 drivingAvailable = 5;
      case 5: {
        if (tag == 40) {
         parse_drivingAvailable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drivingavailable_)));
          set_has_drivingavailable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ondutyAvailable;
        break;
      }

      // required int32 ondutyAvailable = 6;
      case 6: {
        if (tag == 48) {
         parse_ondutyAvailable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ondutyavailable_)));
          set_has_ondutyavailable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PHosAlertRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PHosAlertRow)
  return false;
#undef DO_
}

void PHosAlertRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PHosAlertRow)
  // required int64 dt = 1;
  if (has_dt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dt(), output);
  }

  // required string ondutyruleviolated = 2;
  if (has_ondutyruleviolated()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ondutyruleviolated(), output);
  }

  // required string drivingruleviolated = 3;
  if (has_drivingruleviolated()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->drivingruleviolated(), output);
  }

  // required int32 alertType = 4;
  if (has_alerttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->alerttype(), output);
  }

  // required int32 drivingAvailable = 5;
  if (has_drivingavailable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->drivingavailable(), output);
  }

  // required int32 ondutyAvailable = 6;
  if (has_ondutyavailable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ondutyavailable(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PHosAlertRow)
}

int PHosAlertRow::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_dt()) {
    // required int64 dt = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->dt());
  }

  if (has_ondutyruleviolated()) {
    // required string ondutyruleviolated = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ondutyruleviolated());
  }

  if (has_drivingruleviolated()) {
    // required string drivingruleviolated = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->drivingruleviolated());
  }

  if (has_alerttype()) {
    // required int32 alertType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->alerttype());
  }

  if (has_drivingavailable()) {
    // required int32 drivingAvailable = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->drivingavailable());
  }

  if (has_ondutyavailable()) {
    // required int32 ondutyAvailable = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ondutyavailable());
  }

  return total_size;
}
int PHosAlertRow::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int64 dt = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->dt());

    // required string ondutyruleviolated = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ondutyruleviolated());

    // required string drivingruleviolated = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->drivingruleviolated());

    // required int32 alertType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->alerttype());

    // required int32 drivingAvailable = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->drivingavailable());

    // required int32 ondutyAvailable = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ondutyavailable());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PHosAlertRow::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PHosAlertRow*>(&from));
}

void PHosAlertRow::MergeFrom(const PHosAlertRow& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dt()) {
      set_dt(from.dt());
    }
    if (from.has_ondutyruleviolated()) {
      set_has_ondutyruleviolated();
      ondutyruleviolated_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ondutyruleviolated_);
    }
    if (from.has_drivingruleviolated()) {
      set_has_drivingruleviolated();
      drivingruleviolated_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drivingruleviolated_);
    }
    if (from.has_alerttype()) {
      set_alerttype(from.alerttype());
    }
    if (from.has_drivingavailable()) {
      set_drivingavailable(from.drivingavailable());
    }
    if (from.has_ondutyavailable()) {
      set_ondutyavailable(from.ondutyavailable());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PHosAlertRow::CopyFrom(const PHosAlertRow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PHosAlertRow::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PHosAlertRow::Swap(PHosAlertRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PHosAlertRow::InternalSwap(PHosAlertRow* other) {
  std::swap(dt_, other->dt_);
  ondutyruleviolated_.Swap(&other->ondutyruleviolated_);
  drivingruleviolated_.Swap(&other->drivingruleviolated_);
  std::swap(alerttype_, other->alerttype_);
  std::swap(drivingavailable_, other->drivingavailable_);
  std::swap(ondutyavailable_, other->ondutyavailable_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PHosAlertRow::GetTypeName() const {
  return "my_comm_proto.PHosAlertRow";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PHosAlertRow

// required int64 dt = 1;
bool PHosAlertRow::has_dt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PHosAlertRow::set_has_dt() {
  _has_bits_[0] |= 0x00000001u;
}
void PHosAlertRow::clear_has_dt() {
  _has_bits_[0] &= ~0x00000001u;
}
void PHosAlertRow::clear_dt() {
  dt_ = GOOGLE_LONGLONG(0);
  clear_has_dt();
}
 ::google::protobuf::int64 PHosAlertRow::dt() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PHosAlertRow.dt)
  return dt_;
}
 void PHosAlertRow::set_dt(::google::protobuf::int64 value) {
  set_has_dt();
  dt_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PHosAlertRow.dt)
}

// required string ondutyruleviolated = 2;
bool PHosAlertRow::has_ondutyruleviolated() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PHosAlertRow::set_has_ondutyruleviolated() {
  _has_bits_[0] |= 0x00000002u;
}
void PHosAlertRow::clear_has_ondutyruleviolated() {
  _has_bits_[0] &= ~0x00000002u;
}
void PHosAlertRow::clear_ondutyruleviolated() {
  ondutyruleviolated_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ondutyruleviolated();
}
 const ::std::string& PHosAlertRow::ondutyruleviolated() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PHosAlertRow.ondutyruleviolated)
  return ondutyruleviolated_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PHosAlertRow::set_ondutyruleviolated(const ::std::string& value) {
  set_has_ondutyruleviolated();
  ondutyruleviolated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PHosAlertRow.ondutyruleviolated)
}
 void PHosAlertRow::set_ondutyruleviolated(const char* value) {
  set_has_ondutyruleviolated();
  ondutyruleviolated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PHosAlertRow.ondutyruleviolated)
}
 void PHosAlertRow::set_ondutyruleviolated(const char* value, size_t size) {
  set_has_ondutyruleviolated();
  ondutyruleviolated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PHosAlertRow.ondutyruleviolated)
}
 ::std::string* PHosAlertRow::mutable_ondutyruleviolated() {
  set_has_ondutyruleviolated();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PHosAlertRow.ondutyruleviolated)
  return ondutyruleviolated_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PHosAlertRow::release_ondutyruleviolated() {
  clear_has_ondutyruleviolated();
  return ondutyruleviolated_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PHosAlertRow::set_allocated_ondutyruleviolated(::std::string* ondutyruleviolated) {
  if (ondutyruleviolated != NULL) {
    set_has_ondutyruleviolated();
  } else {
    clear_has_ondutyruleviolated();
  }
  ondutyruleviolated_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ondutyruleviolated);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PHosAlertRow.ondutyruleviolated)
}

// required string drivingruleviolated = 3;
bool PHosAlertRow::has_drivingruleviolated() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PHosAlertRow::set_has_drivingruleviolated() {
  _has_bits_[0] |= 0x00000004u;
}
void PHosAlertRow::clear_has_drivingruleviolated() {
  _has_bits_[0] &= ~0x00000004u;
}
void PHosAlertRow::clear_drivingruleviolated() {
  drivingruleviolated_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_drivingruleviolated();
}
 const ::std::string& PHosAlertRow::drivingruleviolated() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PHosAlertRow.drivingruleviolated)
  return drivingruleviolated_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PHosAlertRow::set_drivingruleviolated(const ::std::string& value) {
  set_has_drivingruleviolated();
  drivingruleviolated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PHosAlertRow.drivingruleviolated)
}
 void PHosAlertRow::set_drivingruleviolated(const char* value) {
  set_has_drivingruleviolated();
  drivingruleviolated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PHosAlertRow.drivingruleviolated)
}
 void PHosAlertRow::set_drivingruleviolated(const char* value, size_t size) {
  set_has_drivingruleviolated();
  drivingruleviolated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PHosAlertRow.drivingruleviolated)
}
 ::std::string* PHosAlertRow::mutable_drivingruleviolated() {
  set_has_drivingruleviolated();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PHosAlertRow.drivingruleviolated)
  return drivingruleviolated_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PHosAlertRow::release_drivingruleviolated() {
  clear_has_drivingruleviolated();
  return drivingruleviolated_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PHosAlertRow::set_allocated_drivingruleviolated(::std::string* drivingruleviolated) {
  if (drivingruleviolated != NULL) {
    set_has_drivingruleviolated();
  } else {
    clear_has_drivingruleviolated();
  }
  drivingruleviolated_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drivingruleviolated);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PHosAlertRow.drivingruleviolated)
}

// required int32 alertType = 4;
bool PHosAlertRow::has_alerttype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PHosAlertRow::set_has_alerttype() {
  _has_bits_[0] |= 0x00000008u;
}
void PHosAlertRow::clear_has_alerttype() {
  _has_bits_[0] &= ~0x00000008u;
}
void PHosAlertRow::clear_alerttype() {
  alerttype_ = 0;
  clear_has_alerttype();
}
 ::google::protobuf::int32 PHosAlertRow::alerttype() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PHosAlertRow.alertType)
  return alerttype_;
}
 void PHosAlertRow::set_alerttype(::google::protobuf::int32 value) {
  set_has_alerttype();
  alerttype_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PHosAlertRow.alertType)
}

// required int32 drivingAvailable = 5;
bool PHosAlertRow::has_drivingavailable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PHosAlertRow::set_has_drivingavailable() {
  _has_bits_[0] |= 0x00000010u;
}
void PHosAlertRow::clear_has_drivingavailable() {
  _has_bits_[0] &= ~0x00000010u;
}
void PHosAlertRow::clear_drivingavailable() {
  drivingavailable_ = 0;
  clear_has_drivingavailable();
}
 ::google::protobuf::int32 PHosAlertRow::drivingavailable() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PHosAlertRow.drivingAvailable)
  return drivingavailable_;
}
 void PHosAlertRow::set_drivingavailable(::google::protobuf::int32 value) {
  set_has_drivingavailable();
  drivingavailable_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PHosAlertRow.drivingAvailable)
}

// required int32 ondutyAvailable = 6;
bool PHosAlertRow::has_ondutyavailable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PHosAlertRow::set_has_ondutyavailable() {
  _has_bits_[0] |= 0x00000020u;
}
void PHosAlertRow::clear_has_ondutyavailable() {
  _has_bits_[0] &= ~0x00000020u;
}
void PHosAlertRow::clear_ondutyavailable() {
  ondutyavailable_ = 0;
  clear_has_ondutyavailable();
}
 ::google::protobuf::int32 PHosAlertRow::ondutyavailable() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PHosAlertRow.ondutyAvailable)
  return ondutyavailable_;
}
 void PHosAlertRow::set_ondutyavailable(::google::protobuf::int32 value) {
  set_has_ondutyavailable();
  ondutyavailable_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PHosAlertRow.ondutyAvailable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PRecapRow::kDateFieldNumber;
const int PRecapRow::kTodayFieldNumber;
const int PRecapRow::kCycleTotalFieldNumber;
const int PRecapRow::kCycleAvailableFieldNumber;
const int PRecapRow::kCycleFieldNumber;
const int PRecapRow::kSentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PRecapRow::PRecapRow()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PRecapRow)
}

void PRecapRow::InitAsDefaultInstance() {
}

PRecapRow::PRecapRow(const PRecapRow& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PRecapRow)
}

void PRecapRow::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_ = GOOGLE_LONGLONG(0);
  today_ = 0;
  cycletotal_ = 0;
  cycleavailable_ = 0;
  cycle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sent_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PRecapRow::~PRecapRow() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PRecapRow)
  SharedDtor();
}

void PRecapRow::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cycle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PRecapRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PRecapRow& PRecapRow::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PRecapRow* PRecapRow::default_instance_ = NULL;

PRecapRow* PRecapRow::New(::google::protobuf::Arena* arena) const {
  PRecapRow* n = new PRecapRow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PRecapRow::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PRecapRow*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(date_, cycletotal_);
    ZR_(cycleavailable_, sent_);
    if (has_cycle()) {
      cycle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PRecapRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PRecapRow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 date = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_today;
        break;
      }

      // required int32 today = 2;
      case 2: {
        if (tag == 16) {
         parse_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &today_)));
          set_has_today();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cycleTotal;
        break;
      }

      // required int32 cycleTotal = 3;
      case 3: {
        if (tag == 24) {
         parse_cycleTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cycletotal_)));
          set_has_cycletotal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cycleAvailable;
        break;
      }

      // required int32 cycleAvailable = 4;
      case 4: {
        if (tag == 32) {
         parse_cycleAvailable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cycleavailable_)));
          set_has_cycleavailable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cycle;
        break;
      }

      // required string cycle = 5;
      case 5: {
        if (tag == 42) {
         parse_cycle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cycle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sent;
        break;
      }

      // required bool sent = 6;
      case 6: {
        if (tag == 48) {
         parse_sent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sent_)));
          set_has_sent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PRecapRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PRecapRow)
  return false;
#undef DO_
}

void PRecapRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PRecapRow)
  // required int64 date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->date(), output);
  }

  // required int32 today = 2;
  if (has_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->today(), output);
  }

  // required int32 cycleTotal = 3;
  if (has_cycletotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cycletotal(), output);
  }

  // required int32 cycleAvailable = 4;
  if (has_cycleavailable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cycleavailable(), output);
  }

  // required string cycle = 5;
  if (has_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cycle(), output);
  }

  // required bool sent = 6;
  if (has_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->sent(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PRecapRow)
}

int PRecapRow::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_date()) {
    // required int64 date = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->date());
  }

  if (has_today()) {
    // required int32 today = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->today());
  }

  if (has_cycletotal()) {
    // required int32 cycleTotal = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cycletotal());
  }

  if (has_cycleavailable()) {
    // required int32 cycleAvailable = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cycleavailable());
  }

  if (has_cycle()) {
    // required string cycle = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cycle());
  }

  if (has_sent()) {
    // required bool sent = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
int PRecapRow::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int64 date = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->date());

    // required int32 today = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->today());

    // required int32 cycleTotal = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cycletotal());

    // required int32 cycleAvailable = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cycleavailable());

    // required string cycle = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cycle());

    // required bool sent = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PRecapRow::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PRecapRow*>(&from));
}

void PRecapRow::MergeFrom(const PRecapRow& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_today()) {
      set_today(from.today());
    }
    if (from.has_cycletotal()) {
      set_cycletotal(from.cycletotal());
    }
    if (from.has_cycleavailable()) {
      set_cycleavailable(from.cycleavailable());
    }
    if (from.has_cycle()) {
      set_has_cycle();
      cycle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cycle_);
    }
    if (from.has_sent()) {
      set_sent(from.sent());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PRecapRow::CopyFrom(const PRecapRow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRecapRow::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PRecapRow::Swap(PRecapRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PRecapRow::InternalSwap(PRecapRow* other) {
  std::swap(date_, other->date_);
  std::swap(today_, other->today_);
  std::swap(cycletotal_, other->cycletotal_);
  std::swap(cycleavailable_, other->cycleavailable_);
  cycle_.Swap(&other->cycle_);
  std::swap(sent_, other->sent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PRecapRow::GetTypeName() const {
  return "my_comm_proto.PRecapRow";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PRecapRow

// required int64 date = 1;
bool PRecapRow::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PRecapRow::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
void PRecapRow::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
void PRecapRow::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
  clear_has_date();
}
 ::google::protobuf::int64 PRecapRow::date() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PRecapRow.date)
  return date_;
}
 void PRecapRow::set_date(::google::protobuf::int64 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PRecapRow.date)
}

// required int32 today = 2;
bool PRecapRow::has_today() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PRecapRow::set_has_today() {
  _has_bits_[0] |= 0x00000002u;
}
void PRecapRow::clear_has_today() {
  _has_bits_[0] &= ~0x00000002u;
}
void PRecapRow::clear_today() {
  today_ = 0;
  clear_has_today();
}
 ::google::protobuf::int32 PRecapRow::today() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PRecapRow.today)
  return today_;
}
 void PRecapRow::set_today(::google::protobuf::int32 value) {
  set_has_today();
  today_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PRecapRow.today)
}

// required int32 cycleTotal = 3;
bool PRecapRow::has_cycletotal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PRecapRow::set_has_cycletotal() {
  _has_bits_[0] |= 0x00000004u;
}
void PRecapRow::clear_has_cycletotal() {
  _has_bits_[0] &= ~0x00000004u;
}
void PRecapRow::clear_cycletotal() {
  cycletotal_ = 0;
  clear_has_cycletotal();
}
 ::google::protobuf::int32 PRecapRow::cycletotal() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PRecapRow.cycleTotal)
  return cycletotal_;
}
 void PRecapRow::set_cycletotal(::google::protobuf::int32 value) {
  set_has_cycletotal();
  cycletotal_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PRecapRow.cycleTotal)
}

// required int32 cycleAvailable = 4;
bool PRecapRow::has_cycleavailable() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PRecapRow::set_has_cycleavailable() {
  _has_bits_[0] |= 0x00000008u;
}
void PRecapRow::clear_has_cycleavailable() {
  _has_bits_[0] &= ~0x00000008u;
}
void PRecapRow::clear_cycleavailable() {
  cycleavailable_ = 0;
  clear_has_cycleavailable();
}
 ::google::protobuf::int32 PRecapRow::cycleavailable() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PRecapRow.cycleAvailable)
  return cycleavailable_;
}
 void PRecapRow::set_cycleavailable(::google::protobuf::int32 value) {
  set_has_cycleavailable();
  cycleavailable_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PRecapRow.cycleAvailable)
}

// required string cycle = 5;
bool PRecapRow::has_cycle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PRecapRow::set_has_cycle() {
  _has_bits_[0] |= 0x00000010u;
}
void PRecapRow::clear_has_cycle() {
  _has_bits_[0] &= ~0x00000010u;
}
void PRecapRow::clear_cycle() {
  cycle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cycle();
}
 const ::std::string& PRecapRow::cycle() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PRecapRow.cycle)
  return cycle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PRecapRow::set_cycle(const ::std::string& value) {
  set_has_cycle();
  cycle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PRecapRow.cycle)
}
 void PRecapRow::set_cycle(const char* value) {
  set_has_cycle();
  cycle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PRecapRow.cycle)
}
 void PRecapRow::set_cycle(const char* value, size_t size) {
  set_has_cycle();
  cycle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PRecapRow.cycle)
}
 ::std::string* PRecapRow::mutable_cycle() {
  set_has_cycle();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PRecapRow.cycle)
  return cycle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PRecapRow::release_cycle() {
  clear_has_cycle();
  return cycle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PRecapRow::set_allocated_cycle(::std::string* cycle) {
  if (cycle != NULL) {
    set_has_cycle();
  } else {
    clear_has_cycle();
  }
  cycle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cycle);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PRecapRow.cycle)
}

// required bool sent = 6;
bool PRecapRow::has_sent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PRecapRow::set_has_sent() {
  _has_bits_[0] |= 0x00000020u;
}
void PRecapRow::clear_has_sent() {
  _has_bits_[0] &= ~0x00000020u;
}
void PRecapRow::clear_sent() {
  sent_ = false;
  clear_has_sent();
}
 bool PRecapRow::sent() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PRecapRow.sent)
  return sent_;
}
 void PRecapRow::set_sent(bool value) {
  set_has_sent();
  sent_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PRecapRow.sent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PRuleSelectionHistoryRow::kRSHIDFieldNumber;
const int PRuleSelectionHistoryRow::kRuleidFieldNumber;
const int PRuleSelectionHistoryRow::kSelectTimeFieldNumber;
const int PRuleSelectionHistoryRow::kCountryFieldNumber;
const int PRuleSelectionHistoryRow::kRuleExceptionFieldNumber;
const int PRuleSelectionHistoryRow::kSentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PRuleSelectionHistoryRow::PRuleSelectionHistoryRow()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PRuleSelectionHistoryRow)
}

void PRuleSelectionHistoryRow::InitAsDefaultInstance() {
}

PRuleSelectionHistoryRow::PRuleSelectionHistoryRow(const PRuleSelectionHistoryRow& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PRuleSelectionHistoryRow)
}

void PRuleSelectionHistoryRow::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rshid_ = 0;
  ruleid_ = 0;
  selecttime_ = GOOGLE_LONGLONG(0);
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ruleexception_ = 0;
  sent_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PRuleSelectionHistoryRow::~PRuleSelectionHistoryRow() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PRuleSelectionHistoryRow)
  SharedDtor();
}

void PRuleSelectionHistoryRow::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PRuleSelectionHistoryRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PRuleSelectionHistoryRow& PRuleSelectionHistoryRow::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PRuleSelectionHistoryRow* PRuleSelectionHistoryRow::default_instance_ = NULL;

PRuleSelectionHistoryRow* PRuleSelectionHistoryRow::New(::google::protobuf::Arena* arena) const {
  PRuleSelectionHistoryRow* n = new PRuleSelectionHistoryRow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PRuleSelectionHistoryRow::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PRuleSelectionHistoryRow*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(rshid_, selecttime_);
    ZR_(ruleexception_, sent_);
    if (has_country()) {
      country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PRuleSelectionHistoryRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PRuleSelectionHistoryRow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 RSHID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rshid_)));
          set_has_rshid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Ruleid;
        break;
      }

      // required int32 Ruleid = 2;
      case 2: {
        if (tag == 16) {
         parse_Ruleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ruleid_)));
          set_has_ruleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_selectTime;
        break;
      }

      // required int64 selectTime = 3;
      case 3: {
        if (tag == 24) {
         parse_selectTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &selecttime_)));
          set_has_selecttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_country;
        break;
      }

      // required string country = 4;
      case 4: {
        if (tag == 34) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ruleException;
        break;
      }

      // required int32 ruleException = 5;
      case 5: {
        if (tag == 40) {
         parse_ruleException:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ruleexception_)));
          set_has_ruleexception();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sent;
        break;
      }

      // required bool sent = 6;
      case 6: {
        if (tag == 48) {
         parse_sent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sent_)));
          set_has_sent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PRuleSelectionHistoryRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PRuleSelectionHistoryRow)
  return false;
#undef DO_
}

void PRuleSelectionHistoryRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PRuleSelectionHistoryRow)
  // required int32 RSHID = 1;
  if (has_rshid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rshid(), output);
  }

  // required int32 Ruleid = 2;
  if (has_ruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ruleid(), output);
  }

  // required int64 selectTime = 3;
  if (has_selecttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->selecttime(), output);
  }

  // required string country = 4;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->country(), output);
  }

  // required int32 ruleException = 5;
  if (has_ruleexception()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ruleexception(), output);
  }

  // required bool sent = 6;
  if (has_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->sent(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PRuleSelectionHistoryRow)
}

int PRuleSelectionHistoryRow::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_rshid()) {
    // required int32 RSHID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rshid());
  }

  if (has_ruleid()) {
    // required int32 Ruleid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ruleid());
  }

  if (has_selecttime()) {
    // required int64 selectTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->selecttime());
  }

  if (has_country()) {
    // required string country = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->country());
  }

  if (has_ruleexception()) {
    // required int32 ruleException = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ruleexception());
  }

  if (has_sent()) {
    // required bool sent = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
int PRuleSelectionHistoryRow::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int32 RSHID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rshid());

    // required int32 Ruleid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ruleid());

    // required int64 selectTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->selecttime());

    // required string country = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->country());

    // required int32 ruleException = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ruleexception());

    // required bool sent = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PRuleSelectionHistoryRow::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PRuleSelectionHistoryRow*>(&from));
}

void PRuleSelectionHistoryRow::MergeFrom(const PRuleSelectionHistoryRow& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rshid()) {
      set_rshid(from.rshid());
    }
    if (from.has_ruleid()) {
      set_ruleid(from.ruleid());
    }
    if (from.has_selecttime()) {
      set_selecttime(from.selecttime());
    }
    if (from.has_country()) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (from.has_ruleexception()) {
      set_ruleexception(from.ruleexception());
    }
    if (from.has_sent()) {
      set_sent(from.sent());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PRuleSelectionHistoryRow::CopyFrom(const PRuleSelectionHistoryRow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRuleSelectionHistoryRow::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PRuleSelectionHistoryRow::Swap(PRuleSelectionHistoryRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PRuleSelectionHistoryRow::InternalSwap(PRuleSelectionHistoryRow* other) {
  std::swap(rshid_, other->rshid_);
  std::swap(ruleid_, other->ruleid_);
  std::swap(selecttime_, other->selecttime_);
  country_.Swap(&other->country_);
  std::swap(ruleexception_, other->ruleexception_);
  std::swap(sent_, other->sent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PRuleSelectionHistoryRow::GetTypeName() const {
  return "my_comm_proto.PRuleSelectionHistoryRow";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PRuleSelectionHistoryRow

// required int32 RSHID = 1;
bool PRuleSelectionHistoryRow::has_rshid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PRuleSelectionHistoryRow::set_has_rshid() {
  _has_bits_[0] |= 0x00000001u;
}
void PRuleSelectionHistoryRow::clear_has_rshid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PRuleSelectionHistoryRow::clear_rshid() {
  rshid_ = 0;
  clear_has_rshid();
}
 ::google::protobuf::int32 PRuleSelectionHistoryRow::rshid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PRuleSelectionHistoryRow.RSHID)
  return rshid_;
}
 void PRuleSelectionHistoryRow::set_rshid(::google::protobuf::int32 value) {
  set_has_rshid();
  rshid_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PRuleSelectionHistoryRow.RSHID)
}

// required int32 Ruleid = 2;
bool PRuleSelectionHistoryRow::has_ruleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PRuleSelectionHistoryRow::set_has_ruleid() {
  _has_bits_[0] |= 0x00000002u;
}
void PRuleSelectionHistoryRow::clear_has_ruleid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PRuleSelectionHistoryRow::clear_ruleid() {
  ruleid_ = 0;
  clear_has_ruleid();
}
 ::google::protobuf::int32 PRuleSelectionHistoryRow::ruleid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PRuleSelectionHistoryRow.Ruleid)
  return ruleid_;
}
 void PRuleSelectionHistoryRow::set_ruleid(::google::protobuf::int32 value) {
  set_has_ruleid();
  ruleid_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PRuleSelectionHistoryRow.Ruleid)
}

// required int64 selectTime = 3;
bool PRuleSelectionHistoryRow::has_selecttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PRuleSelectionHistoryRow::set_has_selecttime() {
  _has_bits_[0] |= 0x00000004u;
}
void PRuleSelectionHistoryRow::clear_has_selecttime() {
  _has_bits_[0] &= ~0x00000004u;
}
void PRuleSelectionHistoryRow::clear_selecttime() {
  selecttime_ = GOOGLE_LONGLONG(0);
  clear_has_selecttime();
}
 ::google::protobuf::int64 PRuleSelectionHistoryRow::selecttime() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PRuleSelectionHistoryRow.selectTime)
  return selecttime_;
}
 void PRuleSelectionHistoryRow::set_selecttime(::google::protobuf::int64 value) {
  set_has_selecttime();
  selecttime_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PRuleSelectionHistoryRow.selectTime)
}

// required string country = 4;
bool PRuleSelectionHistoryRow::has_country() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PRuleSelectionHistoryRow::set_has_country() {
  _has_bits_[0] |= 0x00000008u;
}
void PRuleSelectionHistoryRow::clear_has_country() {
  _has_bits_[0] &= ~0x00000008u;
}
void PRuleSelectionHistoryRow::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
 const ::std::string& PRuleSelectionHistoryRow::country() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PRuleSelectionHistoryRow.country)
  return country_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PRuleSelectionHistoryRow::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PRuleSelectionHistoryRow.country)
}
 void PRuleSelectionHistoryRow::set_country(const char* value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PRuleSelectionHistoryRow.country)
}
 void PRuleSelectionHistoryRow::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PRuleSelectionHistoryRow.country)
}
 ::std::string* PRuleSelectionHistoryRow::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PRuleSelectionHistoryRow.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PRuleSelectionHistoryRow::release_country() {
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PRuleSelectionHistoryRow::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PRuleSelectionHistoryRow.country)
}

// required int32 ruleException = 5;
bool PRuleSelectionHistoryRow::has_ruleexception() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PRuleSelectionHistoryRow::set_has_ruleexception() {
  _has_bits_[0] |= 0x00000010u;
}
void PRuleSelectionHistoryRow::clear_has_ruleexception() {
  _has_bits_[0] &= ~0x00000010u;
}
void PRuleSelectionHistoryRow::clear_ruleexception() {
  ruleexception_ = 0;
  clear_has_ruleexception();
}
 ::google::protobuf::int32 PRuleSelectionHistoryRow::ruleexception() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PRuleSelectionHistoryRow.ruleException)
  return ruleexception_;
}
 void PRuleSelectionHistoryRow::set_ruleexception(::google::protobuf::int32 value) {
  set_has_ruleexception();
  ruleexception_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PRuleSelectionHistoryRow.ruleException)
}

// required bool sent = 6;
bool PRuleSelectionHistoryRow::has_sent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PRuleSelectionHistoryRow::set_has_sent() {
  _has_bits_[0] |= 0x00000020u;
}
void PRuleSelectionHistoryRow::clear_has_sent() {
  _has_bits_[0] &= ~0x00000020u;
}
void PRuleSelectionHistoryRow::clear_sent() {
  sent_ = false;
  clear_has_sent();
}
 bool PRuleSelectionHistoryRow::sent() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PRuleSelectionHistoryRow.sent)
  return sent_;
}
 void PRuleSelectionHistoryRow::set_sent(bool value) {
  set_has_sent();
  sent_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PRuleSelectionHistoryRow.sent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PTimeLogRowList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PTimeLogRowList::PTimeLogRowList()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PTimeLogRowList)
}

void PTimeLogRowList::InitAsDefaultInstance() {
}

PTimeLogRowList::PTimeLogRowList(const PTimeLogRowList& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PTimeLogRowList)
}

void PTimeLogRowList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PTimeLogRowList::~PTimeLogRowList() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PTimeLogRowList)
  SharedDtor();
}

void PTimeLogRowList::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PTimeLogRowList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PTimeLogRowList& PTimeLogRowList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PTimeLogRowList* PTimeLogRowList::default_instance_ = NULL;

PTimeLogRowList* PTimeLogRowList::New(::google::protobuf::Arena* arena) const {
  PTimeLogRowList* n = new PTimeLogRowList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PTimeLogRowList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PTimeLogRowList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PTimeLogRowList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .my_comm_proto.PTimeLogRow list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PTimeLogRowList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PTimeLogRowList)
  return false;
#undef DO_
}

void PTimeLogRowList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PTimeLogRowList)
  // repeated .my_comm_proto.PTimeLogRow list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PTimeLogRowList)
}

int PTimeLogRowList::ByteSize() const {
  int total_size = 0;

  // repeated .my_comm_proto.PTimeLogRow list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PTimeLogRowList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PTimeLogRowList*>(&from));
}

void PTimeLogRowList::MergeFrom(const PTimeLogRowList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PTimeLogRowList::CopyFrom(const PTimeLogRowList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PTimeLogRowList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void PTimeLogRowList::Swap(PTimeLogRowList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PTimeLogRowList::InternalSwap(PTimeLogRowList* other) {
  list_.UnsafeArenaSwap(&other->list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PTimeLogRowList::GetTypeName() const {
  return "my_comm_proto.PTimeLogRowList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PTimeLogRowList

// repeated .my_comm_proto.PTimeLogRow list = 1;
int PTimeLogRowList::list_size() const {
  return list_.size();
}
void PTimeLogRowList::clear_list() {
  list_.Clear();
}
const ::my_comm_proto::PTimeLogRow& PTimeLogRowList::list(int index) const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PTimeLogRowList.list)
  return list_.Get(index);
}
::my_comm_proto::PTimeLogRow* PTimeLogRowList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PTimeLogRowList.list)
  return list_.Mutable(index);
}
::my_comm_proto::PTimeLogRow* PTimeLogRowList::add_list() {
  // @@protoc_insertion_point(field_add:my_comm_proto.PTimeLogRowList.list)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::my_comm_proto::PTimeLogRow >*
PTimeLogRowList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:my_comm_proto.PTimeLogRowList.list)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::my_comm_proto::PTimeLogRow >&
PTimeLogRowList::list() const {
  // @@protoc_insertion_point(field_list:my_comm_proto.PTimeLogRowList.list)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PRecapRowList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PRecapRowList::PRecapRowList()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PRecapRowList)
}

void PRecapRowList::InitAsDefaultInstance() {
}

PRecapRowList::PRecapRowList(const PRecapRowList& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PRecapRowList)
}

void PRecapRowList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PRecapRowList::~PRecapRowList() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PRecapRowList)
  SharedDtor();
}

void PRecapRowList::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PRecapRowList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PRecapRowList& PRecapRowList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PRecapRowList* PRecapRowList::default_instance_ = NULL;

PRecapRowList* PRecapRowList::New(::google::protobuf::Arena* arena) const {
  PRecapRowList* n = new PRecapRowList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PRecapRowList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PRecapRowList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PRecapRowList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .my_comm_proto.PRecapRow list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PRecapRowList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PRecapRowList)
  return false;
#undef DO_
}

void PRecapRowList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PRecapRowList)
  // repeated .my_comm_proto.PRecapRow list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PRecapRowList)
}

int PRecapRowList::ByteSize() const {
  int total_size = 0;

  // repeated .my_comm_proto.PRecapRow list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PRecapRowList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PRecapRowList*>(&from));
}

void PRecapRowList::MergeFrom(const PRecapRowList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PRecapRowList::CopyFrom(const PRecapRowList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRecapRowList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void PRecapRowList::Swap(PRecapRowList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PRecapRowList::InternalSwap(PRecapRowList* other) {
  list_.UnsafeArenaSwap(&other->list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PRecapRowList::GetTypeName() const {
  return "my_comm_proto.PRecapRowList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PRecapRowList

// repeated .my_comm_proto.PRecapRow list = 1;
int PRecapRowList::list_size() const {
  return list_.size();
}
void PRecapRowList::clear_list() {
  list_.Clear();
}
const ::my_comm_proto::PRecapRow& PRecapRowList::list(int index) const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PRecapRowList.list)
  return list_.Get(index);
}
::my_comm_proto::PRecapRow* PRecapRowList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PRecapRowList.list)
  return list_.Mutable(index);
}
::my_comm_proto::PRecapRow* PRecapRowList::add_list() {
  // @@protoc_insertion_point(field_add:my_comm_proto.PRecapRowList.list)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::my_comm_proto::PRecapRow >*
PRecapRowList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:my_comm_proto.PRecapRowList.list)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::my_comm_proto::PRecapRow >&
PRecapRowList::list() const {
  // @@protoc_insertion_point(field_list:my_comm_proto.PRecapRowList.list)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PRuleSelectionHistoryRowList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PRuleSelectionHistoryRowList::PRuleSelectionHistoryRowList()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PRuleSelectionHistoryRowList)
}

void PRuleSelectionHistoryRowList::InitAsDefaultInstance() {
}

PRuleSelectionHistoryRowList::PRuleSelectionHistoryRowList(const PRuleSelectionHistoryRowList& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PRuleSelectionHistoryRowList)
}

void PRuleSelectionHistoryRowList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PRuleSelectionHistoryRowList::~PRuleSelectionHistoryRowList() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PRuleSelectionHistoryRowList)
  SharedDtor();
}

void PRuleSelectionHistoryRowList::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PRuleSelectionHistoryRowList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PRuleSelectionHistoryRowList& PRuleSelectionHistoryRowList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PRuleSelectionHistoryRowList* PRuleSelectionHistoryRowList::default_instance_ = NULL;

PRuleSelectionHistoryRowList* PRuleSelectionHistoryRowList::New(::google::protobuf::Arena* arena) const {
  PRuleSelectionHistoryRowList* n = new PRuleSelectionHistoryRowList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PRuleSelectionHistoryRowList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PRuleSelectionHistoryRowList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PRuleSelectionHistoryRowList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .my_comm_proto.PRuleSelectionHistoryRow list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PRuleSelectionHistoryRowList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PRuleSelectionHistoryRowList)
  return false;
#undef DO_
}

void PRuleSelectionHistoryRowList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PRuleSelectionHistoryRowList)
  // repeated .my_comm_proto.PRuleSelectionHistoryRow list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PRuleSelectionHistoryRowList)
}

int PRuleSelectionHistoryRowList::ByteSize() const {
  int total_size = 0;

  // repeated .my_comm_proto.PRuleSelectionHistoryRow list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PRuleSelectionHistoryRowList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PRuleSelectionHistoryRowList*>(&from));
}

void PRuleSelectionHistoryRowList::MergeFrom(const PRuleSelectionHistoryRowList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PRuleSelectionHistoryRowList::CopyFrom(const PRuleSelectionHistoryRowList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRuleSelectionHistoryRowList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void PRuleSelectionHistoryRowList::Swap(PRuleSelectionHistoryRowList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PRuleSelectionHistoryRowList::InternalSwap(PRuleSelectionHistoryRowList* other) {
  list_.UnsafeArenaSwap(&other->list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PRuleSelectionHistoryRowList::GetTypeName() const {
  return "my_comm_proto.PRuleSelectionHistoryRowList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PRuleSelectionHistoryRowList

// repeated .my_comm_proto.PRuleSelectionHistoryRow list = 1;
int PRuleSelectionHistoryRowList::list_size() const {
  return list_.size();
}
void PRuleSelectionHistoryRowList::clear_list() {
  list_.Clear();
}
const ::my_comm_proto::PRuleSelectionHistoryRow& PRuleSelectionHistoryRowList::list(int index) const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PRuleSelectionHistoryRowList.list)
  return list_.Get(index);
}
::my_comm_proto::PRuleSelectionHistoryRow* PRuleSelectionHistoryRowList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PRuleSelectionHistoryRowList.list)
  return list_.Mutable(index);
}
::my_comm_proto::PRuleSelectionHistoryRow* PRuleSelectionHistoryRowList::add_list() {
  // @@protoc_insertion_point(field_add:my_comm_proto.PRuleSelectionHistoryRowList.list)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::my_comm_proto::PRuleSelectionHistoryRow >*
PRuleSelectionHistoryRowList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:my_comm_proto.PRuleSelectionHistoryRowList.list)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::my_comm_proto::PRuleSelectionHistoryRow >&
PRuleSelectionHistoryRowList::list() const {
  // @@protoc_insertion_point(field_list:my_comm_proto.PRuleSelectionHistoryRowList.list)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PInspectionItem::kIIDFieldNumber;
const int PInspectionItem::kCIDFieldNumber;
const int PInspectionItem::kDefectFieldNumber;
const int PInspectionItem::kDefAbbrFieldNumber;
const int PInspectionItem::kDefLevelFieldNumber;
const int PInspectionItem::kCommentsFieldNumber;
const int PInspectionItem::kIsDefectFieldNumber;
const int PInspectionItem::kMediaFilesFieldNumber;
const int PInspectionItem::kAttIDFieldNumber;
const int PInspectionItem::kClrdFieldNumber;
const int PInspectionItem::kClrdIdFieldNumber;
const int PInspectionItem::kClrdNameFieldNumber;
const int PInspectionItem::kHasChildrenFieldNumber;
const int PInspectionItem::kParentIdFieldNumber;
const int PInspectionItem::kChildrenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PInspectionItem::PInspectionItem()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PInspectionItem)
}

void PInspectionItem::InitAsDefaultInstance() {
}

PInspectionItem::PInspectionItem(const PInspectionItem& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PInspectionItem)
}

void PInspectionItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iid_ = 0;
  cid_ = 0;
  defect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defabbr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deflevel_ = 0;
  comments_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isdefect_ = false;
  attid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clrd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clrdid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clrdname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  haschildren_ = 0;
  parentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PInspectionItem::~PInspectionItem() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PInspectionItem)
  SharedDtor();
}

void PInspectionItem::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defabbr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comments_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clrd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clrdid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clrdname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PInspectionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PInspectionItem& PInspectionItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PInspectionItem* PInspectionItem::default_instance_ = NULL;

PInspectionItem* PInspectionItem::New(::google::protobuf::Arena* arena) const {
  PInspectionItem* n = new PInspectionItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PInspectionItem::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PInspectionItem*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(iid_, cid_);
    ZR_(deflevel_, isdefect_);
    if (has_defect()) {
      defect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_defabbr()) {
      defabbr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_comments()) {
      comments_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(haschildren_, parentid_);
    if (has_attid()) {
      attid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_clrd()) {
      clrd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_clrdid()) {
      clrdid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_clrdname()) {
      clrdname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  media_files_.Clear();
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PInspectionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PInspectionItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iid_)));
          set_has_iid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cID;
        break;
      }

      // required int32 cID = 2;
      case 2: {
        if (tag == 16) {
         parse_cID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Defect;
        break;
      }

      // required string Defect = 3;
      case 3: {
        if (tag == 26) {
         parse_Defect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_DefAbbr;
        break;
      }

      // optional string DefAbbr = 4;
      case 4: {
        if (tag == 34) {
         parse_DefAbbr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defabbr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_DefLevel;
        break;
      }

      // optional int32 DefLevel = 5;
      case 5: {
        if (tag == 40) {
         parse_DefLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deflevel_)));
          set_has_deflevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Comments;
        break;
      }

      // optional string Comments = 6;
      case 6: {
        if (tag == 50) {
         parse_Comments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_isDefect;
        break;
      }

      // optional bool isDefect = 7;
      case 7: {
        if (tag == 56) {
         parse_isDefect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefect_)));
          set_has_isdefect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_media_files;
        break;
      }

      // repeated string media_files = 8;
      case 8: {
        if (tag == 66) {
         parse_media_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_media_files()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_media_files;
        if (input->ExpectTag(74)) goto parse_attID;
        break;
      }

      // optional string attID = 9;
      case 9: {
        if (tag == 74) {
         parse_attID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Clrd;
        break;
      }

      // optional string Clrd = 10;
      case 10: {
        if (tag == 82) {
         parse_Clrd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clrd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_ClrdId;
        break;
      }

      // optional string ClrdId = 11;
      case 11: {
        if (tag == 90) {
         parse_ClrdId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clrdid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ClrdName;
        break;
      }

      // optional string ClrdName = 12;
      case 12: {
        if (tag == 98) {
         parse_ClrdName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clrdname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_hasChildren;
        break;
      }

      // optional int32 hasChildren = 13;
      case 13: {
        if (tag == 104) {
         parse_hasChildren:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &haschildren_)));
          set_has_haschildren();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_parentId;
        break;
      }

      // optional int32 parentId = 14;
      case 14: {
        if (tag == 112) {
         parse_parentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parentid_)));
          set_has_parentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_children;
        break;
      }

      // repeated .my_comm_proto.PInspectionItem children = 15;
      case 15: {
        if (tag == 122) {
         parse_children:
          DO_(input->IncrementRecursionDepth());
         parse_loop_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_children;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PInspectionItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PInspectionItem)
  return false;
#undef DO_
}

void PInspectionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PInspectionItem)
  // required int32 iID = 1;
  if (has_iid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iid(), output);
  }

  // required int32 cID = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cid(), output);
  }

  // required string Defect = 3;
  if (has_defect()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->defect(), output);
  }

  // optional string DefAbbr = 4;
  if (has_defabbr()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->defabbr(), output);
  }

  // optional int32 DefLevel = 5;
  if (has_deflevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->deflevel(), output);
  }

  // optional string Comments = 6;
  if (has_comments()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->comments(), output);
  }

  // optional bool isDefect = 7;
  if (has_isdefect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isdefect(), output);
  }

  // repeated string media_files = 8;
  for (int i = 0; i < this->media_files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->media_files(i), output);
  }

  // optional string attID = 9;
  if (has_attid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->attid(), output);
  }

  // optional string Clrd = 10;
  if (has_clrd()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->clrd(), output);
  }

  // optional string ClrdId = 11;
  if (has_clrdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->clrdid(), output);
  }

  // optional string ClrdName = 12;
  if (has_clrdname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->clrdname(), output);
  }

  // optional int32 hasChildren = 13;
  if (has_haschildren()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->haschildren(), output);
  }

  // optional int32 parentId = 14;
  if (has_parentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->parentid(), output);
  }

  // repeated .my_comm_proto.PInspectionItem children = 15;
  for (unsigned int i = 0, n = this->children_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->children(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PInspectionItem)
}

int PInspectionItem::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_iid()) {
    // required int32 iID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->iid());
  }

  if (has_cid()) {
    // required int32 cID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cid());
  }

  if (has_defect()) {
    // required string Defect = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->defect());
  }

  return total_size;
}
int PInspectionItem::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 iID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->iid());

    // required int32 cID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cid());

    // required string Defect = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->defect());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 120u) {
    // optional string DefAbbr = 4;
    if (has_defabbr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defabbr());
    }

    // optional int32 DefLevel = 5;
    if (has_deflevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deflevel());
    }

    // optional string Comments = 6;
    if (has_comments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comments());
    }

    // optional bool isDefect = 7;
    if (has_isdefect()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional string attID = 9;
    if (has_attid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attid());
    }

    // optional string Clrd = 10;
    if (has_clrd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clrd());
    }

    // optional string ClrdId = 11;
    if (has_clrdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clrdid());
    }

    // optional string ClrdName = 12;
    if (has_clrdname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clrdname());
    }

    // optional int32 hasChildren = 13;
    if (has_haschildren()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->haschildren());
    }

    // optional int32 parentId = 14;
    if (has_parentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parentid());
    }

  }
  // repeated string media_files = 8;
  total_size += 1 * this->media_files_size();
  for (int i = 0; i < this->media_files_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->media_files(i));
  }

  // repeated .my_comm_proto.PInspectionItem children = 15;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PInspectionItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PInspectionItem*>(&from));
}

void PInspectionItem::MergeFrom(const PInspectionItem& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  media_files_.MergeFrom(from.media_files_);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iid()) {
      set_iid(from.iid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_defect()) {
      set_has_defect();
      defect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.defect_);
    }
    if (from.has_defabbr()) {
      set_has_defabbr();
      defabbr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.defabbr_);
    }
    if (from.has_deflevel()) {
      set_deflevel(from.deflevel());
    }
    if (from.has_comments()) {
      set_has_comments();
      comments_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comments_);
    }
    if (from.has_isdefect()) {
      set_isdefect(from.isdefect());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attid()) {
      set_has_attid();
      attid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attid_);
    }
    if (from.has_clrd()) {
      set_has_clrd();
      clrd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clrd_);
    }
    if (from.has_clrdid()) {
      set_has_clrdid();
      clrdid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clrdid_);
    }
    if (from.has_clrdname()) {
      set_has_clrdname();
      clrdname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clrdname_);
    }
    if (from.has_haschildren()) {
      set_haschildren(from.haschildren());
    }
    if (from.has_parentid()) {
      set_parentid(from.parentid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PInspectionItem::CopyFrom(const PInspectionItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PInspectionItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->children())) return false;
  return true;
}

void PInspectionItem::Swap(PInspectionItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PInspectionItem::InternalSwap(PInspectionItem* other) {
  std::swap(iid_, other->iid_);
  std::swap(cid_, other->cid_);
  defect_.Swap(&other->defect_);
  defabbr_.Swap(&other->defabbr_);
  std::swap(deflevel_, other->deflevel_);
  comments_.Swap(&other->comments_);
  std::swap(isdefect_, other->isdefect_);
  media_files_.UnsafeArenaSwap(&other->media_files_);
  attid_.Swap(&other->attid_);
  clrd_.Swap(&other->clrd_);
  clrdid_.Swap(&other->clrdid_);
  clrdname_.Swap(&other->clrdname_);
  std::swap(haschildren_, other->haschildren_);
  std::swap(parentid_, other->parentid_);
  children_.UnsafeArenaSwap(&other->children_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PInspectionItem::GetTypeName() const {
  return "my_comm_proto.PInspectionItem";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PInspectionItem

// required int32 iID = 1;
bool PInspectionItem::has_iid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PInspectionItem::set_has_iid() {
  _has_bits_[0] |= 0x00000001u;
}
void PInspectionItem::clear_has_iid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PInspectionItem::clear_iid() {
  iid_ = 0;
  clear_has_iid();
}
 ::google::protobuf::int32 PInspectionItem::iid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionItem.iID)
  return iid_;
}
 void PInspectionItem::set_iid(::google::protobuf::int32 value) {
  set_has_iid();
  iid_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionItem.iID)
}

// required int32 cID = 2;
bool PInspectionItem::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PInspectionItem::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
void PInspectionItem::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PInspectionItem::clear_cid() {
  cid_ = 0;
  clear_has_cid();
}
 ::google::protobuf::int32 PInspectionItem::cid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionItem.cID)
  return cid_;
}
 void PInspectionItem::set_cid(::google::protobuf::int32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionItem.cID)
}

// required string Defect = 3;
bool PInspectionItem::has_defect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PInspectionItem::set_has_defect() {
  _has_bits_[0] |= 0x00000004u;
}
void PInspectionItem::clear_has_defect() {
  _has_bits_[0] &= ~0x00000004u;
}
void PInspectionItem::clear_defect() {
  defect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_defect();
}
 const ::std::string& PInspectionItem::defect() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionItem.Defect)
  return defect_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionItem::set_defect(const ::std::string& value) {
  set_has_defect();
  defect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionItem.Defect)
}
 void PInspectionItem::set_defect(const char* value) {
  set_has_defect();
  defect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PInspectionItem.Defect)
}
 void PInspectionItem::set_defect(const char* value, size_t size) {
  set_has_defect();
  defect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PInspectionItem.Defect)
}
 ::std::string* PInspectionItem::mutable_defect() {
  set_has_defect();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionItem.Defect)
  return defect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PInspectionItem::release_defect() {
  clear_has_defect();
  return defect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionItem::set_allocated_defect(::std::string* defect) {
  if (defect != NULL) {
    set_has_defect();
  } else {
    clear_has_defect();
  }
  defect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), defect);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PInspectionItem.Defect)
}

// optional string DefAbbr = 4;
bool PInspectionItem::has_defabbr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PInspectionItem::set_has_defabbr() {
  _has_bits_[0] |= 0x00000008u;
}
void PInspectionItem::clear_has_defabbr() {
  _has_bits_[0] &= ~0x00000008u;
}
void PInspectionItem::clear_defabbr() {
  defabbr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_defabbr();
}
 const ::std::string& PInspectionItem::defabbr() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionItem.DefAbbr)
  return defabbr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionItem::set_defabbr(const ::std::string& value) {
  set_has_defabbr();
  defabbr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionItem.DefAbbr)
}
 void PInspectionItem::set_defabbr(const char* value) {
  set_has_defabbr();
  defabbr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PInspectionItem.DefAbbr)
}
 void PInspectionItem::set_defabbr(const char* value, size_t size) {
  set_has_defabbr();
  defabbr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PInspectionItem.DefAbbr)
}
 ::std::string* PInspectionItem::mutable_defabbr() {
  set_has_defabbr();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionItem.DefAbbr)
  return defabbr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PInspectionItem::release_defabbr() {
  clear_has_defabbr();
  return defabbr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionItem::set_allocated_defabbr(::std::string* defabbr) {
  if (defabbr != NULL) {
    set_has_defabbr();
  } else {
    clear_has_defabbr();
  }
  defabbr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), defabbr);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PInspectionItem.DefAbbr)
}

// optional int32 DefLevel = 5;
bool PInspectionItem::has_deflevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PInspectionItem::set_has_deflevel() {
  _has_bits_[0] |= 0x00000010u;
}
void PInspectionItem::clear_has_deflevel() {
  _has_bits_[0] &= ~0x00000010u;
}
void PInspectionItem::clear_deflevel() {
  deflevel_ = 0;
  clear_has_deflevel();
}
 ::google::protobuf::int32 PInspectionItem::deflevel() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionItem.DefLevel)
  return deflevel_;
}
 void PInspectionItem::set_deflevel(::google::protobuf::int32 value) {
  set_has_deflevel();
  deflevel_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionItem.DefLevel)
}

// optional string Comments = 6;
bool PInspectionItem::has_comments() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PInspectionItem::set_has_comments() {
  _has_bits_[0] |= 0x00000020u;
}
void PInspectionItem::clear_has_comments() {
  _has_bits_[0] &= ~0x00000020u;
}
void PInspectionItem::clear_comments() {
  comments_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comments();
}
 const ::std::string& PInspectionItem::comments() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionItem.Comments)
  return comments_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionItem::set_comments(const ::std::string& value) {
  set_has_comments();
  comments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionItem.Comments)
}
 void PInspectionItem::set_comments(const char* value) {
  set_has_comments();
  comments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PInspectionItem.Comments)
}
 void PInspectionItem::set_comments(const char* value, size_t size) {
  set_has_comments();
  comments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PInspectionItem.Comments)
}
 ::std::string* PInspectionItem::mutable_comments() {
  set_has_comments();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionItem.Comments)
  return comments_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PInspectionItem::release_comments() {
  clear_has_comments();
  return comments_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionItem::set_allocated_comments(::std::string* comments) {
  if (comments != NULL) {
    set_has_comments();
  } else {
    clear_has_comments();
  }
  comments_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comments);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PInspectionItem.Comments)
}

// optional bool isDefect = 7;
bool PInspectionItem::has_isdefect() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PInspectionItem::set_has_isdefect() {
  _has_bits_[0] |= 0x00000040u;
}
void PInspectionItem::clear_has_isdefect() {
  _has_bits_[0] &= ~0x00000040u;
}
void PInspectionItem::clear_isdefect() {
  isdefect_ = false;
  clear_has_isdefect();
}
 bool PInspectionItem::isdefect() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionItem.isDefect)
  return isdefect_;
}
 void PInspectionItem::set_isdefect(bool value) {
  set_has_isdefect();
  isdefect_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionItem.isDefect)
}

// repeated string media_files = 8;
int PInspectionItem::media_files_size() const {
  return media_files_.size();
}
void PInspectionItem::clear_media_files() {
  media_files_.Clear();
}
 const ::std::string& PInspectionItem::media_files(int index) const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionItem.media_files)
  return media_files_.Get(index);
}
 ::std::string* PInspectionItem::mutable_media_files(int index) {
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionItem.media_files)
  return media_files_.Mutable(index);
}
 void PInspectionItem::set_media_files(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionItem.media_files)
  media_files_.Mutable(index)->assign(value);
}
 void PInspectionItem::set_media_files(int index, const char* value) {
  media_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PInspectionItem.media_files)
}
 void PInspectionItem::set_media_files(int index, const char* value, size_t size) {
  media_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PInspectionItem.media_files)
}
 ::std::string* PInspectionItem::add_media_files() {
  return media_files_.Add();
}
 void PInspectionItem::add_media_files(const ::std::string& value) {
  media_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:my_comm_proto.PInspectionItem.media_files)
}
 void PInspectionItem::add_media_files(const char* value) {
  media_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:my_comm_proto.PInspectionItem.media_files)
}
 void PInspectionItem::add_media_files(const char* value, size_t size) {
  media_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:my_comm_proto.PInspectionItem.media_files)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PInspectionItem::media_files() const {
  // @@protoc_insertion_point(field_list:my_comm_proto.PInspectionItem.media_files)
  return media_files_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PInspectionItem::mutable_media_files() {
  // @@protoc_insertion_point(field_mutable_list:my_comm_proto.PInspectionItem.media_files)
  return &media_files_;
}

// optional string attID = 9;
bool PInspectionItem::has_attid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PInspectionItem::set_has_attid() {
  _has_bits_[0] |= 0x00000100u;
}
void PInspectionItem::clear_has_attid() {
  _has_bits_[0] &= ~0x00000100u;
}
void PInspectionItem::clear_attid() {
  attid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attid();
}
 const ::std::string& PInspectionItem::attid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionItem.attID)
  return attid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionItem::set_attid(const ::std::string& value) {
  set_has_attid();
  attid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionItem.attID)
}
 void PInspectionItem::set_attid(const char* value) {
  set_has_attid();
  attid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PInspectionItem.attID)
}
 void PInspectionItem::set_attid(const char* value, size_t size) {
  set_has_attid();
  attid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PInspectionItem.attID)
}
 ::std::string* PInspectionItem::mutable_attid() {
  set_has_attid();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionItem.attID)
  return attid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PInspectionItem::release_attid() {
  clear_has_attid();
  return attid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionItem::set_allocated_attid(::std::string* attid) {
  if (attid != NULL) {
    set_has_attid();
  } else {
    clear_has_attid();
  }
  attid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attid);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PInspectionItem.attID)
}

// optional string Clrd = 10;
bool PInspectionItem::has_clrd() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PInspectionItem::set_has_clrd() {
  _has_bits_[0] |= 0x00000200u;
}
void PInspectionItem::clear_has_clrd() {
  _has_bits_[0] &= ~0x00000200u;
}
void PInspectionItem::clear_clrd() {
  clrd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clrd();
}
 const ::std::string& PInspectionItem::clrd() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionItem.Clrd)
  return clrd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionItem::set_clrd(const ::std::string& value) {
  set_has_clrd();
  clrd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionItem.Clrd)
}
 void PInspectionItem::set_clrd(const char* value) {
  set_has_clrd();
  clrd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PInspectionItem.Clrd)
}
 void PInspectionItem::set_clrd(const char* value, size_t size) {
  set_has_clrd();
  clrd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PInspectionItem.Clrd)
}
 ::std::string* PInspectionItem::mutable_clrd() {
  set_has_clrd();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionItem.Clrd)
  return clrd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PInspectionItem::release_clrd() {
  clear_has_clrd();
  return clrd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionItem::set_allocated_clrd(::std::string* clrd) {
  if (clrd != NULL) {
    set_has_clrd();
  } else {
    clear_has_clrd();
  }
  clrd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clrd);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PInspectionItem.Clrd)
}

// optional string ClrdId = 11;
bool PInspectionItem::has_clrdid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PInspectionItem::set_has_clrdid() {
  _has_bits_[0] |= 0x00000400u;
}
void PInspectionItem::clear_has_clrdid() {
  _has_bits_[0] &= ~0x00000400u;
}
void PInspectionItem::clear_clrdid() {
  clrdid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clrdid();
}
 const ::std::string& PInspectionItem::clrdid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionItem.ClrdId)
  return clrdid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionItem::set_clrdid(const ::std::string& value) {
  set_has_clrdid();
  clrdid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionItem.ClrdId)
}
 void PInspectionItem::set_clrdid(const char* value) {
  set_has_clrdid();
  clrdid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PInspectionItem.ClrdId)
}
 void PInspectionItem::set_clrdid(const char* value, size_t size) {
  set_has_clrdid();
  clrdid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PInspectionItem.ClrdId)
}
 ::std::string* PInspectionItem::mutable_clrdid() {
  set_has_clrdid();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionItem.ClrdId)
  return clrdid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PInspectionItem::release_clrdid() {
  clear_has_clrdid();
  return clrdid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionItem::set_allocated_clrdid(::std::string* clrdid) {
  if (clrdid != NULL) {
    set_has_clrdid();
  } else {
    clear_has_clrdid();
  }
  clrdid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clrdid);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PInspectionItem.ClrdId)
}

// optional string ClrdName = 12;
bool PInspectionItem::has_clrdname() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PInspectionItem::set_has_clrdname() {
  _has_bits_[0] |= 0x00000800u;
}
void PInspectionItem::clear_has_clrdname() {
  _has_bits_[0] &= ~0x00000800u;
}
void PInspectionItem::clear_clrdname() {
  clrdname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clrdname();
}
 const ::std::string& PInspectionItem::clrdname() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionItem.ClrdName)
  return clrdname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionItem::set_clrdname(const ::std::string& value) {
  set_has_clrdname();
  clrdname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionItem.ClrdName)
}
 void PInspectionItem::set_clrdname(const char* value) {
  set_has_clrdname();
  clrdname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PInspectionItem.ClrdName)
}
 void PInspectionItem::set_clrdname(const char* value, size_t size) {
  set_has_clrdname();
  clrdname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PInspectionItem.ClrdName)
}
 ::std::string* PInspectionItem::mutable_clrdname() {
  set_has_clrdname();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionItem.ClrdName)
  return clrdname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PInspectionItem::release_clrdname() {
  clear_has_clrdname();
  return clrdname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionItem::set_allocated_clrdname(::std::string* clrdname) {
  if (clrdname != NULL) {
    set_has_clrdname();
  } else {
    clear_has_clrdname();
  }
  clrdname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clrdname);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PInspectionItem.ClrdName)
}

// optional int32 hasChildren = 13;
bool PInspectionItem::has_haschildren() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PInspectionItem::set_has_haschildren() {
  _has_bits_[0] |= 0x00001000u;
}
void PInspectionItem::clear_has_haschildren() {
  _has_bits_[0] &= ~0x00001000u;
}
void PInspectionItem::clear_haschildren() {
  haschildren_ = 0;
  clear_has_haschildren();
}
 ::google::protobuf::int32 PInspectionItem::haschildren() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionItem.hasChildren)
  return haschildren_;
}
 void PInspectionItem::set_haschildren(::google::protobuf::int32 value) {
  set_has_haschildren();
  haschildren_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionItem.hasChildren)
}

// optional int32 parentId = 14;
bool PInspectionItem::has_parentid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PInspectionItem::set_has_parentid() {
  _has_bits_[0] |= 0x00002000u;
}
void PInspectionItem::clear_has_parentid() {
  _has_bits_[0] &= ~0x00002000u;
}
void PInspectionItem::clear_parentid() {
  parentid_ = 0;
  clear_has_parentid();
}
 ::google::protobuf::int32 PInspectionItem::parentid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionItem.parentId)
  return parentid_;
}
 void PInspectionItem::set_parentid(::google::protobuf::int32 value) {
  set_has_parentid();
  parentid_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionItem.parentId)
}

// repeated .my_comm_proto.PInspectionItem children = 15;
int PInspectionItem::children_size() const {
  return children_.size();
}
void PInspectionItem::clear_children() {
  children_.Clear();
}
const ::my_comm_proto::PInspectionItem& PInspectionItem::children(int index) const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionItem.children)
  return children_.Get(index);
}
::my_comm_proto::PInspectionItem* PInspectionItem::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionItem.children)
  return children_.Mutable(index);
}
::my_comm_proto::PInspectionItem* PInspectionItem::add_children() {
  // @@protoc_insertion_point(field_add:my_comm_proto.PInspectionItem.children)
  return children_.Add();
}
::google::protobuf::RepeatedPtrField< ::my_comm_proto::PInspectionItem >*
PInspectionItem::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:my_comm_proto.PInspectionItem.children)
  return &children_;
}
const ::google::protobuf::RepeatedPtrField< ::my_comm_proto::PInspectionItem >&
PInspectionItem::children() const {
  // @@protoc_insertion_point(field_list:my_comm_proto.PInspectionItem.children)
  return children_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PInspectionItemList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PInspectionItemList::PInspectionItemList()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PInspectionItemList)
}

void PInspectionItemList::InitAsDefaultInstance() {
}

PInspectionItemList::PInspectionItemList(const PInspectionItemList& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PInspectionItemList)
}

void PInspectionItemList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PInspectionItemList::~PInspectionItemList() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PInspectionItemList)
  SharedDtor();
}

void PInspectionItemList::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PInspectionItemList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PInspectionItemList& PInspectionItemList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PInspectionItemList* PInspectionItemList::default_instance_ = NULL;

PInspectionItemList* PInspectionItemList::New(::google::protobuf::Arena* arena) const {
  PInspectionItemList* n = new PInspectionItemList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PInspectionItemList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PInspectionItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PInspectionItemList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .my_comm_proto.PInspectionItem list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PInspectionItemList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PInspectionItemList)
  return false;
#undef DO_
}

void PInspectionItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PInspectionItemList)
  // repeated .my_comm_proto.PInspectionItem list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PInspectionItemList)
}

int PInspectionItemList::ByteSize() const {
  int total_size = 0;

  // repeated .my_comm_proto.PInspectionItem list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PInspectionItemList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PInspectionItemList*>(&from));
}

void PInspectionItemList::MergeFrom(const PInspectionItemList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PInspectionItemList::CopyFrom(const PInspectionItemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PInspectionItemList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void PInspectionItemList::Swap(PInspectionItemList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PInspectionItemList::InternalSwap(PInspectionItemList* other) {
  list_.UnsafeArenaSwap(&other->list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PInspectionItemList::GetTypeName() const {
  return "my_comm_proto.PInspectionItemList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PInspectionItemList

// repeated .my_comm_proto.PInspectionItem list = 1;
int PInspectionItemList::list_size() const {
  return list_.size();
}
void PInspectionItemList::clear_list() {
  list_.Clear();
}
const ::my_comm_proto::PInspectionItem& PInspectionItemList::list(int index) const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionItemList.list)
  return list_.Get(index);
}
::my_comm_proto::PInspectionItem* PInspectionItemList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionItemList.list)
  return list_.Mutable(index);
}
::my_comm_proto::PInspectionItem* PInspectionItemList::add_list() {
  // @@protoc_insertion_point(field_add:my_comm_proto.PInspectionItemList.list)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::my_comm_proto::PInspectionItem >*
PInspectionItemList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:my_comm_proto.PInspectionItemList.list)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::my_comm_proto::PInspectionItem >&
PInspectionItemList::list() const {
  // @@protoc_insertion_point(field_list:my_comm_proto.PInspectionItemList.list)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PInspectionCategoryRow::kCIDFieldNumber;
const int PInspectionCategoryRow::kDescFieldNumber;
const int PInspectionCategoryRow::kGroupIDFieldNumber;
const int PInspectionCategoryRow::kColorFieldNumber;
const int PInspectionCategoryRow::kBarCodeIDFieldNumber;
const int PInspectionCategoryRow::kBCLocFieldNumber;
const int PInspectionCategoryRow::kItemsFieldNumber;
const int PInspectionCategoryRow::kIsCheckedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PInspectionCategoryRow::PInspectionCategoryRow()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PInspectionCategoryRow)
}

void PInspectionCategoryRow::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  items_ = const_cast< ::my_comm_proto::PInspectionItemList*>(
      ::my_comm_proto::PInspectionItemList::internal_default_instance());
#else
  items_ = const_cast< ::my_comm_proto::PInspectionItemList*>(&::my_comm_proto::PInspectionItemList::default_instance());
#endif
}

PInspectionCategoryRow::PInspectionCategoryRow(const PInspectionCategoryRow& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PInspectionCategoryRow)
}

void PInspectionCategoryRow::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_ = 0;
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_ = 0;
  color_ = 0;
  barcodeid_ = 0;
  bcloc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  items_ = NULL;
  ischecked_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PInspectionCategoryRow::~PInspectionCategoryRow() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PInspectionCategoryRow)
  SharedDtor();
}

void PInspectionCategoryRow::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bcloc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete items_;
  }
}

void PInspectionCategoryRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PInspectionCategoryRow& PInspectionCategoryRow::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PInspectionCategoryRow* PInspectionCategoryRow::default_instance_ = NULL;

PInspectionCategoryRow* PInspectionCategoryRow::New(::google::protobuf::Arena* arena) const {
  PInspectionCategoryRow* n = new PInspectionCategoryRow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PInspectionCategoryRow::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PInspectionCategoryRow*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(cid_, barcodeid_);
    if (has_desc()) {
      desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_bcloc()) {
      bcloc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_items()) {
      if (items_ != NULL) items_->::my_comm_proto::PInspectionItemList::Clear();
    }
    ischecked_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PInspectionCategoryRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PInspectionCategoryRow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // required string desc = 2;
      case 2: {
        if (tag == 18) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_groupID;
        break;
      }

      // required int32 groupID = 3;
      case 3: {
        if (tag == 24) {
         parse_groupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_color;
        break;
      }

      // required int32 color = 4;
      case 4: {
        if (tag == 32) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BarCodeID;
        break;
      }

      // optional int32 BarCodeID = 5;
      case 5: {
        if (tag == 40) {
         parse_BarCodeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &barcodeid_)));
          set_has_barcodeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_BCLoc;
        break;
      }

      // optional string BCLoc = 6;
      case 6: {
        if (tag == 50) {
         parse_BCLoc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bcloc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_items;
        break;
      }

      // optional .my_comm_proto.PInspectionItemList items = 7;
      case 7: {
        if (tag == 58) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_isChecked;
        break;
      }

      // optional int32 isChecked = 8;
      case 8: {
        if (tag == 64) {
         parse_isChecked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ischecked_)));
          set_has_ischecked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PInspectionCategoryRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PInspectionCategoryRow)
  return false;
#undef DO_
}

void PInspectionCategoryRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PInspectionCategoryRow)
  // required int32 cID = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cid(), output);
  }

  // required string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  // required int32 groupID = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->groupid(), output);
  }

  // required int32 color = 4;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->color(), output);
  }

  // optional int32 BarCodeID = 5;
  if (has_barcodeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->barcodeid(), output);
  }

  // optional string BCLoc = 6;
  if (has_bcloc()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->bcloc(), output);
  }

  // optional .my_comm_proto.PInspectionItemList items = 7;
  if (has_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->items_, output);
  }

  // optional int32 isChecked = 8;
  if (has_ischecked()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ischecked(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PInspectionCategoryRow)
}

int PInspectionCategoryRow::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_cid()) {
    // required int32 cID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cid());
  }

  if (has_desc()) {
    // required string desc = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  if (has_groupid()) {
    // required int32 groupID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groupid());
  }

  if (has_color()) {
    // required int32 color = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color());
  }

  return total_size;
}
int PInspectionCategoryRow::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 cID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cid());

    // required string desc = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());

    // required int32 groupID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groupid());

    // required int32 color = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 240u) {
    // optional int32 BarCodeID = 5;
    if (has_barcodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->barcodeid());
    }

    // optional string BCLoc = 6;
    if (has_bcloc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bcloc());
    }

    // optional .my_comm_proto.PInspectionItemList items = 7;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->items_);
    }

    // optional int32 isChecked = 8;
    if (has_ischecked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ischecked());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PInspectionCategoryRow::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PInspectionCategoryRow*>(&from));
}

void PInspectionCategoryRow::MergeFrom(const PInspectionCategoryRow& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_desc()) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_barcodeid()) {
      set_barcodeid(from.barcodeid());
    }
    if (from.has_bcloc()) {
      set_has_bcloc();
      bcloc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bcloc_);
    }
    if (from.has_items()) {
      mutable_items()->::my_comm_proto::PInspectionItemList::MergeFrom(from.items());
    }
    if (from.has_ischecked()) {
      set_ischecked(from.ischecked());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PInspectionCategoryRow::CopyFrom(const PInspectionCategoryRow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PInspectionCategoryRow::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_items()) {
    if (!this->items_->IsInitialized()) return false;
  }
  return true;
}

void PInspectionCategoryRow::Swap(PInspectionCategoryRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PInspectionCategoryRow::InternalSwap(PInspectionCategoryRow* other) {
  std::swap(cid_, other->cid_);
  desc_.Swap(&other->desc_);
  std::swap(groupid_, other->groupid_);
  std::swap(color_, other->color_);
  std::swap(barcodeid_, other->barcodeid_);
  bcloc_.Swap(&other->bcloc_);
  std::swap(items_, other->items_);
  std::swap(ischecked_, other->ischecked_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PInspectionCategoryRow::GetTypeName() const {
  return "my_comm_proto.PInspectionCategoryRow";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PInspectionCategoryRow

// required int32 cID = 1;
bool PInspectionCategoryRow::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PInspectionCategoryRow::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
void PInspectionCategoryRow::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PInspectionCategoryRow::clear_cid() {
  cid_ = 0;
  clear_has_cid();
}
 ::google::protobuf::int32 PInspectionCategoryRow::cid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionCategoryRow.cID)
  return cid_;
}
 void PInspectionCategoryRow::set_cid(::google::protobuf::int32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionCategoryRow.cID)
}

// required string desc = 2;
bool PInspectionCategoryRow::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PInspectionCategoryRow::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
void PInspectionCategoryRow::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
void PInspectionCategoryRow::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
 const ::std::string& PInspectionCategoryRow::desc() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionCategoryRow.desc)
  return desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionCategoryRow::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionCategoryRow.desc)
}
 void PInspectionCategoryRow::set_desc(const char* value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PInspectionCategoryRow.desc)
}
 void PInspectionCategoryRow::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PInspectionCategoryRow.desc)
}
 ::std::string* PInspectionCategoryRow::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionCategoryRow.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PInspectionCategoryRow::release_desc() {
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionCategoryRow::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PInspectionCategoryRow.desc)
}

// required int32 groupID = 3;
bool PInspectionCategoryRow::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PInspectionCategoryRow::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
void PInspectionCategoryRow::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
void PInspectionCategoryRow::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
 ::google::protobuf::int32 PInspectionCategoryRow::groupid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionCategoryRow.groupID)
  return groupid_;
}
 void PInspectionCategoryRow::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionCategoryRow.groupID)
}

// required int32 color = 4;
bool PInspectionCategoryRow::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PInspectionCategoryRow::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
void PInspectionCategoryRow::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
void PInspectionCategoryRow::clear_color() {
  color_ = 0;
  clear_has_color();
}
 ::google::protobuf::int32 PInspectionCategoryRow::color() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionCategoryRow.color)
  return color_;
}
 void PInspectionCategoryRow::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionCategoryRow.color)
}

// optional int32 BarCodeID = 5;
bool PInspectionCategoryRow::has_barcodeid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PInspectionCategoryRow::set_has_barcodeid() {
  _has_bits_[0] |= 0x00000010u;
}
void PInspectionCategoryRow::clear_has_barcodeid() {
  _has_bits_[0] &= ~0x00000010u;
}
void PInspectionCategoryRow::clear_barcodeid() {
  barcodeid_ = 0;
  clear_has_barcodeid();
}
 ::google::protobuf::int32 PInspectionCategoryRow::barcodeid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionCategoryRow.BarCodeID)
  return barcodeid_;
}
 void PInspectionCategoryRow::set_barcodeid(::google::protobuf::int32 value) {
  set_has_barcodeid();
  barcodeid_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionCategoryRow.BarCodeID)
}

// optional string BCLoc = 6;
bool PInspectionCategoryRow::has_bcloc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PInspectionCategoryRow::set_has_bcloc() {
  _has_bits_[0] |= 0x00000020u;
}
void PInspectionCategoryRow::clear_has_bcloc() {
  _has_bits_[0] &= ~0x00000020u;
}
void PInspectionCategoryRow::clear_bcloc() {
  bcloc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bcloc();
}
 const ::std::string& PInspectionCategoryRow::bcloc() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionCategoryRow.BCLoc)
  return bcloc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionCategoryRow::set_bcloc(const ::std::string& value) {
  set_has_bcloc();
  bcloc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionCategoryRow.BCLoc)
}
 void PInspectionCategoryRow::set_bcloc(const char* value) {
  set_has_bcloc();
  bcloc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PInspectionCategoryRow.BCLoc)
}
 void PInspectionCategoryRow::set_bcloc(const char* value, size_t size) {
  set_has_bcloc();
  bcloc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PInspectionCategoryRow.BCLoc)
}
 ::std::string* PInspectionCategoryRow::mutable_bcloc() {
  set_has_bcloc();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionCategoryRow.BCLoc)
  return bcloc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PInspectionCategoryRow::release_bcloc() {
  clear_has_bcloc();
  return bcloc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionCategoryRow::set_allocated_bcloc(::std::string* bcloc) {
  if (bcloc != NULL) {
    set_has_bcloc();
  } else {
    clear_has_bcloc();
  }
  bcloc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bcloc);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PInspectionCategoryRow.BCLoc)
}

// optional .my_comm_proto.PInspectionItemList items = 7;
bool PInspectionCategoryRow::has_items() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PInspectionCategoryRow::set_has_items() {
  _has_bits_[0] |= 0x00000040u;
}
void PInspectionCategoryRow::clear_has_items() {
  _has_bits_[0] &= ~0x00000040u;
}
void PInspectionCategoryRow::clear_items() {
  if (items_ != NULL) items_->::my_comm_proto::PInspectionItemList::Clear();
  clear_has_items();
}
const ::my_comm_proto::PInspectionItemList& PInspectionCategoryRow::items() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionCategoryRow.items)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return items_ != NULL ? *items_ : *default_instance().items_;
#else
  return items_ != NULL ? *items_ : *default_instance_->items_;
#endif
}
::my_comm_proto::PInspectionItemList* PInspectionCategoryRow::mutable_items() {
  set_has_items();
  if (items_ == NULL) {
    items_ = new ::my_comm_proto::PInspectionItemList;
  }
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionCategoryRow.items)
  return items_;
}
::my_comm_proto::PInspectionItemList* PInspectionCategoryRow::release_items() {
  clear_has_items();
  ::my_comm_proto::PInspectionItemList* temp = items_;
  items_ = NULL;
  return temp;
}
void PInspectionCategoryRow::set_allocated_items(::my_comm_proto::PInspectionItemList* items) {
  delete items_;
  items_ = items;
  if (items) {
    set_has_items();
  } else {
    clear_has_items();
  }
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PInspectionCategoryRow.items)
}

// optional int32 isChecked = 8;
bool PInspectionCategoryRow::has_ischecked() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PInspectionCategoryRow::set_has_ischecked() {
  _has_bits_[0] |= 0x00000080u;
}
void PInspectionCategoryRow::clear_has_ischecked() {
  _has_bits_[0] &= ~0x00000080u;
}
void PInspectionCategoryRow::clear_ischecked() {
  ischecked_ = 0;
  clear_has_ischecked();
}
 ::google::protobuf::int32 PInspectionCategoryRow::ischecked() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionCategoryRow.isChecked)
  return ischecked_;
}
 void PInspectionCategoryRow::set_ischecked(::google::protobuf::int32 value) {
  set_has_ischecked();
  ischecked_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionCategoryRow.isChecked)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PInspectionRow::kInsRIDFieldNumber;
const int PInspectionRow::kInsTimeFieldNumber;
const int PInspectionRow::kEqIDFieldNumber;
const int PInspectionRow::kOdoFieldNumber;
const int PInspectionRow::kSignedFieldNumber;
const int PInspectionRow::kDefectsFieldNumber;
const int PInspectionRow::kDrIdFieldNumber;
const int PInspectionRow::kDrNameFieldNumber;
const int PInspectionRow::kInsTypeFieldNumber;
const int PInspectionRow::kCbCatsFieldNumber;
const int PInspectionRow::kCbACatsFieldNumber;
const int PInspectionRow::kBoxIDFieldNumber;
const int PInspectionRow::kTzOfFieldNumber;
const int PInspectionRow::kLatFieldNumber;
const int PInspectionRow::kLonFieldNumber;
const int PInspectionRow::kAttIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PInspectionRow::PInspectionRow()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PInspectionRow)
}

void PInspectionRow::InitAsDefaultInstance() {
}

PInspectionRow::PInspectionRow(const PInspectionRow& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PInspectionRow)
}

void PInspectionRow::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insrid_ = 0;
  instime_ = GOOGLE_LONGLONG(0);
  eqid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  odo_ = 0;
  signed__ = false;
  drid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instype_ = 0;
  cb_cats_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cb_a_cats_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  boxid_ = 0;
  tzof_ = 0;
  lat_ = 0;
  lon_ = 0;
  attid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PInspectionRow::~PInspectionRow() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PInspectionRow)
  SharedDtor();
}

void PInspectionRow::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eqid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cb_cats_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cb_a_cats_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PInspectionRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PInspectionRow& PInspectionRow::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PInspectionRow* PInspectionRow::default_instance_ = NULL;

PInspectionRow* PInspectionRow::New(::google::protobuf::Arena* arena) const {
  PInspectionRow* n = new PInspectionRow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PInspectionRow::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PInspectionRow*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 223u) {
    ZR_(instime_, odo_);
    if (has_eqid()) {
      eqid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    signed__ = false;
    if (has_drid()) {
      drid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_drname()) {
      drname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(boxid_, lon_);
    instype_ = 0;
    if (has_cb_cats()) {
      cb_cats_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cb_a_cats()) {
      cb_a_cats_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_attid()) {
      attid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  defects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PInspectionRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PInspectionRow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 InsRID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &insrid_)));
          set_has_insrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_InsTime;
        break;
      }

      // required int64 InsTime = 2;
      case 2: {
        if (tag == 16) {
         parse_InsTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &instime_)));
          set_has_instime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_EqID;
        break;
      }

      // optional string EqID = 3;
      case 3: {
        if (tag == 26) {
         parse_EqID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eqid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_odo;
        break;
      }

      // optional int32 odo = 4;
      case 4: {
        if (tag == 32) {
         parse_odo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &odo_)));
          set_has_odo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Signed;
        break;
      }

      // required bool Signed = 5;
      case 5: {
        if (tag == 40) {
         parse_Signed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &signed__)));
          set_has_signed_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Defects;
        break;
      }

      // repeated .my_comm_proto.PInspectionItem Defects = 6;
      case 6: {
        if (tag == 50) {
         parse_Defects:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Defects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_defects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_Defects;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(58)) goto parse_drId;
        break;
      }

      // required string drId = 7;
      case 7: {
        if (tag == 58) {
         parse_drId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_drid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_drName;
        break;
      }

      // optional string drName = 8;
      case 8: {
        if (tag == 66) {
         parse_drName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_drname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_InsType;
        break;
      }

      // required int32 InsType = 9;
      case 9: {
        if (tag == 72) {
         parse_InsType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instype_)));
          set_has_instype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_cb_cats;
        break;
      }

      // required string cb_cats = 10;
      case 10: {
        if (tag == 82) {
         parse_cb_cats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cb_cats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_cb_a_cats;
        break;
      }

      // optional string cb_a_cats = 11;
      case 11: {
        if (tag == 90) {
         parse_cb_a_cats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cb_a_cats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_BoxID;
        break;
      }

      // required int32 BoxID = 12;
      case 12: {
        if (tag == 96) {
         parse_BoxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_tzOf;
        break;
      }

      // optional int32 tzOf = 13;
      case 13: {
        if (tag == 104) {
         parse_tzOf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tzof_)));
          set_has_tzof();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_Lat;
        break;
      }

      // optional float Lat = 14;
      case 14: {
        if (tag == 117) {
         parse_Lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_Lon;
        break;
      }

      // optional float Lon = 15;
      case 15: {
        if (tag == 125) {
         parse_Lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_attID;
        break;
      }

      // optional string attID = 16;
      case 16: {
        if (tag == 130) {
         parse_attID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PInspectionRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PInspectionRow)
  return false;
#undef DO_
}

void PInspectionRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PInspectionRow)
  // required int32 InsRID = 1;
  if (has_insrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->insrid(), output);
  }

  // required int64 InsTime = 2;
  if (has_instime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->instime(), output);
  }

  // optional string EqID = 3;
  if (has_eqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->eqid(), output);
  }

  // optional int32 odo = 4;
  if (has_odo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->odo(), output);
  }

  // required bool Signed = 5;
  if (has_signed_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->signed_(), output);
  }

  // repeated .my_comm_proto.PInspectionItem Defects = 6;
  for (unsigned int i = 0, n = this->defects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->defects(i), output);
  }

  // required string drId = 7;
  if (has_drid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->drid(), output);
  }

  // optional string drName = 8;
  if (has_drname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->drname(), output);
  }

  // required int32 InsType = 9;
  if (has_instype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->instype(), output);
  }

  // required string cb_cats = 10;
  if (has_cb_cats()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->cb_cats(), output);
  }

  // optional string cb_a_cats = 11;
  if (has_cb_a_cats()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->cb_a_cats(), output);
  }

  // required int32 BoxID = 12;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->boxid(), output);
  }

  // optional int32 tzOf = 13;
  if (has_tzof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->tzof(), output);
  }

  // optional float Lat = 14;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->lat(), output);
  }

  // optional float Lon = 15;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->lon(), output);
  }

  // optional string attID = 16;
  if (has_attid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->attid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PInspectionRow)
}

int PInspectionRow::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_insrid()) {
    // required int32 InsRID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->insrid());
  }

  if (has_instime()) {
    // required int64 InsTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->instime());
  }

  if (has_signed_()) {
    // required bool Signed = 5;
    total_size += 1 + 1;
  }

  if (has_drid()) {
    // required string drId = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->drid());
  }

  if (has_instype()) {
    // required int32 InsType = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instype());
  }

  if (has_cb_cats()) {
    // required string cb_cats = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cb_cats());
  }

  if (has_boxid()) {
    // required int32 BoxID = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boxid());
  }

  return total_size;
}
int PInspectionRow::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000b53) ^ 0x00000b53) == 0) {  // All required fields are present.
    // required int32 InsRID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->insrid());

    // required int64 InsTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->instime());

    // required bool Signed = 5;
    total_size += 1 + 1;

    // required string drId = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->drid());

    // required int32 InsType = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instype());

    // required string cb_cats = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cb_cats());

    // required int32 BoxID = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boxid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 140u) {
    // optional string EqID = 3;
    if (has_eqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eqid());
    }

    // optional int32 odo = 4;
    if (has_odo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->odo());
    }

    // optional string drName = 8;
    if (has_drname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->drname());
    }

  }
  if (_has_bits_[10 / 32] & 62464u) {
    // optional string cb_a_cats = 11;
    if (has_cb_a_cats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cb_a_cats());
    }

    // optional int32 tzOf = 13;
    if (has_tzof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tzof());
    }

    // optional float Lat = 14;
    if (has_lat()) {
      total_size += 1 + 4;
    }

    // optional float Lon = 15;
    if (has_lon()) {
      total_size += 1 + 4;
    }

    // optional string attID = 16;
    if (has_attid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attid());
    }

  }
  // repeated .my_comm_proto.PInspectionItem Defects = 6;
  total_size += 1 * this->defects_size();
  for (int i = 0; i < this->defects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defects(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PInspectionRow::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PInspectionRow*>(&from));
}

void PInspectionRow::MergeFrom(const PInspectionRow& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  defects_.MergeFrom(from.defects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_insrid()) {
      set_insrid(from.insrid());
    }
    if (from.has_instime()) {
      set_instime(from.instime());
    }
    if (from.has_eqid()) {
      set_has_eqid();
      eqid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.eqid_);
    }
    if (from.has_odo()) {
      set_odo(from.odo());
    }
    if (from.has_signed_()) {
      set_signed_(from.signed_());
    }
    if (from.has_drid()) {
      set_has_drid();
      drid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drid_);
    }
    if (from.has_drname()) {
      set_has_drname();
      drname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drname_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_instype()) {
      set_instype(from.instype());
    }
    if (from.has_cb_cats()) {
      set_has_cb_cats();
      cb_cats_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cb_cats_);
    }
    if (from.has_cb_a_cats()) {
      set_has_cb_a_cats();
      cb_a_cats_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cb_a_cats_);
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_tzof()) {
      set_tzof(from.tzof());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_attid()) {
      set_has_attid();
      attid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PInspectionRow::CopyFrom(const PInspectionRow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PInspectionRow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000b53) != 0x00000b53) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->defects())) return false;
  return true;
}

void PInspectionRow::Swap(PInspectionRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PInspectionRow::InternalSwap(PInspectionRow* other) {
  std::swap(insrid_, other->insrid_);
  std::swap(instime_, other->instime_);
  eqid_.Swap(&other->eqid_);
  std::swap(odo_, other->odo_);
  std::swap(signed__, other->signed__);
  defects_.UnsafeArenaSwap(&other->defects_);
  drid_.Swap(&other->drid_);
  drname_.Swap(&other->drname_);
  std::swap(instype_, other->instype_);
  cb_cats_.Swap(&other->cb_cats_);
  cb_a_cats_.Swap(&other->cb_a_cats_);
  std::swap(boxid_, other->boxid_);
  std::swap(tzof_, other->tzof_);
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  attid_.Swap(&other->attid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PInspectionRow::GetTypeName() const {
  return "my_comm_proto.PInspectionRow";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PInspectionRow

// required int32 InsRID = 1;
bool PInspectionRow::has_insrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PInspectionRow::set_has_insrid() {
  _has_bits_[0] |= 0x00000001u;
}
void PInspectionRow::clear_has_insrid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PInspectionRow::clear_insrid() {
  insrid_ = 0;
  clear_has_insrid();
}
 ::google::protobuf::int32 PInspectionRow::insrid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionRow.InsRID)
  return insrid_;
}
 void PInspectionRow::set_insrid(::google::protobuf::int32 value) {
  set_has_insrid();
  insrid_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionRow.InsRID)
}

// required int64 InsTime = 2;
bool PInspectionRow::has_instime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PInspectionRow::set_has_instime() {
  _has_bits_[0] |= 0x00000002u;
}
void PInspectionRow::clear_has_instime() {
  _has_bits_[0] &= ~0x00000002u;
}
void PInspectionRow::clear_instime() {
  instime_ = GOOGLE_LONGLONG(0);
  clear_has_instime();
}
 ::google::protobuf::int64 PInspectionRow::instime() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionRow.InsTime)
  return instime_;
}
 void PInspectionRow::set_instime(::google::protobuf::int64 value) {
  set_has_instime();
  instime_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionRow.InsTime)
}

// optional string EqID = 3;
bool PInspectionRow::has_eqid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PInspectionRow::set_has_eqid() {
  _has_bits_[0] |= 0x00000004u;
}
void PInspectionRow::clear_has_eqid() {
  _has_bits_[0] &= ~0x00000004u;
}
void PInspectionRow::clear_eqid() {
  eqid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_eqid();
}
 const ::std::string& PInspectionRow::eqid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionRow.EqID)
  return eqid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionRow::set_eqid(const ::std::string& value) {
  set_has_eqid();
  eqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionRow.EqID)
}
 void PInspectionRow::set_eqid(const char* value) {
  set_has_eqid();
  eqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PInspectionRow.EqID)
}
 void PInspectionRow::set_eqid(const char* value, size_t size) {
  set_has_eqid();
  eqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PInspectionRow.EqID)
}
 ::std::string* PInspectionRow::mutable_eqid() {
  set_has_eqid();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionRow.EqID)
  return eqid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PInspectionRow::release_eqid() {
  clear_has_eqid();
  return eqid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionRow::set_allocated_eqid(::std::string* eqid) {
  if (eqid != NULL) {
    set_has_eqid();
  } else {
    clear_has_eqid();
  }
  eqid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eqid);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PInspectionRow.EqID)
}

// optional int32 odo = 4;
bool PInspectionRow::has_odo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PInspectionRow::set_has_odo() {
  _has_bits_[0] |= 0x00000008u;
}
void PInspectionRow::clear_has_odo() {
  _has_bits_[0] &= ~0x00000008u;
}
void PInspectionRow::clear_odo() {
  odo_ = 0;
  clear_has_odo();
}
 ::google::protobuf::int32 PInspectionRow::odo() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionRow.odo)
  return odo_;
}
 void PInspectionRow::set_odo(::google::protobuf::int32 value) {
  set_has_odo();
  odo_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionRow.odo)
}

// required bool Signed = 5;
bool PInspectionRow::has_signed_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PInspectionRow::set_has_signed_() {
  _has_bits_[0] |= 0x00000010u;
}
void PInspectionRow::clear_has_signed_() {
  _has_bits_[0] &= ~0x00000010u;
}
void PInspectionRow::clear_signed_() {
  signed__ = false;
  clear_has_signed_();
}
 bool PInspectionRow::signed_() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionRow.Signed)
  return signed__;
}
 void PInspectionRow::set_signed_(bool value) {
  set_has_signed_();
  signed__ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionRow.Signed)
}

// repeated .my_comm_proto.PInspectionItem Defects = 6;
int PInspectionRow::defects_size() const {
  return defects_.size();
}
void PInspectionRow::clear_defects() {
  defects_.Clear();
}
const ::my_comm_proto::PInspectionItem& PInspectionRow::defects(int index) const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionRow.Defects)
  return defects_.Get(index);
}
::my_comm_proto::PInspectionItem* PInspectionRow::mutable_defects(int index) {
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionRow.Defects)
  return defects_.Mutable(index);
}
::my_comm_proto::PInspectionItem* PInspectionRow::add_defects() {
  // @@protoc_insertion_point(field_add:my_comm_proto.PInspectionRow.Defects)
  return defects_.Add();
}
::google::protobuf::RepeatedPtrField< ::my_comm_proto::PInspectionItem >*
PInspectionRow::mutable_defects() {
  // @@protoc_insertion_point(field_mutable_list:my_comm_proto.PInspectionRow.Defects)
  return &defects_;
}
const ::google::protobuf::RepeatedPtrField< ::my_comm_proto::PInspectionItem >&
PInspectionRow::defects() const {
  // @@protoc_insertion_point(field_list:my_comm_proto.PInspectionRow.Defects)
  return defects_;
}

// required string drId = 7;
bool PInspectionRow::has_drid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PInspectionRow::set_has_drid() {
  _has_bits_[0] |= 0x00000040u;
}
void PInspectionRow::clear_has_drid() {
  _has_bits_[0] &= ~0x00000040u;
}
void PInspectionRow::clear_drid() {
  drid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_drid();
}
 const ::std::string& PInspectionRow::drid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionRow.drId)
  return drid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionRow::set_drid(const ::std::string& value) {
  set_has_drid();
  drid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionRow.drId)
}
 void PInspectionRow::set_drid(const char* value) {
  set_has_drid();
  drid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PInspectionRow.drId)
}
 void PInspectionRow::set_drid(const char* value, size_t size) {
  set_has_drid();
  drid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PInspectionRow.drId)
}
 ::std::string* PInspectionRow::mutable_drid() {
  set_has_drid();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionRow.drId)
  return drid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PInspectionRow::release_drid() {
  clear_has_drid();
  return drid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionRow::set_allocated_drid(::std::string* drid) {
  if (drid != NULL) {
    set_has_drid();
  } else {
    clear_has_drid();
  }
  drid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drid);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PInspectionRow.drId)
}

// optional string drName = 8;
bool PInspectionRow::has_drname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PInspectionRow::set_has_drname() {
  _has_bits_[0] |= 0x00000080u;
}
void PInspectionRow::clear_has_drname() {
  _has_bits_[0] &= ~0x00000080u;
}
void PInspectionRow::clear_drname() {
  drname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_drname();
}
 const ::std::string& PInspectionRow::drname() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionRow.drName)
  return drname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionRow::set_drname(const ::std::string& value) {
  set_has_drname();
  drname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionRow.drName)
}
 void PInspectionRow::set_drname(const char* value) {
  set_has_drname();
  drname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PInspectionRow.drName)
}
 void PInspectionRow::set_drname(const char* value, size_t size) {
  set_has_drname();
  drname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PInspectionRow.drName)
}
 ::std::string* PInspectionRow::mutable_drname() {
  set_has_drname();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionRow.drName)
  return drname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PInspectionRow::release_drname() {
  clear_has_drname();
  return drname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionRow::set_allocated_drname(::std::string* drname) {
  if (drname != NULL) {
    set_has_drname();
  } else {
    clear_has_drname();
  }
  drname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drname);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PInspectionRow.drName)
}

// required int32 InsType = 9;
bool PInspectionRow::has_instype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PInspectionRow::set_has_instype() {
  _has_bits_[0] |= 0x00000100u;
}
void PInspectionRow::clear_has_instype() {
  _has_bits_[0] &= ~0x00000100u;
}
void PInspectionRow::clear_instype() {
  instype_ = 0;
  clear_has_instype();
}
 ::google::protobuf::int32 PInspectionRow::instype() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionRow.InsType)
  return instype_;
}
 void PInspectionRow::set_instype(::google::protobuf::int32 value) {
  set_has_instype();
  instype_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionRow.InsType)
}

// required string cb_cats = 10;
bool PInspectionRow::has_cb_cats() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PInspectionRow::set_has_cb_cats() {
  _has_bits_[0] |= 0x00000200u;
}
void PInspectionRow::clear_has_cb_cats() {
  _has_bits_[0] &= ~0x00000200u;
}
void PInspectionRow::clear_cb_cats() {
  cb_cats_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cb_cats();
}
 const ::std::string& PInspectionRow::cb_cats() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionRow.cb_cats)
  return cb_cats_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionRow::set_cb_cats(const ::std::string& value) {
  set_has_cb_cats();
  cb_cats_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionRow.cb_cats)
}
 void PInspectionRow::set_cb_cats(const char* value) {
  set_has_cb_cats();
  cb_cats_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PInspectionRow.cb_cats)
}
 void PInspectionRow::set_cb_cats(const char* value, size_t size) {
  set_has_cb_cats();
  cb_cats_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PInspectionRow.cb_cats)
}
 ::std::string* PInspectionRow::mutable_cb_cats() {
  set_has_cb_cats();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionRow.cb_cats)
  return cb_cats_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PInspectionRow::release_cb_cats() {
  clear_has_cb_cats();
  return cb_cats_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionRow::set_allocated_cb_cats(::std::string* cb_cats) {
  if (cb_cats != NULL) {
    set_has_cb_cats();
  } else {
    clear_has_cb_cats();
  }
  cb_cats_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cb_cats);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PInspectionRow.cb_cats)
}

// optional string cb_a_cats = 11;
bool PInspectionRow::has_cb_a_cats() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PInspectionRow::set_has_cb_a_cats() {
  _has_bits_[0] |= 0x00000400u;
}
void PInspectionRow::clear_has_cb_a_cats() {
  _has_bits_[0] &= ~0x00000400u;
}
void PInspectionRow::clear_cb_a_cats() {
  cb_a_cats_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cb_a_cats();
}
 const ::std::string& PInspectionRow::cb_a_cats() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionRow.cb_a_cats)
  return cb_a_cats_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionRow::set_cb_a_cats(const ::std::string& value) {
  set_has_cb_a_cats();
  cb_a_cats_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionRow.cb_a_cats)
}
 void PInspectionRow::set_cb_a_cats(const char* value) {
  set_has_cb_a_cats();
  cb_a_cats_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PInspectionRow.cb_a_cats)
}
 void PInspectionRow::set_cb_a_cats(const char* value, size_t size) {
  set_has_cb_a_cats();
  cb_a_cats_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PInspectionRow.cb_a_cats)
}
 ::std::string* PInspectionRow::mutable_cb_a_cats() {
  set_has_cb_a_cats();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionRow.cb_a_cats)
  return cb_a_cats_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PInspectionRow::release_cb_a_cats() {
  clear_has_cb_a_cats();
  return cb_a_cats_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionRow::set_allocated_cb_a_cats(::std::string* cb_a_cats) {
  if (cb_a_cats != NULL) {
    set_has_cb_a_cats();
  } else {
    clear_has_cb_a_cats();
  }
  cb_a_cats_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cb_a_cats);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PInspectionRow.cb_a_cats)
}

// required int32 BoxID = 12;
bool PInspectionRow::has_boxid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PInspectionRow::set_has_boxid() {
  _has_bits_[0] |= 0x00000800u;
}
void PInspectionRow::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000800u;
}
void PInspectionRow::clear_boxid() {
  boxid_ = 0;
  clear_has_boxid();
}
 ::google::protobuf::int32 PInspectionRow::boxid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionRow.BoxID)
  return boxid_;
}
 void PInspectionRow::set_boxid(::google::protobuf::int32 value) {
  set_has_boxid();
  boxid_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionRow.BoxID)
}

// optional int32 tzOf = 13;
bool PInspectionRow::has_tzof() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PInspectionRow::set_has_tzof() {
  _has_bits_[0] |= 0x00001000u;
}
void PInspectionRow::clear_has_tzof() {
  _has_bits_[0] &= ~0x00001000u;
}
void PInspectionRow::clear_tzof() {
  tzof_ = 0;
  clear_has_tzof();
}
 ::google::protobuf::int32 PInspectionRow::tzof() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionRow.tzOf)
  return tzof_;
}
 void PInspectionRow::set_tzof(::google::protobuf::int32 value) {
  set_has_tzof();
  tzof_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionRow.tzOf)
}

// optional float Lat = 14;
bool PInspectionRow::has_lat() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PInspectionRow::set_has_lat() {
  _has_bits_[0] |= 0x00002000u;
}
void PInspectionRow::clear_has_lat() {
  _has_bits_[0] &= ~0x00002000u;
}
void PInspectionRow::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
 float PInspectionRow::lat() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionRow.Lat)
  return lat_;
}
 void PInspectionRow::set_lat(float value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionRow.Lat)
}

// optional float Lon = 15;
bool PInspectionRow::has_lon() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PInspectionRow::set_has_lon() {
  _has_bits_[0] |= 0x00004000u;
}
void PInspectionRow::clear_has_lon() {
  _has_bits_[0] &= ~0x00004000u;
}
void PInspectionRow::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
 float PInspectionRow::lon() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionRow.Lon)
  return lon_;
}
 void PInspectionRow::set_lon(float value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionRow.Lon)
}

// optional string attID = 16;
bool PInspectionRow::has_attid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PInspectionRow::set_has_attid() {
  _has_bits_[0] |= 0x00008000u;
}
void PInspectionRow::clear_has_attid() {
  _has_bits_[0] &= ~0x00008000u;
}
void PInspectionRow::clear_attid() {
  attid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attid();
}
 const ::std::string& PInspectionRow::attid() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionRow.attID)
  return attid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionRow::set_attid(const ::std::string& value) {
  set_has_attid();
  attid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PInspectionRow.attID)
}
 void PInspectionRow::set_attid(const char* value) {
  set_has_attid();
  attid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PInspectionRow.attID)
}
 void PInspectionRow::set_attid(const char* value, size_t size) {
  set_has_attid();
  attid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PInspectionRow.attID)
}
 ::std::string* PInspectionRow::mutable_attid() {
  set_has_attid();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionRow.attID)
  return attid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PInspectionRow::release_attid() {
  clear_has_attid();
  return attid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PInspectionRow::set_allocated_attid(::std::string* attid) {
  if (attid != NULL) {
    set_has_attid();
  } else {
    clear_has_attid();
  }
  attid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attid);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PInspectionRow.attID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PInspectionRowList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PInspectionRowList::PInspectionRowList()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PInspectionRowList)
}

void PInspectionRowList::InitAsDefaultInstance() {
}

PInspectionRowList::PInspectionRowList(const PInspectionRowList& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PInspectionRowList)
}

void PInspectionRowList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PInspectionRowList::~PInspectionRowList() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PInspectionRowList)
  SharedDtor();
}

void PInspectionRowList::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PInspectionRowList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PInspectionRowList& PInspectionRowList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PInspectionRowList* PInspectionRowList::default_instance_ = NULL;

PInspectionRowList* PInspectionRowList::New(::google::protobuf::Arena* arena) const {
  PInspectionRowList* n = new PInspectionRowList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PInspectionRowList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PInspectionRowList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PInspectionRowList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .my_comm_proto.PInspectionRow list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PInspectionRowList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PInspectionRowList)
  return false;
#undef DO_
}

void PInspectionRowList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PInspectionRowList)
  // repeated .my_comm_proto.PInspectionRow list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PInspectionRowList)
}

int PInspectionRowList::ByteSize() const {
  int total_size = 0;

  // repeated .my_comm_proto.PInspectionRow list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PInspectionRowList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PInspectionRowList*>(&from));
}

void PInspectionRowList::MergeFrom(const PInspectionRowList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PInspectionRowList::CopyFrom(const PInspectionRowList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PInspectionRowList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void PInspectionRowList::Swap(PInspectionRowList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PInspectionRowList::InternalSwap(PInspectionRowList* other) {
  list_.UnsafeArenaSwap(&other->list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PInspectionRowList::GetTypeName() const {
  return "my_comm_proto.PInspectionRowList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PInspectionRowList

// repeated .my_comm_proto.PInspectionRow list = 1;
int PInspectionRowList::list_size() const {
  return list_.size();
}
void PInspectionRowList::clear_list() {
  list_.Clear();
}
const ::my_comm_proto::PInspectionRow& PInspectionRowList::list(int index) const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionRowList.list)
  return list_.Get(index);
}
::my_comm_proto::PInspectionRow* PInspectionRowList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionRowList.list)
  return list_.Mutable(index);
}
::my_comm_proto::PInspectionRow* PInspectionRowList::add_list() {
  // @@protoc_insertion_point(field_add:my_comm_proto.PInspectionRowList.list)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::my_comm_proto::PInspectionRow >*
PInspectionRowList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:my_comm_proto.PInspectionRowList.list)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::my_comm_proto::PInspectionRow >&
PInspectionRowList::list() const {
  // @@protoc_insertion_point(field_list:my_comm_proto.PInspectionRowList.list)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PInspectionCategoryRowList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PInspectionCategoryRowList::PInspectionCategoryRowList()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PInspectionCategoryRowList)
}

void PInspectionCategoryRowList::InitAsDefaultInstance() {
}

PInspectionCategoryRowList::PInspectionCategoryRowList(const PInspectionCategoryRowList& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PInspectionCategoryRowList)
}

void PInspectionCategoryRowList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PInspectionCategoryRowList::~PInspectionCategoryRowList() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PInspectionCategoryRowList)
  SharedDtor();
}

void PInspectionCategoryRowList::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PInspectionCategoryRowList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PInspectionCategoryRowList& PInspectionCategoryRowList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PInspectionCategoryRowList* PInspectionCategoryRowList::default_instance_ = NULL;

PInspectionCategoryRowList* PInspectionCategoryRowList::New(::google::protobuf::Arena* arena) const {
  PInspectionCategoryRowList* n = new PInspectionCategoryRowList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PInspectionCategoryRowList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PInspectionCategoryRowList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PInspectionCategoryRowList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .my_comm_proto.PInspectionCategoryRow list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PInspectionCategoryRowList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PInspectionCategoryRowList)
  return false;
#undef DO_
}

void PInspectionCategoryRowList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PInspectionCategoryRowList)
  // repeated .my_comm_proto.PInspectionCategoryRow list = 1;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PInspectionCategoryRowList)
}

int PInspectionCategoryRowList::ByteSize() const {
  int total_size = 0;

  // repeated .my_comm_proto.PInspectionCategoryRow list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PInspectionCategoryRowList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PInspectionCategoryRowList*>(&from));
}

void PInspectionCategoryRowList::MergeFrom(const PInspectionCategoryRowList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PInspectionCategoryRowList::CopyFrom(const PInspectionCategoryRowList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PInspectionCategoryRowList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void PInspectionCategoryRowList::Swap(PInspectionCategoryRowList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PInspectionCategoryRowList::InternalSwap(PInspectionCategoryRowList* other) {
  list_.UnsafeArenaSwap(&other->list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PInspectionCategoryRowList::GetTypeName() const {
  return "my_comm_proto.PInspectionCategoryRowList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PInspectionCategoryRowList

// repeated .my_comm_proto.PInspectionCategoryRow list = 1;
int PInspectionCategoryRowList::list_size() const {
  return list_.size();
}
void PInspectionCategoryRowList::clear_list() {
  list_.Clear();
}
const ::my_comm_proto::PInspectionCategoryRow& PInspectionCategoryRowList::list(int index) const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PInspectionCategoryRowList.list)
  return list_.Get(index);
}
::my_comm_proto::PInspectionCategoryRow* PInspectionCategoryRowList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PInspectionCategoryRowList.list)
  return list_.Mutable(index);
}
::my_comm_proto::PInspectionCategoryRow* PInspectionCategoryRowList::add_list() {
  // @@protoc_insertion_point(field_add:my_comm_proto.PInspectionCategoryRowList.list)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::my_comm_proto::PInspectionCategoryRow >*
PInspectionCategoryRowList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:my_comm_proto.PInspectionCategoryRowList.list)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::my_comm_proto::PInspectionCategoryRow >&
PInspectionCategoryRowList::list() const {
  // @@protoc_insertion_point(field_list:my_comm_proto.PInspectionCategoryRowList.list)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PRegister::kUserFieldNumber;
const int PRegister::kPassFieldNumber;
const int PRegister::kFnameFieldNumber;
const int PRegister::kEmailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PRegister::PRegister()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:my_comm_proto.PRegister)
}

void PRegister::InitAsDefaultInstance() {
}

PRegister::PRegister(const PRegister& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:my_comm_proto.PRegister)
}

void PRegister::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PRegister::~PRegister() {
  // @@protoc_insertion_point(destructor:my_comm_proto.PRegister)
  SharedDtor();
}

void PRegister::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PRegister& PRegister::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_my_5fcommon_5fproto_5fcomm_5flite_2eproto();
#endif
  return *default_instance_;
}

PRegister* PRegister::default_instance_ = NULL;

PRegister* PRegister::New(::google::protobuf::Arena* arena) const {
  PRegister* n = new PRegister;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PRegister::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_user()) {
      user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_pass()) {
      pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_fname()) {
      fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_email()) {
      email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:my_comm_proto.PRegister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pass;
        break;
      }

      // required string pass = 2;
      case 2: {
        if (tag == 18) {
         parse_pass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fname;
        break;
      }

      // required string fname = 3;
      case 3: {
        if (tag == 26) {
         parse_fname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_email;
        break;
      }

      // required string email = 4;
      case 4: {
        if (tag == 34) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:my_comm_proto.PRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:my_comm_proto.PRegister)
  return false;
#undef DO_
}

void PRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:my_comm_proto.PRegister)
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // required string pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pass(), output);
  }

  // required string fname = 3;
  if (has_fname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fname(), output);
  }

  // required string email = 4;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->email(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:my_comm_proto.PRegister)
}

int PRegister::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_user()) {
    // required string user = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  if (has_pass()) {
    // required string pass = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pass());
  }

  if (has_fname()) {
    // required string fname = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fname());
  }

  if (has_email()) {
    // required string email = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  return total_size;
}
int PRegister::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string user = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());

    // required string pass = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pass());

    // required string fname = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fname());

    // required string email = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PRegister::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PRegister*>(&from));
}

void PRegister::MergeFrom(const PRegister& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_has_user();
      user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
    }
    if (from.has_pass()) {
      set_has_pass();
      pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_);
    }
    if (from.has_fname()) {
      set_has_fname();
      fname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fname_);
    }
    if (from.has_email()) {
      set_has_email();
      email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PRegister::CopyFrom(const PRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRegister::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PRegister::Swap(PRegister* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PRegister::InternalSwap(PRegister* other) {
  user_.Swap(&other->user_);
  pass_.Swap(&other->pass_);
  fname_.Swap(&other->fname_);
  email_.Swap(&other->email_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PRegister::GetTypeName() const {
  return "my_comm_proto.PRegister";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PRegister

// required string user = 1;
bool PRegister::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PRegister::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
void PRegister::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
void PRegister::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
 const ::std::string& PRegister::user() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PRegister.user)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PRegister::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PRegister.user)
}
 void PRegister::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PRegister.user)
}
 void PRegister::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PRegister.user)
}
 ::std::string* PRegister::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PRegister.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PRegister::release_user() {
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PRegister::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PRegister.user)
}

// required string pass = 2;
bool PRegister::has_pass() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PRegister::set_has_pass() {
  _has_bits_[0] |= 0x00000002u;
}
void PRegister::clear_has_pass() {
  _has_bits_[0] &= ~0x00000002u;
}
void PRegister::clear_pass() {
  pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pass();
}
 const ::std::string& PRegister::pass() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PRegister.pass)
  return pass_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PRegister::set_pass(const ::std::string& value) {
  set_has_pass();
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PRegister.pass)
}
 void PRegister::set_pass(const char* value) {
  set_has_pass();
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PRegister.pass)
}
 void PRegister::set_pass(const char* value, size_t size) {
  set_has_pass();
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PRegister.pass)
}
 ::std::string* PRegister::mutable_pass() {
  set_has_pass();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PRegister.pass)
  return pass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PRegister::release_pass() {
  clear_has_pass();
  return pass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PRegister::set_allocated_pass(::std::string* pass) {
  if (pass != NULL) {
    set_has_pass();
  } else {
    clear_has_pass();
  }
  pass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PRegister.pass)
}

// required string fname = 3;
bool PRegister::has_fname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PRegister::set_has_fname() {
  _has_bits_[0] |= 0x00000004u;
}
void PRegister::clear_has_fname() {
  _has_bits_[0] &= ~0x00000004u;
}
void PRegister::clear_fname() {
  fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fname();
}
 const ::std::string& PRegister::fname() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PRegister.fname)
  return fname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PRegister::set_fname(const ::std::string& value) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PRegister.fname)
}
 void PRegister::set_fname(const char* value) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PRegister.fname)
}
 void PRegister::set_fname(const char* value, size_t size) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PRegister.fname)
}
 ::std::string* PRegister::mutable_fname() {
  set_has_fname();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PRegister.fname)
  return fname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PRegister::release_fname() {
  clear_has_fname();
  return fname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PRegister::set_allocated_fname(::std::string* fname) {
  if (fname != NULL) {
    set_has_fname();
  } else {
    clear_has_fname();
  }
  fname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fname);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PRegister.fname)
}

// required string email = 4;
bool PRegister::has_email() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PRegister::set_has_email() {
  _has_bits_[0] |= 0x00000008u;
}
void PRegister::clear_has_email() {
  _has_bits_[0] &= ~0x00000008u;
}
void PRegister::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
 const ::std::string& PRegister::email() const {
  // @@protoc_insertion_point(field_get:my_comm_proto.PRegister.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PRegister::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:my_comm_proto.PRegister.email)
}
 void PRegister::set_email(const char* value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:my_comm_proto.PRegister.email)
}
 void PRegister::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:my_comm_proto.PRegister.email)
}
 ::std::string* PRegister::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:my_comm_proto.PRegister.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PRegister::release_email() {
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PRegister::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:my_comm_proto.PRegister.email)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace my_comm_proto

// @@protoc_insertion_point(global_scope)

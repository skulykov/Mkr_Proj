// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: my_csharp_proto3_comm.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Protobuf.MyCommProto.CommPackets {

  /// <summary>Holder for reflection information generated from my_csharp_proto3_comm.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class MyCsharpProto3CommReflection {

    #region Descriptor
    /// <summary>File descriptor for my_csharp_proto3_comm.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MyCsharpProto3CommReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtteV9jc2hhcnBfcHJvdG8zX2NvbW0ucHJvdG8SDW15X2NvbW1fcHJvdG8i",
            "TAoJUEFNZXNzYWdlEgsKA2FJRBgBIAEoBRILCgNySUQYAiABKAUSCwoDbXNn",
            "GAMgASgJEgoKAnRzGAQgASgDEgwKBHR5cGUYBSABKAUiKAoKUFdPSVN0YXR1",
            "cxIKCgJJRBgBIAEoAxIOCgZzdGF0dXMYAiABKAUi2wMKDlBXb3JrT3JkZXJJ",
            "dGVtEgoKAklEGAEgASgDEgwKBE5hbWUYAiABKAkSDgoGQ2FsbGVyGAMgASgJ",
            "Eg0KBVBob25lGAQgASgJEhEKCVJlZmVyZW5jZRgFIAEoCRIUCgxMb2NhdGlv",
            "bk5hbWUYBiABKAkSDgoGU3RyZWV0GAcgASgJEgwKBENpdHkYCSABKAkSDwoH",
            "Q291bnRyeRgKIAEoCRISCgpQb3N0YWxDb2RlGAsgASgJEg4KBlJlZ2lvbhgM",
            "IAEoCRIQCghQcm92aW5jZRgNIAEoCRIUCgxJbnN0cnVjdGlvbnMYDiABKAkS",
            "EQoJU3RhcnRUaW1lGA8gASgDEg8KB0VuZFRpbWUYECABKAMSEQoJQWN0SW5z",
            "dHJzGBEgASgJEhEKCUNyZWF0ZWRUUxgSIAEoAxITCgtMYXN0VXBkdGRUUxgT",
            "IAEoAxISCgpBY2NlcHRlZFRTGBQgASgDEhMKC0NvbXBsZXRlZFRTGBUgASgD",
            "Eg4KBnN0YXR1cxgWIAEoBRIUCgxzZXJ2aWNlR3JvdXAYFyABKAUSEgoKcmVz",
            "b3VyY2VJRBgYIAEoAxILCgNMYXQYGSABKAESCwoDTG9uGBogASgBEhAKCGVk",
            "aXRGbGFnGBsgASgFIkEKDlBXb3JrT3JkZXJMaXN0Ei8KCHdvX2l0ZW1zGAEg",
            "AygLMh0ubXlfY29tbV9wcm90by5QV29ya09yZGVySXRlbSJACg5QV09JU3Rh",
            "dHVzTGlzdBIuCgt3b3N0c19pdGVtcxgBIAMoCzIZLm15X2NvbW1fcHJvdG8u",
            "UFdPSVN0YXR1cyLFAQoQUEJveElkVmVoaWNsZVJvdxIKCgJJRBgBIAEoAxIL",
            "CgNtVFMYAiABKAMSDAoEZGVzYxgDIAEoCRIOCgZ3ZWlnaHQYBCABKAUSDAoE",
            "ZmxhZxgFIAEoBRIKCgJWTBgGIAEoCRILCgNWTFAYByABKAkSCwoDY2lkGAgg",
            "ASgFEgsKA0ltZxgJIAEoCRINCgVtYWtlchgKIAEoCRINCgVtb2RlbBgLIAEo",
            "CRINCgVjb2xvchgMIAEoCRIMCgR5ZWFyGA0gASgFIkYKFFBCb3hJZFZlaGlj",
            "bGVSb3dMaXN0Ei4KBXZpdGVtGAEgAygLMh8ubXlfY29tbV9wcm90by5QQm94",
            "SWRWZWhpY2xlUm93ItsBCg5QQ29uZmlndXJhdGlvbhIOCgZpbnNwSEQYASAB",
            "KAUSDgoGaW5zcEhBGAIgASgFEhMKC2ltYWdlc0xpbWl0GAMgASgFEhoKEnZp",
            "b2xhdGlvbnRocmVzaG9sZBgEIAEoBRINCgVsb2dpbhgFIAEoBRISCgpfc2Nh",
            "bl9mbGFnGAYgASgIEhIKClNlYXJjaFR5cGUYByABKAkSEgoKU2NyZWVuTG9j",
            "axgIIAEoBRIUCgxPZG9JbnB1dEZsYWcYCSABKAUSFwoPV2VpZ2h0VGhyZXNo",
            "b2xkGAogASgFIvACCgxQRW1wbG95ZWVSb3cSCgoCSUQYASABKAkSEgoKRHJp",
            "dmVyTmFtZRgCIAEoCRIQCghVc2VyTmFtZRgDIAEoCRINCgVFbWFpbBgEIAEo",
            "CRIQCghQYXNzd29yZBgFIAEoCRIPCgdMaWNlbnNlGAYgASgJEg8KB0NvdW50",
            "cnkYByABKAkSEQoJU2lnbmF0dXJlGAggASgJEg4KBkRvbWFpbhgJIAEoCRIN",
            "CgVDeWNsZRgKIAEoBRIRCglIT1NFeGNlcHQYCyABKAUSEAoIQXBwbHlEVFMY",
            "DCABKAUSCgoCVFoYDSABKAISEwoLSG9tZUFkZHJlc3MYDiABKAkSFAoMSXNT",
            "dXBlcnZpc29yGA8gASgIEg0KBVN0YXRlGBAgASgJEg8KB09yZ05hbWUYESAB",
            "KAkSDwoHT3JnQWRkchgSIAEoCRIQCghUaW1lWm9uZRgUIAEoCRILCgNETFMY",
            "FSABKAgSDQoFcGhvdG8YFiABKAki5gIKC1BUaW1lTG9nUm93Eg0KBUV2ZW50",
            "GAEgASgFEg8KB0xvZ1RpbWUYAiABKAMSDgoGU2lnbmVkGAMgASgIEgwKBFRM",
            "SUQYBCABKAUSDAoEVHlwZRgFIAEoBRILCgNPZG8YBiABKAUSFQoNTG9nYm9v",
            "a3N0b3BpZBgHIAEoBRIMCgRFcU5vGAggASgJEgsKA0xhdBgJIAEoAhILCgNM",
            "b24YCiABKAISDwoHQ29tbWVudBgLIAEoCRIQCghEcml2ZXJJZBgMIAEoCRIN",
            "CgVTdGF0ZRgNIAEoCRINCgVCb3hJRBgOIAEoBRILCgNPTFQYDyABKAMSDgoG",
            "RWRpdG9yGBAgASgFEgoKAlRaGBEgASgCEgsKA0RTVBgSIAEoAhIMCgRBZGRy",
            "GBMgASgJEg0KBWFyR2VvGBQgASgFEhAKCENvRHJpdmVyGBUgASgJEhkKEVF1",
            "YWxpZnlSYWRpdXNSdWxlGBYgASgFIpkBCgxQSG9zQWxlcnRSb3cSCgoCZHQY",
            "ASABKAMSGgoSb25kdXR5cnVsZXZpb2xhdGVkGAIgASgJEhsKE2RyaXZpbmdy",
            "dWxldmlvbGF0ZWQYAyABKAkSEQoJYWxlcnRUeXBlGAQgASgFEhgKEGRyaXZp",
            "bmdBdmFpbGFibGUYBSABKAUSFwoPb25kdXR5QXZhaWxhYmxlGAYgASgFInEK",
            "CVBSZWNhcFJvdxIMCgRkYXRlGAEgASgDEg0KBXRvZGF5GAIgASgFEhIKCmN5",
            "Y2xlVG90YWwYAyABKAUSFgoOY3ljbGVBdmFpbGFibGUYBCABKAUSDQoFY3lj",
            "bGUYBSABKAkSDAoEc2VudBgGIAEoCCKDAQoYUFJ1bGVTZWxlY3Rpb25IaXN0",
            "b3J5Um93Eg0KBVJTSElEGAEgASgFEg4KBlJ1bGVpZBgCIAEoBRISCgpzZWxl",
            "Y3RUaW1lGAMgASgDEg8KB2NvdW50cnkYBCABKAkSFQoNcnVsZUV4Y2VwdGlv",
            "bhgFIAEoBRIMCgRzZW50GAYgASgIIjsKD1BUaW1lTG9nUm93TGlzdBIoCgRs",
            "aXN0GAEgAygLMhoubXlfY29tbV9wcm90by5QVGltZUxvZ1JvdyI3Cg1QUmVj",
            "YXBSb3dMaXN0EiYKBGxpc3QYASADKAsyGC5teV9jb21tX3Byb3RvLlBSZWNh",
            "cFJvdyJVChxQUnVsZVNlbGVjdGlvbkhpc3RvcnlSb3dMaXN0EjUKBGxpc3QY",
            "ASADKAsyJy5teV9jb21tX3Byb3RvLlBSdWxlU2VsZWN0aW9uSGlzdG9yeVJv",
            "dyLWAQoPUEluc3BlY3Rpb25JdGVtEgsKA2lJRBgBIAEoBRILCgNjSUQYAiAB",
            "KAUSDgoGRGVmZWN0GAMgASgJEg8KB0RlZkFiYnIYBCABKAkSEAoIRGVmTGV2",
            "ZWwYBSABKAUSEAoIQ29tbWVudHMYBiABKAkSEAoIaXNEZWZlY3QYByABKAgS",
            "EwoLbWVkaWFfZmlsZXMYCCADKAkSDQoFYXR0SUQYCSABKAkSDAoEQ2xyZBgK",
            "IAEoCRIOCgZDbHJkSWQYCyABKAkSEAoIQ2xyZE5hbWUYDCABKAkiQwoTUElu",
            "c3BlY3Rpb25JdGVtTGlzdBIsCgRsaXN0GAEgAygLMh4ubXlfY29tbV9wcm90",
            "by5QSW5zcGVjdGlvbkl0ZW0irAEKFlBJbnNwZWN0aW9uQ2F0ZWdvcnlSb3cS",
            "CwoDY0lEGAEgASgFEgwKBGRlc2MYAiABKAkSDwoHZ3JvdXBJRBgDIAEoBRIR",
            "CglCYXJDb2RlSUQYBCABKAUSDQoFQkNMb2MYBSABKAkSMQoFaXRlbXMYBiAB",
            "KAsyIi5teV9jb21tX3Byb3RvLlBJbnNwZWN0aW9uSXRlbUxpc3QSEQoJaXND",
            "aGVja2VkGAcgASgFIqYCCg5QSW5zcGVjdGlvblJvdxIOCgZJbnNSSUQYASAB",
            "KAUSDwoHSW5zVGltZRgCIAEoAxIMCgRFcUlEGAMgASgJEgsKA29kbxgEIAEo",
            "BRIOCgZTaWduZWQYBSABKAgSLwoHRGVmZWN0cxgGIAMoCzIeLm15X2NvbW1f",
            "cHJvdG8uUEluc3BlY3Rpb25JdGVtEgwKBGRySWQYByABKAkSDgoGZHJOYW1l",
            "GAggASgJEg8KB0luc1R5cGUYCSABKAUSDwoHY2JfY2F0cxgKIAEoCRIRCglj",
            "Yl9hX2NhdHMYCyABKAkSDQoFQm94SUQYDCABKAUSDAoEdHpPZhgNIAEoBRIL",
            "CgNMYXQYDiABKAISCwoDTG9uGA8gASgCEg0KBWF0dElEGBAgASgJIkEKElBJ",
            "bnNwZWN0aW9uUm93TGlzdBIrCgRsaXN0GAEgAygLMh0ubXlfY29tbV9wcm90",
            "by5QSW5zcGVjdGlvblJvdyJRChpQSW5zcGVjdGlvbkNhdGVnb3J5Um93TGlz",
            "dBIzCgRsaXN0GAEgAygLMiUubXlfY29tbV9wcm90by5QSW5zcGVjdGlvbkNh",
            "dGVnb3J5Um93IjwKGlBJbnNwZWN0aW9uUmVwb3J0TWVkaWFGaWxlEg0KBWZu",
            "YW1lGAEgASgJEg8KB3BheWxvYWQYAiABKAwigwEKElBJbnNwZWN0aW9uUmVw",
            "b3J0cxIyCgdyZXBvcnRzGAEgASgLMiEubXlfY29tbV9wcm90by5QSW5zcGVj",
            "dGlvblJvd0xpc3QSOQoGbWZpbGVzGAIgAygLMikubXlfY29tbV9wcm90by5Q",
            "SW5zcGVjdGlvblJlcG9ydE1lZGlhRmlsZSKDAQoPUFZlaGljbGVSZXBvcnRz",
            "EjUKCHZlaGljbGVzGAEgASgLMiMubXlfY29tbV9wcm90by5QQm94SWRWZWhp",
            "Y2xlUm93TGlzdBI5CgZtZmlsZXMYAiADKAsyKS5teV9jb21tX3Byb3RvLlBJ",
            "bnNwZWN0aW9uUmVwb3J0TWVkaWFGaWxlIv0BCgpDbHNMb2dpbk1EEgsKA3Jl",
            "cxgBIAEoCBILCgNjaWQYAiABKAUSDAoEdXNlchgDIAEoCRIMCgRwYXNzGAQg",
            "ASgJEhIKClJlc291cmNlSUQYBSABKAUSDgoGRHJOYW1lGAYgASgJEjUKCHZl",
            "aGljbGVzGAcgASgLMiMubXlfY29tbV9wcm90by5QQm94SWRWZWhpY2xlUm93",
            "TGlzdBItCgZjb25maWcYCCABKAsyHS5teV9jb21tX3Byb3RvLlBDb25maWd1",
            "cmF0aW9uEi8KCmRyaXZlclByb2YYCSABKAsyGy5teV9jb21tX3Byb3RvLlBF",
            "bXBsb3llZVJvdyJYCglQTW9iaWxlSEISCwoDcmlkGAEgASgFEgsKA2xhdBgC",
            "IAEoAhILCgNsb24YAyABKAISCwoDc3BkGAQgASgFEgsKA2NvZxgFIAEoBRIK",
            "CgJ0cxgGIAEoAyJSCgpDb21tUGFja2V0EgsKA3JlcRgBIAEoBRILCgNySUQY",
            "AiABKAUSCwoDY0lEGAMgASgFEgwKBHVzZXIYBCABKAkSDwoHcGF5bG9hZBgF",
            "IAEoDCJFCglQUmVnaXN0ZXISDAoEdXNlchgBIAEoCRIMCgRwYXNzGAIgASgJ",
            "Eg0KBWZuYW1lGAMgASgJEg0KBWVtYWlsGAQgASgJQlMKFGNvbS5leGFtcGxl",
            "LnR1dG9yaWFsQhFBZGRyZXNzQm9va1Byb3Rvc6oCJ0dvb2dsZS5Qcm90b2J1",
            "Zi5NeUNvbW1Qcm90by5Db21tUGFja2V0c2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PAMessage), global::Google.Protobuf.MyCommProto.CommPackets.PAMessage.Parser, new[]{ "AID", "RID", "Msg", "Ts", "Type" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PWOIStatus), global::Google.Protobuf.MyCommProto.CommPackets.PWOIStatus.Parser, new[]{ "ID", "Status" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PWorkOrderItem), global::Google.Protobuf.MyCommProto.CommPackets.PWorkOrderItem.Parser, new[]{ "ID", "Name", "Caller", "Phone", "Reference", "LocationName", "Street", "City", "Country", "PostalCode", "Region", "Province", "Instructions", "StartTime", "EndTime", "ActInstrs", "CreatedTS", "LastUpdtdTS", "AcceptedTS", "CompletedTS", "Status", "ServiceGroup", "ResourceID", "Lat", "Lon", "EditFlag" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PWorkOrderList), global::Google.Protobuf.MyCommProto.CommPackets.PWorkOrderList.Parser, new[]{ "WoItems" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PWOIStatusList), global::Google.Protobuf.MyCommProto.CommPackets.PWOIStatusList.Parser, new[]{ "WostsItems" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PBoxIdVehicleRow), global::Google.Protobuf.MyCommProto.CommPackets.PBoxIdVehicleRow.Parser, new[]{ "ID", "MTS", "Desc", "Weight", "Flag", "VL", "VLP", "Cid", "Img", "Maker", "Model", "Color", "Year" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PBoxIdVehicleRowList), global::Google.Protobuf.MyCommProto.CommPackets.PBoxIdVehicleRowList.Parser, new[]{ "Vitem" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PConfiguration), global::Google.Protobuf.MyCommProto.CommPackets.PConfiguration.Parser, new[]{ "InspHD", "InspHA", "ImagesLimit", "Violationthreshold", "Login", "ScanFlag", "SearchType", "ScreenLock", "OdoInputFlag", "WeightThreshold" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PEmployeeRow), global::Google.Protobuf.MyCommProto.CommPackets.PEmployeeRow.Parser, new[]{ "ID", "DriverName", "UserName", "Email", "Password", "License", "Country", "Signature", "Domain", "Cycle", "HOSExcept", "ApplyDTS", "TZ", "HomeAddress", "IsSupervisor", "State", "OrgName", "OrgAddr", "TimeZone", "DLS", "Photo" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PTimeLogRow), global::Google.Protobuf.MyCommProto.CommPackets.PTimeLogRow.Parser, new[]{ "Event", "LogTime", "Signed", "TLID", "Type", "Odo", "Logbookstopid", "EqNo", "Lat", "Lon", "Comment", "DriverId", "State", "BoxID", "OLT", "Editor", "TZ", "DST", "Addr", "ArGeo", "CoDriver", "QualifyRadiusRule" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PHosAlertRow), global::Google.Protobuf.MyCommProto.CommPackets.PHosAlertRow.Parser, new[]{ "Dt", "Ondutyruleviolated", "Drivingruleviolated", "AlertType", "DrivingAvailable", "OndutyAvailable" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PRecapRow), global::Google.Protobuf.MyCommProto.CommPackets.PRecapRow.Parser, new[]{ "Date", "Today", "CycleTotal", "CycleAvailable", "Cycle", "Sent" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PRuleSelectionHistoryRow), global::Google.Protobuf.MyCommProto.CommPackets.PRuleSelectionHistoryRow.Parser, new[]{ "RSHID", "Ruleid", "SelectTime", "Country", "RuleException", "Sent" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PTimeLogRowList), global::Google.Protobuf.MyCommProto.CommPackets.PTimeLogRowList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PRecapRowList), global::Google.Protobuf.MyCommProto.CommPackets.PRecapRowList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PRuleSelectionHistoryRowList), global::Google.Protobuf.MyCommProto.CommPackets.PRuleSelectionHistoryRowList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PInspectionItem), global::Google.Protobuf.MyCommProto.CommPackets.PInspectionItem.Parser, new[]{ "IID", "CID", "Defect", "DefAbbr", "DefLevel", "Comments", "IsDefect", "MediaFiles", "AttID", "Clrd", "ClrdId", "ClrdName" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PInspectionItemList), global::Google.Protobuf.MyCommProto.CommPackets.PInspectionItemList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PInspectionCategoryRow), global::Google.Protobuf.MyCommProto.CommPackets.PInspectionCategoryRow.Parser, new[]{ "CID", "Desc", "GroupID", "BarCodeID", "BCLoc", "Items", "IsChecked" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PInspectionRow), global::Google.Protobuf.MyCommProto.CommPackets.PInspectionRow.Parser, new[]{ "InsRID", "InsTime", "EqID", "Odo", "Signed", "Defects", "DrId", "DrName", "InsType", "CbCats", "CbACats", "BoxID", "TzOf", "Lat", "Lon", "AttID" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PInspectionRowList), global::Google.Protobuf.MyCommProto.CommPackets.PInspectionRowList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PInspectionCategoryRowList), global::Google.Protobuf.MyCommProto.CommPackets.PInspectionCategoryRowList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PInspectionReportMediaFile), global::Google.Protobuf.MyCommProto.CommPackets.PInspectionReportMediaFile.Parser, new[]{ "Fname", "Payload" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PInspectionReports), global::Google.Protobuf.MyCommProto.CommPackets.PInspectionReports.Parser, new[]{ "Reports", "Mfiles" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PVehicleReports), global::Google.Protobuf.MyCommProto.CommPackets.PVehicleReports.Parser, new[]{ "Vehicles", "Mfiles" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.ClsLoginMD), global::Google.Protobuf.MyCommProto.CommPackets.ClsLoginMD.Parser, new[]{ "Res", "Cid", "User", "Pass", "ResourceID", "DrName", "Vehicles", "Config", "DriverProf" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PMobileHB), global::Google.Protobuf.MyCommProto.CommPackets.PMobileHB.Parser, new[]{ "Rid", "Lat", "Lon", "Spd", "Cog", "Ts" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.CommPacket), global::Google.Protobuf.MyCommProto.CommPackets.CommPacket.Parser, new[]{ "Req", "RID", "CID", "User", "Payload" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Protobuf.MyCommProto.CommPackets.PRegister), global::Google.Protobuf.MyCommProto.CommPackets.PRegister.Parser, new[]{ "User", "Pass", "Fname", "Email" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// =================================WorkOrders=====================================
  /// enum PAMessageDirection
  /// 	{
  /// 		FromMobile=0;
  /// 		FromServer=1;
  /// 	}
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PAMessage : pb::IMessage<PAMessage> {
    private static readonly pb::MessageParser<PAMessage> _parser = new pb::MessageParser<PAMessage>(() => new PAMessage());
    public static pb::MessageParser<PAMessage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PAMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PAMessage(PAMessage other) : this() {
      aID_ = other.aID_;
      rID_ = other.rID_;
      msg_ = other.msg_;
      ts_ = other.ts_;
      type_ = other.type_;
    }

    public PAMessage Clone() {
      return new PAMessage(this);
    }

    /// <summary>Field number for the "aID" field.</summary>
    public const int AIDFieldNumber = 1;
    private int aID_;
    public int AID {
      get { return aID_; }
      set {
        aID_ = value;
      }
    }

    /// <summary>Field number for the "rID" field.</summary>
    public const int RIDFieldNumber = 2;
    private int rID_;
    public int RID {
      get { return rID_; }
      set {
        rID_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 3;
    private string msg_ = "";
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ts" field.</summary>
    public const int TsFieldNumber = 4;
    private long ts_;
    /// <summary>
    /// DateTime ts;
    /// </summary>
    public long Ts {
      get { return ts_; }
      set {
        ts_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private int type_;
    /// <summary>
    /// PAMessageDirection 1- from mobile , 2 - from server
    /// </summary>
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PAMessage);
    }

    public bool Equals(PAMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AID != other.AID) return false;
      if (RID != other.RID) return false;
      if (Msg != other.Msg) return false;
      if (Ts != other.Ts) return false;
      if (Type != other.Type) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (AID != 0) hash ^= AID.GetHashCode();
      if (RID != 0) hash ^= RID.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (Ts != 0L) hash ^= Ts.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (AID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AID);
      }
      if (RID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RID);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Msg);
      }
      if (Ts != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Ts);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Type);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (AID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AID);
      }
      if (RID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RID);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (Ts != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ts);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    public void MergeFrom(PAMessage other) {
      if (other == null) {
        return;
      }
      if (other.AID != 0) {
        AID = other.AID;
      }
      if (other.RID != 0) {
        RID = other.RID;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      if (other.Ts != 0L) {
        Ts = other.Ts;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AID = input.ReadInt32();
            break;
          }
          case 16: {
            RID = input.ReadInt32();
            break;
          }
          case 26: {
            Msg = input.ReadString();
            break;
          }
          case 32: {
            Ts = input.ReadInt64();
            break;
          }
          case 40: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PWOIStatus : pb::IMessage<PWOIStatus> {
    private static readonly pb::MessageParser<PWOIStatus> _parser = new pb::MessageParser<PWOIStatus>(() => new PWOIStatus());
    public static pb::MessageParser<PWOIStatus> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PWOIStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PWOIStatus(PWOIStatus other) : this() {
      iD_ = other.iD_;
      status_ = other.status_;
    }

    public PWOIStatus Clone() {
      return new PWOIStatus(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private long iD_;
    public long ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    /// string comments=3;
    /// </summary>
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PWOIStatus);
    }

    public bool Equals(PWOIStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Status != other.Status) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0L) hash ^= ID.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ID);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ID);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    public void MergeFrom(PWOIStatus other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0L) {
        ID = other.ID;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt64();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PWorkOrderItem : pb::IMessage<PWorkOrderItem> {
    private static readonly pb::MessageParser<PWorkOrderItem> _parser = new pb::MessageParser<PWorkOrderItem>(() => new PWorkOrderItem());
    public static pb::MessageParser<PWorkOrderItem> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PWorkOrderItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PWorkOrderItem(PWorkOrderItem other) : this() {
      iD_ = other.iD_;
      name_ = other.name_;
      caller_ = other.caller_;
      phone_ = other.phone_;
      reference_ = other.reference_;
      locationName_ = other.locationName_;
      street_ = other.street_;
      city_ = other.city_;
      country_ = other.country_;
      postalCode_ = other.postalCode_;
      region_ = other.region_;
      province_ = other.province_;
      instructions_ = other.instructions_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      actInstrs_ = other.actInstrs_;
      createdTS_ = other.createdTS_;
      lastUpdtdTS_ = other.lastUpdtdTS_;
      acceptedTS_ = other.acceptedTS_;
      completedTS_ = other.completedTS_;
      status_ = other.status_;
      serviceGroup_ = other.serviceGroup_;
      resourceID_ = other.resourceID_;
      lat_ = other.lat_;
      lon_ = other.lon_;
      editFlag_ = other.editFlag_;
    }

    public PWorkOrderItem Clone() {
      return new PWorkOrderItem(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private long iD_;
    public long ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Caller" field.</summary>
    public const int CallerFieldNumber = 3;
    private string caller_ = "";
    public string Caller {
      get { return caller_; }
      set {
        caller_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Phone" field.</summary>
    public const int PhoneFieldNumber = 4;
    private string phone_ = "";
    public string Phone {
      get { return phone_; }
      set {
        phone_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Reference" field.</summary>
    public const int ReferenceFieldNumber = 5;
    private string reference_ = "";
    public string Reference {
      get { return reference_; }
      set {
        reference_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LocationName" field.</summary>
    public const int LocationNameFieldNumber = 6;
    private string locationName_ = "";
    public string LocationName {
      get { return locationName_; }
      set {
        locationName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Street" field.</summary>
    public const int StreetFieldNumber = 7;
    private string street_ = "";
    public string Street {
      get { return street_; }
      set {
        street_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "City" field.</summary>
    public const int CityFieldNumber = 9;
    private string city_ = "";
    public string City {
      get { return city_; }
      set {
        city_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Country" field.</summary>
    public const int CountryFieldNumber = 10;
    private string country_ = "";
    public string Country {
      get { return country_; }
      set {
        country_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PostalCode" field.</summary>
    public const int PostalCodeFieldNumber = 11;
    private string postalCode_ = "";
    public string PostalCode {
      get { return postalCode_; }
      set {
        postalCode_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Region" field.</summary>
    public const int RegionFieldNumber = 12;
    private string region_ = "";
    public string Region {
      get { return region_; }
      set {
        region_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Province" field.</summary>
    public const int ProvinceFieldNumber = 13;
    private string province_ = "";
    public string Province {
      get { return province_; }
      set {
        province_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Instructions" field.</summary>
    public const int InstructionsFieldNumber = 14;
    private string instructions_ = "";
    public string Instructions {
      get { return instructions_; }
      set {
        instructions_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StartTime" field.</summary>
    public const int StartTimeFieldNumber = 15;
    private long startTime_;
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "EndTime" field.</summary>
    public const int EndTimeFieldNumber = 16;
    private long endTime_;
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "ActInstrs" field.</summary>
    public const int ActInstrsFieldNumber = 17;
    private string actInstrs_ = "";
    /// <summary>
    /// ActivityInstructions
    /// </summary>
    public string ActInstrs {
      get { return actInstrs_; }
      set {
        actInstrs_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CreatedTS" field.</summary>
    public const int CreatedTSFieldNumber = 18;
    private long createdTS_;
    /// <summary>
    ///  CreatedTimeStamp
    /// </summary>
    public long CreatedTS {
      get { return createdTS_; }
      set {
        createdTS_ = value;
      }
    }

    /// <summary>Field number for the "LastUpdtdTS" field.</summary>
    public const int LastUpdtdTSFieldNumber = 19;
    private long lastUpdtdTS_;
    /// <summary>
    /// LastUpdatedTimeStamp
    /// </summary>
    public long LastUpdtdTS {
      get { return lastUpdtdTS_; }
      set {
        lastUpdtdTS_ = value;
      }
    }

    /// <summary>Field number for the "AcceptedTS" field.</summary>
    public const int AcceptedTSFieldNumber = 20;
    private long acceptedTS_;
    /// <summary>
    ///  this time coming from dispatcher OR from mobile worker
    /// </summary>
    public long AcceptedTS {
      get { return acceptedTS_; }
      set {
        acceptedTS_ = value;
      }
    }

    /// <summary>Field number for the "CompletedTS" field.</summary>
    public const int CompletedTSFieldNumber = 21;
    private long completedTS_;
    public long CompletedTS {
      get { return completedTS_; }
      set {
        completedTS_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 22;
    private int status_;
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "serviceGroup" field.</summary>
    public const int ServiceGroupFieldNumber = 23;
    private int serviceGroup_;
    public int ServiceGroup {
      get { return serviceGroup_; }
      set {
        serviceGroup_ = value;
      }
    }

    /// <summary>Field number for the "resourceID" field.</summary>
    public const int ResourceIDFieldNumber = 24;
    private long resourceID_;
    public long ResourceID {
      get { return resourceID_; }
      set {
        resourceID_ = value;
      }
    }

    /// <summary>Field number for the "Lat" field.</summary>
    public const int LatFieldNumber = 25;
    private double lat_;
    public double Lat {
      get { return lat_; }
      set {
        lat_ = value;
      }
    }

    /// <summary>Field number for the "Lon" field.</summary>
    public const int LonFieldNumber = 26;
    private double lon_;
    public double Lon {
      get { return lon_; }
      set {
        lon_ = value;
      }
    }

    /// <summary>Field number for the "editFlag" field.</summary>
    public const int EditFlagFieldNumber = 27;
    private int editFlag_;
    /// <summary>
    ///  int32 addrLookupIndex=27;   //in DB  AddrLUP
    /// </summary>
    public int EditFlag {
      get { return editFlag_; }
      set {
        editFlag_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PWorkOrderItem);
    }

    public bool Equals(PWorkOrderItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Name != other.Name) return false;
      if (Caller != other.Caller) return false;
      if (Phone != other.Phone) return false;
      if (Reference != other.Reference) return false;
      if (LocationName != other.LocationName) return false;
      if (Street != other.Street) return false;
      if (City != other.City) return false;
      if (Country != other.Country) return false;
      if (PostalCode != other.PostalCode) return false;
      if (Region != other.Region) return false;
      if (Province != other.Province) return false;
      if (Instructions != other.Instructions) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (ActInstrs != other.ActInstrs) return false;
      if (CreatedTS != other.CreatedTS) return false;
      if (LastUpdtdTS != other.LastUpdtdTS) return false;
      if (AcceptedTS != other.AcceptedTS) return false;
      if (CompletedTS != other.CompletedTS) return false;
      if (Status != other.Status) return false;
      if (ServiceGroup != other.ServiceGroup) return false;
      if (ResourceID != other.ResourceID) return false;
      if (Lat != other.Lat) return false;
      if (Lon != other.Lon) return false;
      if (EditFlag != other.EditFlag) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0L) hash ^= ID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Caller.Length != 0) hash ^= Caller.GetHashCode();
      if (Phone.Length != 0) hash ^= Phone.GetHashCode();
      if (Reference.Length != 0) hash ^= Reference.GetHashCode();
      if (LocationName.Length != 0) hash ^= LocationName.GetHashCode();
      if (Street.Length != 0) hash ^= Street.GetHashCode();
      if (City.Length != 0) hash ^= City.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (PostalCode.Length != 0) hash ^= PostalCode.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (Province.Length != 0) hash ^= Province.GetHashCode();
      if (Instructions.Length != 0) hash ^= Instructions.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (ActInstrs.Length != 0) hash ^= ActInstrs.GetHashCode();
      if (CreatedTS != 0L) hash ^= CreatedTS.GetHashCode();
      if (LastUpdtdTS != 0L) hash ^= LastUpdtdTS.GetHashCode();
      if (AcceptedTS != 0L) hash ^= AcceptedTS.GetHashCode();
      if (CompletedTS != 0L) hash ^= CompletedTS.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (ServiceGroup != 0) hash ^= ServiceGroup.GetHashCode();
      if (ResourceID != 0L) hash ^= ResourceID.GetHashCode();
      if (Lat != 0D) hash ^= Lat.GetHashCode();
      if (Lon != 0D) hash ^= Lon.GetHashCode();
      if (EditFlag != 0) hash ^= EditFlag.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Caller.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Caller);
      }
      if (Phone.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Phone);
      }
      if (Reference.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Reference);
      }
      if (LocationName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LocationName);
      }
      if (Street.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Street);
      }
      if (City.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(City);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Country);
      }
      if (PostalCode.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(PostalCode);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Region);
      }
      if (Province.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Province);
      }
      if (Instructions.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Instructions);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(EndTime);
      }
      if (ActInstrs.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(ActInstrs);
      }
      if (CreatedTS != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(CreatedTS);
      }
      if (LastUpdtdTS != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(LastUpdtdTS);
      }
      if (AcceptedTS != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(AcceptedTS);
      }
      if (CompletedTS != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(CompletedTS);
      }
      if (Status != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Status);
      }
      if (ServiceGroup != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(ServiceGroup);
      }
      if (ResourceID != 0L) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(ResourceID);
      }
      if (Lat != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(Lat);
      }
      if (Lon != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(Lon);
      }
      if (EditFlag != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(EditFlag);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Caller.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Caller);
      }
      if (Phone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phone);
      }
      if (Reference.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reference);
      }
      if (LocationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocationName);
      }
      if (Street.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Street);
      }
      if (City.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(City);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (PostalCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PostalCode);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (Province.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Province);
      }
      if (Instructions.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Instructions);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (ActInstrs.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ActInstrs);
      }
      if (CreatedTS != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CreatedTS);
      }
      if (LastUpdtdTS != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastUpdtdTS);
      }
      if (AcceptedTS != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AcceptedTS);
      }
      if (CompletedTS != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CompletedTS);
      }
      if (Status != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (ServiceGroup != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ServiceGroup);
      }
      if (ResourceID != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ResourceID);
      }
      if (Lat != 0D) {
        size += 2 + 8;
      }
      if (Lon != 0D) {
        size += 2 + 8;
      }
      if (EditFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EditFlag);
      }
      return size;
    }

    public void MergeFrom(PWorkOrderItem other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0L) {
        ID = other.ID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Caller.Length != 0) {
        Caller = other.Caller;
      }
      if (other.Phone.Length != 0) {
        Phone = other.Phone;
      }
      if (other.Reference.Length != 0) {
        Reference = other.Reference;
      }
      if (other.LocationName.Length != 0) {
        LocationName = other.LocationName;
      }
      if (other.Street.Length != 0) {
        Street = other.Street;
      }
      if (other.City.Length != 0) {
        City = other.City;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      if (other.PostalCode.Length != 0) {
        PostalCode = other.PostalCode;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.Province.Length != 0) {
        Province = other.Province;
      }
      if (other.Instructions.Length != 0) {
        Instructions = other.Instructions;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      if (other.ActInstrs.Length != 0) {
        ActInstrs = other.ActInstrs;
      }
      if (other.CreatedTS != 0L) {
        CreatedTS = other.CreatedTS;
      }
      if (other.LastUpdtdTS != 0L) {
        LastUpdtdTS = other.LastUpdtdTS;
      }
      if (other.AcceptedTS != 0L) {
        AcceptedTS = other.AcceptedTS;
      }
      if (other.CompletedTS != 0L) {
        CompletedTS = other.CompletedTS;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.ServiceGroup != 0) {
        ServiceGroup = other.ServiceGroup;
      }
      if (other.ResourceID != 0L) {
        ResourceID = other.ResourceID;
      }
      if (other.Lat != 0D) {
        Lat = other.Lat;
      }
      if (other.Lon != 0D) {
        Lon = other.Lon;
      }
      if (other.EditFlag != 0) {
        EditFlag = other.EditFlag;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Caller = input.ReadString();
            break;
          }
          case 34: {
            Phone = input.ReadString();
            break;
          }
          case 42: {
            Reference = input.ReadString();
            break;
          }
          case 50: {
            LocationName = input.ReadString();
            break;
          }
          case 58: {
            Street = input.ReadString();
            break;
          }
          case 74: {
            City = input.ReadString();
            break;
          }
          case 82: {
            Country = input.ReadString();
            break;
          }
          case 90: {
            PostalCode = input.ReadString();
            break;
          }
          case 98: {
            Region = input.ReadString();
            break;
          }
          case 106: {
            Province = input.ReadString();
            break;
          }
          case 114: {
            Instructions = input.ReadString();
            break;
          }
          case 120: {
            StartTime = input.ReadInt64();
            break;
          }
          case 128: {
            EndTime = input.ReadInt64();
            break;
          }
          case 138: {
            ActInstrs = input.ReadString();
            break;
          }
          case 144: {
            CreatedTS = input.ReadInt64();
            break;
          }
          case 152: {
            LastUpdtdTS = input.ReadInt64();
            break;
          }
          case 160: {
            AcceptedTS = input.ReadInt64();
            break;
          }
          case 168: {
            CompletedTS = input.ReadInt64();
            break;
          }
          case 176: {
            Status = input.ReadInt32();
            break;
          }
          case 184: {
            ServiceGroup = input.ReadInt32();
            break;
          }
          case 192: {
            ResourceID = input.ReadInt64();
            break;
          }
          case 201: {
            Lat = input.ReadDouble();
            break;
          }
          case 209: {
            Lon = input.ReadDouble();
            break;
          }
          case 216: {
            EditFlag = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PWorkOrderList : pb::IMessage<PWorkOrderList> {
    private static readonly pb::MessageParser<PWorkOrderList> _parser = new pb::MessageParser<PWorkOrderList>(() => new PWorkOrderList());
    public static pb::MessageParser<PWorkOrderList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PWorkOrderList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PWorkOrderList(PWorkOrderList other) : this() {
      woItems_ = other.woItems_.Clone();
    }

    public PWorkOrderList Clone() {
      return new PWorkOrderList(this);
    }

    /// <summary>Field number for the "wo_items" field.</summary>
    public const int WoItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Protobuf.MyCommProto.CommPackets.PWorkOrderItem> _repeated_woItems_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Protobuf.MyCommProto.CommPackets.PWorkOrderItem.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PWorkOrderItem> woItems_ = new pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PWorkOrderItem>();
    public pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PWorkOrderItem> WoItems {
      get { return woItems_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PWorkOrderList);
    }

    public bool Equals(PWorkOrderList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!woItems_.Equals(other.woItems_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= woItems_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      woItems_.WriteTo(output, _repeated_woItems_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += woItems_.CalculateSize(_repeated_woItems_codec);
      return size;
    }

    public void MergeFrom(PWorkOrderList other) {
      if (other == null) {
        return;
      }
      woItems_.Add(other.woItems_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            woItems_.AddEntriesFrom(input, _repeated_woItems_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PWOIStatusList : pb::IMessage<PWOIStatusList> {
    private static readonly pb::MessageParser<PWOIStatusList> _parser = new pb::MessageParser<PWOIStatusList>(() => new PWOIStatusList());
    public static pb::MessageParser<PWOIStatusList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PWOIStatusList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PWOIStatusList(PWOIStatusList other) : this() {
      wostsItems_ = other.wostsItems_.Clone();
    }

    public PWOIStatusList Clone() {
      return new PWOIStatusList(this);
    }

    /// <summary>Field number for the "wosts_items" field.</summary>
    public const int WostsItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Protobuf.MyCommProto.CommPackets.PWOIStatus> _repeated_wostsItems_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Protobuf.MyCommProto.CommPackets.PWOIStatus.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PWOIStatus> wostsItems_ = new pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PWOIStatus>();
    public pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PWOIStatus> WostsItems {
      get { return wostsItems_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PWOIStatusList);
    }

    public bool Equals(PWOIStatusList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!wostsItems_.Equals(other.wostsItems_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= wostsItems_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      wostsItems_.WriteTo(output, _repeated_wostsItems_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += wostsItems_.CalculateSize(_repeated_wostsItems_codec);
      return size;
    }

    public void MergeFrom(PWOIStatusList other) {
      if (other == null) {
        return;
      }
      wostsItems_.Add(other.wostsItems_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            wostsItems_.AddEntriesFrom(input, _repeated_wostsItems_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ===================================Login=========================
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBoxIdVehicleRow : pb::IMessage<PBoxIdVehicleRow> {
    private static readonly pb::MessageParser<PBoxIdVehicleRow> _parser = new pb::MessageParser<PBoxIdVehicleRow>(() => new PBoxIdVehicleRow());
    public static pb::MessageParser<PBoxIdVehicleRow> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PBoxIdVehicleRow() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PBoxIdVehicleRow(PBoxIdVehicleRow other) : this() {
      iD_ = other.iD_;
      mTS_ = other.mTS_;
      desc_ = other.desc_;
      weight_ = other.weight_;
      flag_ = other.flag_;
      vL_ = other.vL_;
      vLP_ = other.vLP_;
      cid_ = other.cid_;
      img_ = other.img_;
      maker_ = other.maker_;
      model_ = other.model_;
      color_ = other.color_;
      year_ = other.year_;
    }

    public PBoxIdVehicleRow Clone() {
      return new PBoxIdVehicleRow(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private long iD_;
    /// <summary>
    /// BoxId = -1; // vehicle id
    /// </summary>
    public long ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "mTS" field.</summary>
    public const int MTSFieldNumber = 2;
    private long mTS_;
    /// <summary>
    ///  current time in milliseconds since Epoch
    /// </summary>
    public long MTS {
      get { return mTS_; }
      set {
        mTS_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 3;
    private string desc_ = "";
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 4;
    private int weight_;
    public int Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 5;
    private int flag_;
    /// <summary>
    /// vehicleFlag = 0;
    /// </summary>
    public int Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    /// <summary>Field number for the "VL" field.</summary>
    public const int VLFieldNumber = 6;
    private string vL_ = "";
    /// <summary>
    /// VehicleLicensePlate = "";
    /// </summary>
    public string VL {
      get { return vL_; }
      set {
        vL_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VLP" field.</summary>
    public const int VLPFieldNumber = 7;
    private string vLP_ = "";
    /// <summary>
    /// VehicleLicenseProvince = "";
    /// </summary>
    public string VLP {
      get { return vLP_; }
      set {
        vLP_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cid" field.</summary>
    public const int CidFieldNumber = 8;
    private int cid_;
    /// <summary>
    ///  client id
    /// </summary>
    public int Cid {
      get { return cid_; }
      set {
        cid_ = value;
      }
    }

    /// <summary>Field number for the "Img" field.</summary>
    public const int ImgFieldNumber = 9;
    private string img_ = "";
    public string Img {
      get { return img_; }
      set {
        img_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maker" field.</summary>
    public const int MakerFieldNumber = 10;
    private string maker_ = "";
    public string Maker {
      get { return maker_; }
      set {
        maker_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 11;
    private string model_ = "";
    public string Model {
      get { return model_; }
      set {
        model_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 12;
    private string color_ = "";
    public string Color {
      get { return color_; }
      set {
        color_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 13;
    private int year_;
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PBoxIdVehicleRow);
    }

    public bool Equals(PBoxIdVehicleRow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (MTS != other.MTS) return false;
      if (Desc != other.Desc) return false;
      if (Weight != other.Weight) return false;
      if (Flag != other.Flag) return false;
      if (VL != other.VL) return false;
      if (VLP != other.VLP) return false;
      if (Cid != other.Cid) return false;
      if (Img != other.Img) return false;
      if (Maker != other.Maker) return false;
      if (Model != other.Model) return false;
      if (Color != other.Color) return false;
      if (Year != other.Year) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0L) hash ^= ID.GetHashCode();
      if (MTS != 0L) hash ^= MTS.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      if (Flag != 0) hash ^= Flag.GetHashCode();
      if (VL.Length != 0) hash ^= VL.GetHashCode();
      if (VLP.Length != 0) hash ^= VLP.GetHashCode();
      if (Cid != 0) hash ^= Cid.GetHashCode();
      if (Img.Length != 0) hash ^= Img.GetHashCode();
      if (Maker.Length != 0) hash ^= Maker.GetHashCode();
      if (Model.Length != 0) hash ^= Model.GetHashCode();
      if (Color.Length != 0) hash ^= Color.GetHashCode();
      if (Year != 0) hash ^= Year.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ID);
      }
      if (MTS != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MTS);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Desc);
      }
      if (Weight != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Weight);
      }
      if (Flag != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Flag);
      }
      if (VL.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(VL);
      }
      if (VLP.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(VLP);
      }
      if (Cid != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Cid);
      }
      if (Img.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Img);
      }
      if (Maker.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Maker);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Model);
      }
      if (Color.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Color);
      }
      if (Year != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Year);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ID);
      }
      if (MTS != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MTS);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weight);
      }
      if (Flag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flag);
      }
      if (VL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VL);
      }
      if (VLP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VLP);
      }
      if (Cid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cid);
      }
      if (Img.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Img);
      }
      if (Maker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Maker);
      }
      if (Model.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
      }
      if (Color.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      return size;
    }

    public void MergeFrom(PBoxIdVehicleRow other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0L) {
        ID = other.ID;
      }
      if (other.MTS != 0L) {
        MTS = other.MTS;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      if (other.Flag != 0) {
        Flag = other.Flag;
      }
      if (other.VL.Length != 0) {
        VL = other.VL;
      }
      if (other.VLP.Length != 0) {
        VLP = other.VLP;
      }
      if (other.Cid != 0) {
        Cid = other.Cid;
      }
      if (other.Img.Length != 0) {
        Img = other.Img;
      }
      if (other.Maker.Length != 0) {
        Maker = other.Maker;
      }
      if (other.Model.Length != 0) {
        Model = other.Model;
      }
      if (other.Color.Length != 0) {
        Color = other.Color;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt64();
            break;
          }
          case 16: {
            MTS = input.ReadInt64();
            break;
          }
          case 26: {
            Desc = input.ReadString();
            break;
          }
          case 32: {
            Weight = input.ReadInt32();
            break;
          }
          case 40: {
            Flag = input.ReadInt32();
            break;
          }
          case 50: {
            VL = input.ReadString();
            break;
          }
          case 58: {
            VLP = input.ReadString();
            break;
          }
          case 64: {
            Cid = input.ReadInt32();
            break;
          }
          case 74: {
            Img = input.ReadString();
            break;
          }
          case 82: {
            Maker = input.ReadString();
            break;
          }
          case 90: {
            Model = input.ReadString();
            break;
          }
          case 98: {
            Color = input.ReadString();
            break;
          }
          case 104: {
            Year = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBoxIdVehicleRowList : pb::IMessage<PBoxIdVehicleRowList> {
    private static readonly pb::MessageParser<PBoxIdVehicleRowList> _parser = new pb::MessageParser<PBoxIdVehicleRowList>(() => new PBoxIdVehicleRowList());
    public static pb::MessageParser<PBoxIdVehicleRowList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PBoxIdVehicleRowList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PBoxIdVehicleRowList(PBoxIdVehicleRowList other) : this() {
      vitem_ = other.vitem_.Clone();
    }

    public PBoxIdVehicleRowList Clone() {
      return new PBoxIdVehicleRowList(this);
    }

    /// <summary>Field number for the "vitem" field.</summary>
    public const int VitemFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Protobuf.MyCommProto.CommPackets.PBoxIdVehicleRow> _repeated_vitem_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Protobuf.MyCommProto.CommPackets.PBoxIdVehicleRow.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PBoxIdVehicleRow> vitem_ = new pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PBoxIdVehicleRow>();
    public pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PBoxIdVehicleRow> Vitem {
      get { return vitem_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PBoxIdVehicleRowList);
    }

    public bool Equals(PBoxIdVehicleRowList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!vitem_.Equals(other.vitem_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= vitem_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      vitem_.WriteTo(output, _repeated_vitem_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += vitem_.CalculateSize(_repeated_vitem_codec);
      return size;
    }

    public void MergeFrom(PBoxIdVehicleRowList other) {
      if (other == null) {
        return;
      }
      vitem_.Add(other.vitem_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            vitem_.AddEntriesFrom(input, _repeated_vitem_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PConfiguration : pb::IMessage<PConfiguration> {
    private static readonly pb::MessageParser<PConfiguration> _parser = new pb::MessageParser<PConfiguration>(() => new PConfiguration());
    public static pb::MessageParser<PConfiguration> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PConfiguration(PConfiguration other) : this() {
      inspHD_ = other.inspHD_;
      inspHA_ = other.inspHA_;
      imagesLimit_ = other.imagesLimit_;
      violationthreshold_ = other.violationthreshold_;
      login_ = other.login_;
      ScanFlag_ = other.ScanFlag_;
      searchType_ = other.searchType_;
      screenLock_ = other.screenLock_;
      odoInputFlag_ = other.odoInputFlag_;
      weightThreshold_ = other.weightThreshold_;
    }

    public PConfiguration Clone() {
      return new PConfiguration(this);
    }

    /// <summary>Field number for the "inspHD" field.</summary>
    public const int InspHDFieldNumber = 1;
    private int inspHD_;
    public int InspHD {
      get { return inspHD_; }
      set {
        inspHD_ = value;
      }
    }

    /// <summary>Field number for the "inspHA" field.</summary>
    public const int InspHAFieldNumber = 2;
    private int inspHA_;
    public int InspHA {
      get { return inspHA_; }
      set {
        inspHA_ = value;
      }
    }

    /// <summary>Field number for the "imagesLimit" field.</summary>
    public const int ImagesLimitFieldNumber = 3;
    private int imagesLimit_;
    public int ImagesLimit {
      get { return imagesLimit_; }
      set {
        imagesLimit_ = value;
      }
    }

    /// <summary>Field number for the "violationthreshold" field.</summary>
    public const int ViolationthresholdFieldNumber = 4;
    private int violationthreshold_;
    /// <summary>
    ///  HOS violation threshold 
    /// </summary>
    public int Violationthreshold {
      get { return violationthreshold_; }
      set {
        violationthreshold_ = value;
      }
    }

    /// <summary>Field number for the "login" field.</summary>
    public const int LoginFieldNumber = 5;
    private int login_;
    /// <summary>
    ///   0- inspection screen goes first after login, 1 - HOS
    /// </summary>
    public int Login {
      get { return login_; }
      set {
        login_ = value;
      }
    }

    /// <summary>Field number for the "_scan_flag" field.</summary>
    public const int ScanFlagFieldNumber = 6;
    private bool ScanFlag_;
    public bool ScanFlag {
      get { return ScanFlag_; }
      set {
        ScanFlag_ = value;
      }
    }

    /// <summary>Field number for the "SearchType" field.</summary>
    public const int SearchTypeFieldNumber = 7;
    private string searchType_ = "";
    /// <summary>
    ///  SearchType is delimited by ','
    /// </summary>
    public string SearchType {
      get { return searchType_; }
      set {
        searchType_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ScreenLock" field.</summary>
    public const int ScreenLockFieldNumber = 8;
    private int screenLock_;
    /// <summary>
    ///  if 1 then Lock the HOS screen ( do not allow to change driver status)
    /// </summary>
    public int ScreenLock {
      get { return screenLock_; }
      set {
        screenLock_ = value;
      }
    }

    /// <summary>Field number for the "OdoInputFlag" field.</summary>
    public const int OdoInputFlagFieldNumber = 9;
    private int odoInputFlag_;
    /// <summary>
    /// 0 - do not allow manual Odometer modification
    /// </summary>
    public int OdoInputFlag {
      get { return odoInputFlag_; }
      set {
        odoInputFlag_ = value;
      }
    }

    /// <summary>Field number for the "WeightThreshold" field.</summary>
    public const int WeightThresholdFieldNumber = 10;
    private int weightThreshold_;
    /// <summary>
    ///  threshold for vehicle weight 
    /// </summary>
    public int WeightThreshold {
      get { return weightThreshold_; }
      set {
        weightThreshold_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PConfiguration);
    }

    public bool Equals(PConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InspHD != other.InspHD) return false;
      if (InspHA != other.InspHA) return false;
      if (ImagesLimit != other.ImagesLimit) return false;
      if (Violationthreshold != other.Violationthreshold) return false;
      if (Login != other.Login) return false;
      if (ScanFlag != other.ScanFlag) return false;
      if (SearchType != other.SearchType) return false;
      if (ScreenLock != other.ScreenLock) return false;
      if (OdoInputFlag != other.OdoInputFlag) return false;
      if (WeightThreshold != other.WeightThreshold) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (InspHD != 0) hash ^= InspHD.GetHashCode();
      if (InspHA != 0) hash ^= InspHA.GetHashCode();
      if (ImagesLimit != 0) hash ^= ImagesLimit.GetHashCode();
      if (Violationthreshold != 0) hash ^= Violationthreshold.GetHashCode();
      if (Login != 0) hash ^= Login.GetHashCode();
      if (ScanFlag != false) hash ^= ScanFlag.GetHashCode();
      if (SearchType.Length != 0) hash ^= SearchType.GetHashCode();
      if (ScreenLock != 0) hash ^= ScreenLock.GetHashCode();
      if (OdoInputFlag != 0) hash ^= OdoInputFlag.GetHashCode();
      if (WeightThreshold != 0) hash ^= WeightThreshold.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (InspHD != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InspHD);
      }
      if (InspHA != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InspHA);
      }
      if (ImagesLimit != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ImagesLimit);
      }
      if (Violationthreshold != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Violationthreshold);
      }
      if (Login != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Login);
      }
      if (ScanFlag != false) {
        output.WriteRawTag(48);
        output.WriteBool(ScanFlag);
      }
      if (SearchType.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SearchType);
      }
      if (ScreenLock != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ScreenLock);
      }
      if (OdoInputFlag != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(OdoInputFlag);
      }
      if (WeightThreshold != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(WeightThreshold);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (InspHD != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InspHD);
      }
      if (InspHA != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InspHA);
      }
      if (ImagesLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImagesLimit);
      }
      if (Violationthreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Violationthreshold);
      }
      if (Login != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Login);
      }
      if (ScanFlag != false) {
        size += 1 + 1;
      }
      if (SearchType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SearchType);
      }
      if (ScreenLock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScreenLock);
      }
      if (OdoInputFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OdoInputFlag);
      }
      if (WeightThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeightThreshold);
      }
      return size;
    }

    public void MergeFrom(PConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.InspHD != 0) {
        InspHD = other.InspHD;
      }
      if (other.InspHA != 0) {
        InspHA = other.InspHA;
      }
      if (other.ImagesLimit != 0) {
        ImagesLimit = other.ImagesLimit;
      }
      if (other.Violationthreshold != 0) {
        Violationthreshold = other.Violationthreshold;
      }
      if (other.Login != 0) {
        Login = other.Login;
      }
      if (other.ScanFlag != false) {
        ScanFlag = other.ScanFlag;
      }
      if (other.SearchType.Length != 0) {
        SearchType = other.SearchType;
      }
      if (other.ScreenLock != 0) {
        ScreenLock = other.ScreenLock;
      }
      if (other.OdoInputFlag != 0) {
        OdoInputFlag = other.OdoInputFlag;
      }
      if (other.WeightThreshold != 0) {
        WeightThreshold = other.WeightThreshold;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InspHD = input.ReadInt32();
            break;
          }
          case 16: {
            InspHA = input.ReadInt32();
            break;
          }
          case 24: {
            ImagesLimit = input.ReadInt32();
            break;
          }
          case 32: {
            Violationthreshold = input.ReadInt32();
            break;
          }
          case 40: {
            Login = input.ReadInt32();
            break;
          }
          case 48: {
            ScanFlag = input.ReadBool();
            break;
          }
          case 58: {
            SearchType = input.ReadString();
            break;
          }
          case 64: {
            ScreenLock = input.ReadInt32();
            break;
          }
          case 72: {
            OdoInputFlag = input.ReadInt32();
            break;
          }
          case 80: {
            WeightThreshold = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PEmployeeRow : pb::IMessage<PEmployeeRow> {
    private static readonly pb::MessageParser<PEmployeeRow> _parser = new pb::MessageParser<PEmployeeRow>(() => new PEmployeeRow());
    public static pb::MessageParser<PEmployeeRow> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PEmployeeRow() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PEmployeeRow(PEmployeeRow other) : this() {
      iD_ = other.iD_;
      driverName_ = other.driverName_;
      userName_ = other.userName_;
      email_ = other.email_;
      password_ = other.password_;
      license_ = other.license_;
      country_ = other.country_;
      signature_ = other.signature_;
      domain_ = other.domain_;
      cycle_ = other.cycle_;
      hOSExcept_ = other.hOSExcept_;
      applyDTS_ = other.applyDTS_;
      tZ_ = other.tZ_;
      homeAddress_ = other.homeAddress_;
      isSupervisor_ = other.isSupervisor_;
      state_ = other.state_;
      orgName_ = other.orgName_;
      orgAddr_ = other.orgAddr_;
      timeZone_ = other.timeZone_;
      dLS_ = other.dLS_;
      photo_ = other.photo_;
    }

    public PEmployeeRow Clone() {
      return new PEmployeeRow(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private string iD_ = "";
    /// <summary>
    /// // the same as ResourceID
    /// </summary>
    public string ID {
      get { return iD_; }
      set {
        iD_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DriverName" field.</summary>
    public const int DriverNameFieldNumber = 2;
    private string driverName_ = "";
    public string DriverName {
      get { return driverName_; }
      set {
        driverName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 3;
    private string userName_ = "";
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Email" field.</summary>
    public const int EmailFieldNumber = 4;
    private string email_ = "";
    public string Email {
      get { return email_; }
      set {
        email_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 5;
    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "License" field.</summary>
    public const int LicenseFieldNumber = 6;
    private string license_ = "";
    public string License {
      get { return license_; }
      set {
        license_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Country" field.</summary>
    public const int CountryFieldNumber = 7;
    private string country_ = "";
    public string Country {
      get { return country_; }
      set {
        country_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Signature" field.</summary>
    public const int SignatureFieldNumber = 8;
    private string signature_ = "";
    public string Signature {
      get { return signature_; }
      set {
        signature_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Domain" field.</summary>
    public const int DomainFieldNumber = 9;
    private string domain_ = "";
    /// <summary>
    ///  the same as ClientID
    /// </summary>
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Cycle" field.</summary>
    public const int CycleFieldNumber = 10;
    private int cycle_;
    /// <summary>
    /// HOSCYCLE Cycle = HOSCYCLE.Canadian_70hr_7day;
    /// </summary>
    public int Cycle {
      get { return cycle_; }
      set {
        cycle_ = value;
      }
    }

    /// <summary>Field number for the "HOSExcept" field.</summary>
    public const int HOSExceptFieldNumber = 11;
    private int hOSExcept_;
    public int HOSExcept {
      get { return hOSExcept_; }
      set {
        hOSExcept_ = value;
      }
    }

    /// <summary>Field number for the "ApplyDTS" field.</summary>
    public const int ApplyDTSFieldNumber = 12;
    private int applyDTS_;
    /// <summary>
    /// applyDTS - apply Day Time Savings
    /// </summary>
    public int ApplyDTS {
      get { return applyDTS_; }
      set {
        applyDTS_ = value;
      }
    }

    /// <summary>Field number for the "TZ" field.</summary>
    public const int TZFieldNumber = 13;
    private float tZ_;
    /// <summary>
    /// TimeZone
    /// </summary>
    public float TZ {
      get { return tZ_; }
      set {
        tZ_ = value;
      }
    }

    /// <summary>Field number for the "HomeAddress" field.</summary>
    public const int HomeAddressFieldNumber = 14;
    private string homeAddress_ = "";
    public string HomeAddress {
      get { return homeAddress_; }
      set {
        homeAddress_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsSupervisor" field.</summary>
    public const int IsSupervisorFieldNumber = 15;
    private bool isSupervisor_;
    public bool IsSupervisor {
      get { return isSupervisor_; }
      set {
        isSupervisor_ = value;
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 16;
    private string state_ = "";
    public string State {
      get { return state_; }
      set {
        state_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrgName" field.</summary>
    public const int OrgNameFieldNumber = 17;
    private string orgName_ = "";
    public string OrgName {
      get { return orgName_; }
      set {
        orgName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrgAddr" field.</summary>
    public const int OrgAddrFieldNumber = 18;
    private string orgAddr_ = "";
    public string OrgAddr {
      get { return orgAddr_; }
      set {
        orgAddr_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TimeZone" field.</summary>
    public const int TimeZoneFieldNumber = 20;
    private string timeZone_ = "";
    public string TimeZone {
      get { return timeZone_; }
      set {
        timeZone_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DLS" field.</summary>
    public const int DLSFieldNumber = 21;
    private bool dLS_;
    /// <summary>
    ///  DayLightSavings
    /// </summary>
    public bool DLS {
      get { return dLS_; }
      set {
        dLS_ = value;
      }
    }

    /// <summary>Field number for the "photo" field.</summary>
    public const int PhotoFieldNumber = 22;
    private string photo_ = "";
    public string Photo {
      get { return photo_; }
      set {
        photo_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PEmployeeRow);
    }

    public bool Equals(PEmployeeRow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (DriverName != other.DriverName) return false;
      if (UserName != other.UserName) return false;
      if (Email != other.Email) return false;
      if (Password != other.Password) return false;
      if (License != other.License) return false;
      if (Country != other.Country) return false;
      if (Signature != other.Signature) return false;
      if (Domain != other.Domain) return false;
      if (Cycle != other.Cycle) return false;
      if (HOSExcept != other.HOSExcept) return false;
      if (ApplyDTS != other.ApplyDTS) return false;
      if (TZ != other.TZ) return false;
      if (HomeAddress != other.HomeAddress) return false;
      if (IsSupervisor != other.IsSupervisor) return false;
      if (State != other.State) return false;
      if (OrgName != other.OrgName) return false;
      if (OrgAddr != other.OrgAddr) return false;
      if (TimeZone != other.TimeZone) return false;
      if (DLS != other.DLS) return false;
      if (Photo != other.Photo) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ID.Length != 0) hash ^= ID.GetHashCode();
      if (DriverName.Length != 0) hash ^= DriverName.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (License.Length != 0) hash ^= License.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (Cycle != 0) hash ^= Cycle.GetHashCode();
      if (HOSExcept != 0) hash ^= HOSExcept.GetHashCode();
      if (ApplyDTS != 0) hash ^= ApplyDTS.GetHashCode();
      if (TZ != 0F) hash ^= TZ.GetHashCode();
      if (HomeAddress.Length != 0) hash ^= HomeAddress.GetHashCode();
      if (IsSupervisor != false) hash ^= IsSupervisor.GetHashCode();
      if (State.Length != 0) hash ^= State.GetHashCode();
      if (OrgName.Length != 0) hash ^= OrgName.GetHashCode();
      if (OrgAddr.Length != 0) hash ^= OrgAddr.GetHashCode();
      if (TimeZone.Length != 0) hash ^= TimeZone.GetHashCode();
      if (DLS != false) hash ^= DLS.GetHashCode();
      if (Photo.Length != 0) hash ^= Photo.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ID);
      }
      if (DriverName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DriverName);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserName);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Email);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Password);
      }
      if (License.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(License);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Country);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Signature);
      }
      if (Domain.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Domain);
      }
      if (Cycle != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Cycle);
      }
      if (HOSExcept != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(HOSExcept);
      }
      if (ApplyDTS != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ApplyDTS);
      }
      if (TZ != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(TZ);
      }
      if (HomeAddress.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(HomeAddress);
      }
      if (IsSupervisor != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsSupervisor);
      }
      if (State.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(State);
      }
      if (OrgName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(OrgName);
      }
      if (OrgAddr.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(OrgAddr);
      }
      if (TimeZone.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(TimeZone);
      }
      if (DLS != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(DLS);
      }
      if (Photo.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Photo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ID);
      }
      if (DriverName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DriverName);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (License.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(License);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
      }
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (Cycle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cycle);
      }
      if (HOSExcept != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HOSExcept);
      }
      if (ApplyDTS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplyDTS);
      }
      if (TZ != 0F) {
        size += 1 + 4;
      }
      if (HomeAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HomeAddress);
      }
      if (IsSupervisor != false) {
        size += 1 + 1;
      }
      if (State.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(State);
      }
      if (OrgName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrgName);
      }
      if (OrgAddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrgAddr);
      }
      if (TimeZone.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TimeZone);
      }
      if (DLS != false) {
        size += 2 + 1;
      }
      if (Photo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Photo);
      }
      return size;
    }

    public void MergeFrom(PEmployeeRow other) {
      if (other == null) {
        return;
      }
      if (other.ID.Length != 0) {
        ID = other.ID;
      }
      if (other.DriverName.Length != 0) {
        DriverName = other.DriverName;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.License.Length != 0) {
        License = other.License;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      if (other.Cycle != 0) {
        Cycle = other.Cycle;
      }
      if (other.HOSExcept != 0) {
        HOSExcept = other.HOSExcept;
      }
      if (other.ApplyDTS != 0) {
        ApplyDTS = other.ApplyDTS;
      }
      if (other.TZ != 0F) {
        TZ = other.TZ;
      }
      if (other.HomeAddress.Length != 0) {
        HomeAddress = other.HomeAddress;
      }
      if (other.IsSupervisor != false) {
        IsSupervisor = other.IsSupervisor;
      }
      if (other.State.Length != 0) {
        State = other.State;
      }
      if (other.OrgName.Length != 0) {
        OrgName = other.OrgName;
      }
      if (other.OrgAddr.Length != 0) {
        OrgAddr = other.OrgAddr;
      }
      if (other.TimeZone.Length != 0) {
        TimeZone = other.TimeZone;
      }
      if (other.DLS != false) {
        DLS = other.DLS;
      }
      if (other.Photo.Length != 0) {
        Photo = other.Photo;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ID = input.ReadString();
            break;
          }
          case 18: {
            DriverName = input.ReadString();
            break;
          }
          case 26: {
            UserName = input.ReadString();
            break;
          }
          case 34: {
            Email = input.ReadString();
            break;
          }
          case 42: {
            Password = input.ReadString();
            break;
          }
          case 50: {
            License = input.ReadString();
            break;
          }
          case 58: {
            Country = input.ReadString();
            break;
          }
          case 66: {
            Signature = input.ReadString();
            break;
          }
          case 74: {
            Domain = input.ReadString();
            break;
          }
          case 80: {
            Cycle = input.ReadInt32();
            break;
          }
          case 88: {
            HOSExcept = input.ReadInt32();
            break;
          }
          case 96: {
            ApplyDTS = input.ReadInt32();
            break;
          }
          case 109: {
            TZ = input.ReadFloat();
            break;
          }
          case 114: {
            HomeAddress = input.ReadString();
            break;
          }
          case 120: {
            IsSupervisor = input.ReadBool();
            break;
          }
          case 130: {
            State = input.ReadString();
            break;
          }
          case 138: {
            OrgName = input.ReadString();
            break;
          }
          case 146: {
            OrgAddr = input.ReadString();
            break;
          }
          case 162: {
            TimeZone = input.ReadString();
            break;
          }
          case 168: {
            DLS = input.ReadBool();
            break;
          }
          case 178: {
            Photo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PTimeLogRow : pb::IMessage<PTimeLogRow> {
    private static readonly pb::MessageParser<PTimeLogRow> _parser = new pb::MessageParser<PTimeLogRow>(() => new PTimeLogRow());
    public static pb::MessageParser<PTimeLogRow> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PTimeLogRow() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PTimeLogRow(PTimeLogRow other) : this() {
      event_ = other.event_;
      logTime_ = other.logTime_;
      signed_ = other.signed_;
      tLID_ = other.tLID_;
      type_ = other.type_;
      odo_ = other.odo_;
      logbookstopid_ = other.logbookstopid_;
      eqNo_ = other.eqNo_;
      lat_ = other.lat_;
      lon_ = other.lon_;
      comment_ = other.comment_;
      driverId_ = other.driverId_;
      state_ = other.state_;
      boxID_ = other.boxID_;
      oLT_ = other.oLT_;
      editor_ = other.editor_;
      tZ_ = other.tZ_;
      dST_ = other.dST_;
      addr_ = other.addr_;
      arGeo_ = other.arGeo_;
      coDriver_ = other.coDriver_;
      qualifyRadiusRule_ = other.qualifyRadiusRule_;
    }

    public PTimeLogRow Clone() {
      return new PTimeLogRow(this);
    }

    /// <summary>Field number for the "Event" field.</summary>
    public const int EventFieldNumber = 1;
    private int event_;
    public int Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "LogTime" field.</summary>
    public const int LogTimeFieldNumber = 2;
    private long logTime_;
    public long LogTime {
      get { return logTime_; }
      set {
        logTime_ = value;
      }
    }

    /// <summary>Field number for the "Signed" field.</summary>
    public const int SignedFieldNumber = 3;
    private bool signed_;
    public bool Signed {
      get { return signed_; }
      set {
        signed_ = value;
      }
    }

    /// <summary>Field number for the "TLID" field.</summary>
    public const int TLIDFieldNumber = 4;
    private int tLID_;
    public int TLID {
      get { return tLID_; }
      set {
        tLID_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 5;
    private int type_;
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Odo" field.</summary>
    public const int OdoFieldNumber = 6;
    private int odo_;
    public int Odo {
      get { return odo_; }
      set {
        odo_ = value;
      }
    }

    /// <summary>Field number for the "Logbookstopid" field.</summary>
    public const int LogbookstopidFieldNumber = 7;
    private int logbookstopid_;
    /// <summary>
    /// 30 min break -> make an assignement = AuditLogic.ThirtyMinutesOffDutyStart
    /// </summary>
    public int Logbookstopid {
      get { return logbookstopid_; }
      set {
        logbookstopid_ = value;
      }
    }

    /// <summary>Field number for the "EqNo" field.</summary>
    public const int EqNoFieldNumber = 8;
    private string eqNo_ = "";
    public string EqNo {
      get { return eqNo_; }
      set {
        eqNo_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Lat" field.</summary>
    public const int LatFieldNumber = 9;
    private float lat_;
    public float Lat {
      get { return lat_; }
      set {
        lat_ = value;
      }
    }

    /// <summary>Field number for the "Lon" field.</summary>
    public const int LonFieldNumber = 10;
    private float lon_;
    public float Lon {
      get { return lon_; }
      set {
        lon_ = value;
      }
    }

    /// <summary>Field number for the "Comment" field.</summary>
    public const int CommentFieldNumber = 11;
    private string comment_ = "";
    public string Comment {
      get { return comment_; }
      set {
        comment_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DriverId" field.</summary>
    public const int DriverIdFieldNumber = 12;
    private string driverId_ = "";
    public string DriverId {
      get { return driverId_; }
      set {
        driverId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 13;
    private string state_ = "";
    /// <summary>
    ///  Devin Added for audit
    /// </summary>
    public string State {
      get { return state_; }
      set {
        state_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BoxID" field.</summary>
    public const int BoxIDFieldNumber = 14;
    private int boxID_;
    public int BoxID {
      get { return boxID_; }
      set {
        boxID_ = value;
      }
    }

    /// <summary>Field number for the "OLT" field.</summary>
    public const int OLTFieldNumber = 15;
    private long oLT_;
    /// <summary>
    /// OrigLogTime = DateTime.MinValue; // used when editing timelog record
    /// </summary>
    public long OLT {
      get { return oLT_; }
      set {
        oLT_ = value;
      }
    }

    /// <summary>Field number for the "Editor" field.</summary>
    public const int EditorFieldNumber = 16;
    private int editor_;
    /// <summary>
    ///  1- TimeLog has been edited
    /// </summary>
    public int Editor {
      get { return editor_; }
      set {
        editor_ = value;
      }
    }

    /// <summary>Field number for the "TZ" field.</summary>
    public const int TZFieldNumber = 17;
    private float tZ_;
    public float TZ {
      get { return tZ_; }
      set {
        tZ_ = value;
      }
    }

    /// <summary>Field number for the "DST" field.</summary>
    public const int DSTFieldNumber = 18;
    private float dST_;
    /// <summary>
    /// TimeZone(TZ) added recently -> ApplyDST(DTS) Daylight Saving Time
    /// </summary>
    public float DST {
      get { return dST_; }
      set {
        dST_ = value;
      }
    }

    /// <summary>Field number for the "Addr" field.</summary>
    public const int AddrFieldNumber = 19;
    private string addr_ = "";
    public string Addr {
      get { return addr_; }
      set {
        addr_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "arGeo" field.</summary>
    public const int ArGeoFieldNumber = 20;
    private int arGeo_;
    /// <summary>
    ///  -1 - No Reverse Geocoding, 0- Reverse Geocoding ( address resolution) is in progress, 1 - DONE
    /// </summary>
    public int ArGeo {
      get { return arGeo_; }
      set {
        arGeo_ = value;
      }
    }

    /// <summary>Field number for the "CoDriver" field.</summary>
    public const int CoDriverFieldNumber = 21;
    private string coDriver_ = "";
    public string CoDriver {
      get { return coDriver_; }
      set {
        coDriver_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "QualifyRadiusRule" field.</summary>
    public const int QualifyRadiusRuleFieldNumber = 22;
    private int qualifyRadiusRule_;
    public int QualifyRadiusRule {
      get { return qualifyRadiusRule_; }
      set {
        qualifyRadiusRule_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PTimeLogRow);
    }

    public bool Equals(PTimeLogRow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Event != other.Event) return false;
      if (LogTime != other.LogTime) return false;
      if (Signed != other.Signed) return false;
      if (TLID != other.TLID) return false;
      if (Type != other.Type) return false;
      if (Odo != other.Odo) return false;
      if (Logbookstopid != other.Logbookstopid) return false;
      if (EqNo != other.EqNo) return false;
      if (Lat != other.Lat) return false;
      if (Lon != other.Lon) return false;
      if (Comment != other.Comment) return false;
      if (DriverId != other.DriverId) return false;
      if (State != other.State) return false;
      if (BoxID != other.BoxID) return false;
      if (OLT != other.OLT) return false;
      if (Editor != other.Editor) return false;
      if (TZ != other.TZ) return false;
      if (DST != other.DST) return false;
      if (Addr != other.Addr) return false;
      if (ArGeo != other.ArGeo) return false;
      if (CoDriver != other.CoDriver) return false;
      if (QualifyRadiusRule != other.QualifyRadiusRule) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Event != 0) hash ^= Event.GetHashCode();
      if (LogTime != 0L) hash ^= LogTime.GetHashCode();
      if (Signed != false) hash ^= Signed.GetHashCode();
      if (TLID != 0) hash ^= TLID.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Odo != 0) hash ^= Odo.GetHashCode();
      if (Logbookstopid != 0) hash ^= Logbookstopid.GetHashCode();
      if (EqNo.Length != 0) hash ^= EqNo.GetHashCode();
      if (Lat != 0F) hash ^= Lat.GetHashCode();
      if (Lon != 0F) hash ^= Lon.GetHashCode();
      if (Comment.Length != 0) hash ^= Comment.GetHashCode();
      if (DriverId.Length != 0) hash ^= DriverId.GetHashCode();
      if (State.Length != 0) hash ^= State.GetHashCode();
      if (BoxID != 0) hash ^= BoxID.GetHashCode();
      if (OLT != 0L) hash ^= OLT.GetHashCode();
      if (Editor != 0) hash ^= Editor.GetHashCode();
      if (TZ != 0F) hash ^= TZ.GetHashCode();
      if (DST != 0F) hash ^= DST.GetHashCode();
      if (Addr.Length != 0) hash ^= Addr.GetHashCode();
      if (ArGeo != 0) hash ^= ArGeo.GetHashCode();
      if (CoDriver.Length != 0) hash ^= CoDriver.GetHashCode();
      if (QualifyRadiusRule != 0) hash ^= QualifyRadiusRule.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Event != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Event);
      }
      if (LogTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LogTime);
      }
      if (Signed != false) {
        output.WriteRawTag(24);
        output.WriteBool(Signed);
      }
      if (TLID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TLID);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Type);
      }
      if (Odo != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Odo);
      }
      if (Logbookstopid != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Logbookstopid);
      }
      if (EqNo.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(EqNo);
      }
      if (Lat != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Lat);
      }
      if (Lon != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Lon);
      }
      if (Comment.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Comment);
      }
      if (DriverId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(DriverId);
      }
      if (State.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(State);
      }
      if (BoxID != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(BoxID);
      }
      if (OLT != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(OLT);
      }
      if (Editor != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Editor);
      }
      if (TZ != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(TZ);
      }
      if (DST != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(DST);
      }
      if (Addr.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Addr);
      }
      if (ArGeo != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(ArGeo);
      }
      if (CoDriver.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(CoDriver);
      }
      if (QualifyRadiusRule != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(QualifyRadiusRule);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Event != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Event);
      }
      if (LogTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LogTime);
      }
      if (Signed != false) {
        size += 1 + 1;
      }
      if (TLID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TLID);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Odo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Odo);
      }
      if (Logbookstopid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Logbookstopid);
      }
      if (EqNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EqNo);
      }
      if (Lat != 0F) {
        size += 1 + 4;
      }
      if (Lon != 0F) {
        size += 1 + 4;
      }
      if (Comment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      if (DriverId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DriverId);
      }
      if (State.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(State);
      }
      if (BoxID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoxID);
      }
      if (OLT != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OLT);
      }
      if (Editor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Editor);
      }
      if (TZ != 0F) {
        size += 2 + 4;
      }
      if (DST != 0F) {
        size += 2 + 4;
      }
      if (Addr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Addr);
      }
      if (ArGeo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ArGeo);
      }
      if (CoDriver.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CoDriver);
      }
      if (QualifyRadiusRule != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(QualifyRadiusRule);
      }
      return size;
    }

    public void MergeFrom(PTimeLogRow other) {
      if (other == null) {
        return;
      }
      if (other.Event != 0) {
        Event = other.Event;
      }
      if (other.LogTime != 0L) {
        LogTime = other.LogTime;
      }
      if (other.Signed != false) {
        Signed = other.Signed;
      }
      if (other.TLID != 0) {
        TLID = other.TLID;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Odo != 0) {
        Odo = other.Odo;
      }
      if (other.Logbookstopid != 0) {
        Logbookstopid = other.Logbookstopid;
      }
      if (other.EqNo.Length != 0) {
        EqNo = other.EqNo;
      }
      if (other.Lat != 0F) {
        Lat = other.Lat;
      }
      if (other.Lon != 0F) {
        Lon = other.Lon;
      }
      if (other.Comment.Length != 0) {
        Comment = other.Comment;
      }
      if (other.DriverId.Length != 0) {
        DriverId = other.DriverId;
      }
      if (other.State.Length != 0) {
        State = other.State;
      }
      if (other.BoxID != 0) {
        BoxID = other.BoxID;
      }
      if (other.OLT != 0L) {
        OLT = other.OLT;
      }
      if (other.Editor != 0) {
        Editor = other.Editor;
      }
      if (other.TZ != 0F) {
        TZ = other.TZ;
      }
      if (other.DST != 0F) {
        DST = other.DST;
      }
      if (other.Addr.Length != 0) {
        Addr = other.Addr;
      }
      if (other.ArGeo != 0) {
        ArGeo = other.ArGeo;
      }
      if (other.CoDriver.Length != 0) {
        CoDriver = other.CoDriver;
      }
      if (other.QualifyRadiusRule != 0) {
        QualifyRadiusRule = other.QualifyRadiusRule;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Event = input.ReadInt32();
            break;
          }
          case 16: {
            LogTime = input.ReadInt64();
            break;
          }
          case 24: {
            Signed = input.ReadBool();
            break;
          }
          case 32: {
            TLID = input.ReadInt32();
            break;
          }
          case 40: {
            Type = input.ReadInt32();
            break;
          }
          case 48: {
            Odo = input.ReadInt32();
            break;
          }
          case 56: {
            Logbookstopid = input.ReadInt32();
            break;
          }
          case 66: {
            EqNo = input.ReadString();
            break;
          }
          case 77: {
            Lat = input.ReadFloat();
            break;
          }
          case 85: {
            Lon = input.ReadFloat();
            break;
          }
          case 90: {
            Comment = input.ReadString();
            break;
          }
          case 98: {
            DriverId = input.ReadString();
            break;
          }
          case 106: {
            State = input.ReadString();
            break;
          }
          case 112: {
            BoxID = input.ReadInt32();
            break;
          }
          case 120: {
            OLT = input.ReadInt64();
            break;
          }
          case 128: {
            Editor = input.ReadInt32();
            break;
          }
          case 141: {
            TZ = input.ReadFloat();
            break;
          }
          case 149: {
            DST = input.ReadFloat();
            break;
          }
          case 154: {
            Addr = input.ReadString();
            break;
          }
          case 160: {
            ArGeo = input.ReadInt32();
            break;
          }
          case 170: {
            CoDriver = input.ReadString();
            break;
          }
          case 176: {
            QualifyRadiusRule = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PHosAlertRow : pb::IMessage<PHosAlertRow> {
    private static readonly pb::MessageParser<PHosAlertRow> _parser = new pb::MessageParser<PHosAlertRow>(() => new PHosAlertRow());
    public static pb::MessageParser<PHosAlertRow> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PHosAlertRow() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PHosAlertRow(PHosAlertRow other) : this() {
      dt_ = other.dt_;
      ondutyruleviolated_ = other.ondutyruleviolated_;
      drivingruleviolated_ = other.drivingruleviolated_;
      alertType_ = other.alertType_;
      drivingAvailable_ = other.drivingAvailable_;
      ondutyAvailable_ = other.ondutyAvailable_;
    }

    public PHosAlertRow Clone() {
      return new PHosAlertRow(this);
    }

    /// <summary>Field number for the "dt" field.</summary>
    public const int DtFieldNumber = 1;
    private long dt_;
    public long Dt {
      get { return dt_; }
      set {
        dt_ = value;
      }
    }

    /// <summary>Field number for the "ondutyruleviolated" field.</summary>
    public const int OndutyruleviolatedFieldNumber = 2;
    private string ondutyruleviolated_ = "";
    public string Ondutyruleviolated {
      get { return ondutyruleviolated_; }
      set {
        ondutyruleviolated_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "drivingruleviolated" field.</summary>
    public const int DrivingruleviolatedFieldNumber = 3;
    private string drivingruleviolated_ = "";
    /// <summary>
    ///  rule violated
    /// </summary>
    public string Drivingruleviolated {
      get { return drivingruleviolated_; }
      set {
        drivingruleviolated_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alertType" field.</summary>
    public const int AlertTypeFieldNumber = 4;
    private int alertType_;
    public int AlertType {
      get { return alertType_; }
      set {
        alertType_ = value;
      }
    }

    /// <summary>Field number for the "drivingAvailable" field.</summary>
    public const int DrivingAvailableFieldNumber = 5;
    private int drivingAvailable_;
    /// <summary>
    ///  driving time available
    /// </summary>
    public int DrivingAvailable {
      get { return drivingAvailable_; }
      set {
        drivingAvailable_ = value;
      }
    }

    /// <summary>Field number for the "ondutyAvailable" field.</summary>
    public const int OndutyAvailableFieldNumber = 6;
    private int ondutyAvailable_;
    /// <summary>
    ///  On Duty time available
    /// </summary>
    public int OndutyAvailable {
      get { return ondutyAvailable_; }
      set {
        ondutyAvailable_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PHosAlertRow);
    }

    public bool Equals(PHosAlertRow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dt != other.Dt) return false;
      if (Ondutyruleviolated != other.Ondutyruleviolated) return false;
      if (Drivingruleviolated != other.Drivingruleviolated) return false;
      if (AlertType != other.AlertType) return false;
      if (DrivingAvailable != other.DrivingAvailable) return false;
      if (OndutyAvailable != other.OndutyAvailable) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Dt != 0L) hash ^= Dt.GetHashCode();
      if (Ondutyruleviolated.Length != 0) hash ^= Ondutyruleviolated.GetHashCode();
      if (Drivingruleviolated.Length != 0) hash ^= Drivingruleviolated.GetHashCode();
      if (AlertType != 0) hash ^= AlertType.GetHashCode();
      if (DrivingAvailable != 0) hash ^= DrivingAvailable.GetHashCode();
      if (OndutyAvailable != 0) hash ^= OndutyAvailable.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Dt != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Dt);
      }
      if (Ondutyruleviolated.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ondutyruleviolated);
      }
      if (Drivingruleviolated.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Drivingruleviolated);
      }
      if (AlertType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AlertType);
      }
      if (DrivingAvailable != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DrivingAvailable);
      }
      if (OndutyAvailable != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OndutyAvailable);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Dt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Dt);
      }
      if (Ondutyruleviolated.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ondutyruleviolated);
      }
      if (Drivingruleviolated.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Drivingruleviolated);
      }
      if (AlertType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AlertType);
      }
      if (DrivingAvailable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrivingAvailable);
      }
      if (OndutyAvailable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OndutyAvailable);
      }
      return size;
    }

    public void MergeFrom(PHosAlertRow other) {
      if (other == null) {
        return;
      }
      if (other.Dt != 0L) {
        Dt = other.Dt;
      }
      if (other.Ondutyruleviolated.Length != 0) {
        Ondutyruleviolated = other.Ondutyruleviolated;
      }
      if (other.Drivingruleviolated.Length != 0) {
        Drivingruleviolated = other.Drivingruleviolated;
      }
      if (other.AlertType != 0) {
        AlertType = other.AlertType;
      }
      if (other.DrivingAvailable != 0) {
        DrivingAvailable = other.DrivingAvailable;
      }
      if (other.OndutyAvailable != 0) {
        OndutyAvailable = other.OndutyAvailable;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Dt = input.ReadInt64();
            break;
          }
          case 18: {
            Ondutyruleviolated = input.ReadString();
            break;
          }
          case 26: {
            Drivingruleviolated = input.ReadString();
            break;
          }
          case 32: {
            AlertType = input.ReadInt32();
            break;
          }
          case 40: {
            DrivingAvailable = input.ReadInt32();
            break;
          }
          case 48: {
            OndutyAvailable = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PRecapRow : pb::IMessage<PRecapRow> {
    private static readonly pb::MessageParser<PRecapRow> _parser = new pb::MessageParser<PRecapRow>(() => new PRecapRow());
    public static pb::MessageParser<PRecapRow> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PRecapRow() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PRecapRow(PRecapRow other) : this() {
      date_ = other.date_;
      today_ = other.today_;
      cycleTotal_ = other.cycleTotal_;
      cycleAvailable_ = other.cycleAvailable_;
      cycle_ = other.cycle_;
      sent_ = other.sent_;
    }

    public PRecapRow Clone() {
      return new PRecapRow(this);
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 1;
    private long date_;
    public long Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "today" field.</summary>
    public const int TodayFieldNumber = 2;
    private int today_;
    public int Today {
      get { return today_; }
      set {
        today_ = value;
      }
    }

    /// <summary>Field number for the "cycleTotal" field.</summary>
    public const int CycleTotalFieldNumber = 3;
    private int cycleTotal_;
    public int CycleTotal {
      get { return cycleTotal_; }
      set {
        cycleTotal_ = value;
      }
    }

    /// <summary>Field number for the "cycleAvailable" field.</summary>
    public const int CycleAvailableFieldNumber = 4;
    private int cycleAvailable_;
    public int CycleAvailable {
      get { return cycleAvailable_; }
      set {
        cycleAvailable_ = value;
      }
    }

    /// <summary>Field number for the "cycle" field.</summary>
    public const int CycleFieldNumber = 5;
    private string cycle_ = "";
    public string Cycle {
      get { return cycle_; }
      set {
        cycle_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sent" field.</summary>
    public const int SentFieldNumber = 6;
    private bool sent_;
    /// <summary>
    ///  DataRowIdentifier DataRowID { get { return DataRowIdentifier.RecapRow; } }
    /// </summary>
    public bool Sent {
      get { return sent_; }
      set {
        sent_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PRecapRow);
    }

    public bool Equals(PRecapRow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Date != other.Date) return false;
      if (Today != other.Today) return false;
      if (CycleTotal != other.CycleTotal) return false;
      if (CycleAvailable != other.CycleAvailable) return false;
      if (Cycle != other.Cycle) return false;
      if (Sent != other.Sent) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Date != 0L) hash ^= Date.GetHashCode();
      if (Today != 0) hash ^= Today.GetHashCode();
      if (CycleTotal != 0) hash ^= CycleTotal.GetHashCode();
      if (CycleAvailable != 0) hash ^= CycleAvailable.GetHashCode();
      if (Cycle.Length != 0) hash ^= Cycle.GetHashCode();
      if (Sent != false) hash ^= Sent.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Date != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Date);
      }
      if (Today != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Today);
      }
      if (CycleTotal != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CycleTotal);
      }
      if (CycleAvailable != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CycleAvailable);
      }
      if (Cycle.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Cycle);
      }
      if (Sent != false) {
        output.WriteRawTag(48);
        output.WriteBool(Sent);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Date != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Date);
      }
      if (Today != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Today);
      }
      if (CycleTotal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CycleTotal);
      }
      if (CycleAvailable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CycleAvailable);
      }
      if (Cycle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cycle);
      }
      if (Sent != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(PRecapRow other) {
      if (other == null) {
        return;
      }
      if (other.Date != 0L) {
        Date = other.Date;
      }
      if (other.Today != 0) {
        Today = other.Today;
      }
      if (other.CycleTotal != 0) {
        CycleTotal = other.CycleTotal;
      }
      if (other.CycleAvailable != 0) {
        CycleAvailable = other.CycleAvailable;
      }
      if (other.Cycle.Length != 0) {
        Cycle = other.Cycle;
      }
      if (other.Sent != false) {
        Sent = other.Sent;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Date = input.ReadInt64();
            break;
          }
          case 16: {
            Today = input.ReadInt32();
            break;
          }
          case 24: {
            CycleTotal = input.ReadInt32();
            break;
          }
          case 32: {
            CycleAvailable = input.ReadInt32();
            break;
          }
          case 42: {
            Cycle = input.ReadString();
            break;
          }
          case 48: {
            Sent = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PRuleSelectionHistoryRow : pb::IMessage<PRuleSelectionHistoryRow> {
    private static readonly pb::MessageParser<PRuleSelectionHistoryRow> _parser = new pb::MessageParser<PRuleSelectionHistoryRow>(() => new PRuleSelectionHistoryRow());
    public static pb::MessageParser<PRuleSelectionHistoryRow> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[12]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PRuleSelectionHistoryRow() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PRuleSelectionHistoryRow(PRuleSelectionHistoryRow other) : this() {
      rSHID_ = other.rSHID_;
      ruleid_ = other.ruleid_;
      selectTime_ = other.selectTime_;
      country_ = other.country_;
      ruleException_ = other.ruleException_;
      sent_ = other.sent_;
    }

    public PRuleSelectionHistoryRow Clone() {
      return new PRuleSelectionHistoryRow(this);
    }

    /// <summary>Field number for the "RSHID" field.</summary>
    public const int RSHIDFieldNumber = 1;
    private int rSHID_;
    public int RSHID {
      get { return rSHID_; }
      set {
        rSHID_ = value;
      }
    }

    /// <summary>Field number for the "Ruleid" field.</summary>
    public const int RuleidFieldNumber = 2;
    private int ruleid_;
    /// <summary>
    /// HOSCYCLE::NONE;
    /// </summary>
    public int Ruleid {
      get { return ruleid_; }
      set {
        ruleid_ = value;
      }
    }

    /// <summary>Field number for the "selectTime" field.</summary>
    public const int SelectTimeFieldNumber = 3;
    private long selectTime_;
    /// <summary>
    /// DateTime selectTime = DateTime::MinValue;
    /// </summary>
    public long SelectTime {
      get { return selectTime_; }
      set {
        selectTime_ = value;
      }
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 4;
    private string country_ = "";
    public string Country {
      get { return country_; }
      set {
        country_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ruleException" field.</summary>
    public const int RuleExceptionFieldNumber = 5;
    private int ruleException_;
    /// <summary>
    /// RuleExceptions::None;
    /// </summary>
    public int RuleException {
      get { return ruleException_; }
      set {
        ruleException_ = value;
      }
    }

    /// <summary>Field number for the "sent" field.</summary>
    public const int SentFieldNumber = 6;
    private bool sent_;
    public bool Sent {
      get { return sent_; }
      set {
        sent_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PRuleSelectionHistoryRow);
    }

    public bool Equals(PRuleSelectionHistoryRow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RSHID != other.RSHID) return false;
      if (Ruleid != other.Ruleid) return false;
      if (SelectTime != other.SelectTime) return false;
      if (Country != other.Country) return false;
      if (RuleException != other.RuleException) return false;
      if (Sent != other.Sent) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (RSHID != 0) hash ^= RSHID.GetHashCode();
      if (Ruleid != 0) hash ^= Ruleid.GetHashCode();
      if (SelectTime != 0L) hash ^= SelectTime.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (RuleException != 0) hash ^= RuleException.GetHashCode();
      if (Sent != false) hash ^= Sent.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RSHID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RSHID);
      }
      if (Ruleid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ruleid);
      }
      if (SelectTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SelectTime);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Country);
      }
      if (RuleException != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RuleException);
      }
      if (Sent != false) {
        output.WriteRawTag(48);
        output.WriteBool(Sent);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RSHID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RSHID);
      }
      if (Ruleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ruleid);
      }
      if (SelectTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SelectTime);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (RuleException != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RuleException);
      }
      if (Sent != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(PRuleSelectionHistoryRow other) {
      if (other == null) {
        return;
      }
      if (other.RSHID != 0) {
        RSHID = other.RSHID;
      }
      if (other.Ruleid != 0) {
        Ruleid = other.Ruleid;
      }
      if (other.SelectTime != 0L) {
        SelectTime = other.SelectTime;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      if (other.RuleException != 0) {
        RuleException = other.RuleException;
      }
      if (other.Sent != false) {
        Sent = other.Sent;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RSHID = input.ReadInt32();
            break;
          }
          case 16: {
            Ruleid = input.ReadInt32();
            break;
          }
          case 24: {
            SelectTime = input.ReadInt64();
            break;
          }
          case 34: {
            Country = input.ReadString();
            break;
          }
          case 40: {
            RuleException = input.ReadInt32();
            break;
          }
          case 48: {
            Sent = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PTimeLogRowList : pb::IMessage<PTimeLogRowList> {
    private static readonly pb::MessageParser<PTimeLogRowList> _parser = new pb::MessageParser<PTimeLogRowList>(() => new PTimeLogRowList());
    public static pb::MessageParser<PTimeLogRowList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[13]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PTimeLogRowList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PTimeLogRowList(PTimeLogRowList other) : this() {
      list_ = other.list_.Clone();
    }

    public PTimeLogRowList Clone() {
      return new PTimeLogRowList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Protobuf.MyCommProto.CommPackets.PTimeLogRow> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Protobuf.MyCommProto.CommPackets.PTimeLogRow.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PTimeLogRow> list_ = new pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PTimeLogRow>();
    public pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PTimeLogRow> List {
      get { return list_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PTimeLogRowList);
    }

    public bool Equals(PTimeLogRowList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    public void MergeFrom(PTimeLogRowList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PRecapRowList : pb::IMessage<PRecapRowList> {
    private static readonly pb::MessageParser<PRecapRowList> _parser = new pb::MessageParser<PRecapRowList>(() => new PRecapRowList());
    public static pb::MessageParser<PRecapRowList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[14]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PRecapRowList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PRecapRowList(PRecapRowList other) : this() {
      list_ = other.list_.Clone();
    }

    public PRecapRowList Clone() {
      return new PRecapRowList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Protobuf.MyCommProto.CommPackets.PRecapRow> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Protobuf.MyCommProto.CommPackets.PRecapRow.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PRecapRow> list_ = new pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PRecapRow>();
    public pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PRecapRow> List {
      get { return list_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PRecapRowList);
    }

    public bool Equals(PRecapRowList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    public void MergeFrom(PRecapRowList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PRuleSelectionHistoryRowList : pb::IMessage<PRuleSelectionHistoryRowList> {
    private static readonly pb::MessageParser<PRuleSelectionHistoryRowList> _parser = new pb::MessageParser<PRuleSelectionHistoryRowList>(() => new PRuleSelectionHistoryRowList());
    public static pb::MessageParser<PRuleSelectionHistoryRowList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[15]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PRuleSelectionHistoryRowList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PRuleSelectionHistoryRowList(PRuleSelectionHistoryRowList other) : this() {
      list_ = other.list_.Clone();
    }

    public PRuleSelectionHistoryRowList Clone() {
      return new PRuleSelectionHistoryRowList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Protobuf.MyCommProto.CommPackets.PRuleSelectionHistoryRow> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Protobuf.MyCommProto.CommPackets.PRuleSelectionHistoryRow.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PRuleSelectionHistoryRow> list_ = new pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PRuleSelectionHistoryRow>();
    public pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PRuleSelectionHistoryRow> List {
      get { return list_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PRuleSelectionHistoryRowList);
    }

    public bool Equals(PRuleSelectionHistoryRowList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    public void MergeFrom(PRuleSelectionHistoryRowList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// =========================Inspection Objects======================================================
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PInspectionItem : pb::IMessage<PInspectionItem> {
    private static readonly pb::MessageParser<PInspectionItem> _parser = new pb::MessageParser<PInspectionItem>(() => new PInspectionItem());
    public static pb::MessageParser<PInspectionItem> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[16]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PInspectionItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PInspectionItem(PInspectionItem other) : this() {
      iID_ = other.iID_;
      cID_ = other.cID_;
      defect_ = other.defect_;
      defAbbr_ = other.defAbbr_;
      defLevel_ = other.defLevel_;
      comments_ = other.comments_;
      isDefect_ = other.isDefect_;
      mediaFiles_ = other.mediaFiles_.Clone();
      attID_ = other.attID_;
      clrd_ = other.clrd_;
      clrdId_ = other.clrdId_;
      clrdName_ = other.clrdName_;
    }

    public PInspectionItem Clone() {
      return new PInspectionItem(this);
    }

    /// <summary>Field number for the "iID" field.</summary>
    public const int IIDFieldNumber = 1;
    private int iID_;
    public int IID {
      get { return iID_; }
      set {
        iID_ = value;
      }
    }

    /// <summary>Field number for the "cID" field.</summary>
    public const int CIDFieldNumber = 2;
    private int cID_;
    public int CID {
      get { return cID_; }
      set {
        cID_ = value;
      }
    }

    /// <summary>Field number for the "Defect" field.</summary>
    public const int DefectFieldNumber = 3;
    private string defect_ = "";
    public string Defect {
      get { return defect_; }
      set {
        defect_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DefAbbr" field.</summary>
    public const int DefAbbrFieldNumber = 4;
    private string defAbbr_ = "";
    public string DefAbbr {
      get { return defAbbr_; }
      set {
        defAbbr_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DefLevel" field.</summary>
    public const int DefLevelFieldNumber = 5;
    private int defLevel_;
    /// <summary>
    /// DefLevels DefLevel = DefLevels.Defect; //0- minor, 1- major
    /// </summary>
    public int DefLevel {
      get { return defLevel_; }
      set {
        defLevel_ = value;
      }
    }

    /// <summary>Field number for the "Comments" field.</summary>
    public const int CommentsFieldNumber = 6;
    private string comments_ = "";
    public string Comments {
      get { return comments_; }
      set {
        comments_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isDefect" field.</summary>
    public const int IsDefectFieldNumber = 7;
    private bool isDefect_;
    /// <summary>
    ///  To be able to track which item is actually added as deffect so that we can mark them in CategoryAdapter
    /// </summary>
    public bool IsDefect {
      get { return isDefect_; }
      set {
        isDefect_ = value;
      }
    }

    /// <summary>Field number for the "media_files" field.</summary>
    public const int MediaFilesFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_mediaFiles_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> mediaFiles_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  to keep all media files accociated with this Inspection Item
    /// </summary>
    public pbc::RepeatedField<string> MediaFiles {
      get { return mediaFiles_; }
    }

    /// <summary>Field number for the "attID" field.</summary>
    public const int AttIDFieldNumber = 9;
    private string attID_ = "";
    /// <summary>
    ///  if empty this belongs to vehicle -> otherwise to attachment (e.g. trailor)
    /// </summary>
    public string AttID {
      get { return attID_; }
      set {
        attID_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Clrd" field.</summary>
    public const int ClrdFieldNumber = 10;
    private string clrd_ = "";
    public string Clrd {
      get { return clrd_; }
      set {
        clrd_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClrdId" field.</summary>
    public const int ClrdIdFieldNumber = 11;
    private string clrdId_ = "";
    public string ClrdId {
      get { return clrdId_; }
      set {
        clrdId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClrdName" field.</summary>
    public const int ClrdNameFieldNumber = 12;
    private string clrdName_ = "";
    public string ClrdName {
      get { return clrdName_; }
      set {
        clrdName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PInspectionItem);
    }

    public bool Equals(PInspectionItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IID != other.IID) return false;
      if (CID != other.CID) return false;
      if (Defect != other.Defect) return false;
      if (DefAbbr != other.DefAbbr) return false;
      if (DefLevel != other.DefLevel) return false;
      if (Comments != other.Comments) return false;
      if (IsDefect != other.IsDefect) return false;
      if(!mediaFiles_.Equals(other.mediaFiles_)) return false;
      if (AttID != other.AttID) return false;
      if (Clrd != other.Clrd) return false;
      if (ClrdId != other.ClrdId) return false;
      if (ClrdName != other.ClrdName) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (IID != 0) hash ^= IID.GetHashCode();
      if (CID != 0) hash ^= CID.GetHashCode();
      if (Defect.Length != 0) hash ^= Defect.GetHashCode();
      if (DefAbbr.Length != 0) hash ^= DefAbbr.GetHashCode();
      if (DefLevel != 0) hash ^= DefLevel.GetHashCode();
      if (Comments.Length != 0) hash ^= Comments.GetHashCode();
      if (IsDefect != false) hash ^= IsDefect.GetHashCode();
      hash ^= mediaFiles_.GetHashCode();
      if (AttID.Length != 0) hash ^= AttID.GetHashCode();
      if (Clrd.Length != 0) hash ^= Clrd.GetHashCode();
      if (ClrdId.Length != 0) hash ^= ClrdId.GetHashCode();
      if (ClrdName.Length != 0) hash ^= ClrdName.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IID);
      }
      if (CID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CID);
      }
      if (Defect.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Defect);
      }
      if (DefAbbr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DefAbbr);
      }
      if (DefLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DefLevel);
      }
      if (Comments.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Comments);
      }
      if (IsDefect != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsDefect);
      }
      mediaFiles_.WriteTo(output, _repeated_mediaFiles_codec);
      if (AttID.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(AttID);
      }
      if (Clrd.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Clrd);
      }
      if (ClrdId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ClrdId);
      }
      if (ClrdName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ClrdName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (IID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IID);
      }
      if (CID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CID);
      }
      if (Defect.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Defect);
      }
      if (DefAbbr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefAbbr);
      }
      if (DefLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefLevel);
      }
      if (Comments.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comments);
      }
      if (IsDefect != false) {
        size += 1 + 1;
      }
      size += mediaFiles_.CalculateSize(_repeated_mediaFiles_codec);
      if (AttID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AttID);
      }
      if (Clrd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Clrd);
      }
      if (ClrdId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClrdId);
      }
      if (ClrdName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClrdName);
      }
      return size;
    }

    public void MergeFrom(PInspectionItem other) {
      if (other == null) {
        return;
      }
      if (other.IID != 0) {
        IID = other.IID;
      }
      if (other.CID != 0) {
        CID = other.CID;
      }
      if (other.Defect.Length != 0) {
        Defect = other.Defect;
      }
      if (other.DefAbbr.Length != 0) {
        DefAbbr = other.DefAbbr;
      }
      if (other.DefLevel != 0) {
        DefLevel = other.DefLevel;
      }
      if (other.Comments.Length != 0) {
        Comments = other.Comments;
      }
      if (other.IsDefect != false) {
        IsDefect = other.IsDefect;
      }
      mediaFiles_.Add(other.mediaFiles_);
      if (other.AttID.Length != 0) {
        AttID = other.AttID;
      }
      if (other.Clrd.Length != 0) {
        Clrd = other.Clrd;
      }
      if (other.ClrdId.Length != 0) {
        ClrdId = other.ClrdId;
      }
      if (other.ClrdName.Length != 0) {
        ClrdName = other.ClrdName;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IID = input.ReadInt32();
            break;
          }
          case 16: {
            CID = input.ReadInt32();
            break;
          }
          case 26: {
            Defect = input.ReadString();
            break;
          }
          case 34: {
            DefAbbr = input.ReadString();
            break;
          }
          case 40: {
            DefLevel = input.ReadInt32();
            break;
          }
          case 50: {
            Comments = input.ReadString();
            break;
          }
          case 56: {
            IsDefect = input.ReadBool();
            break;
          }
          case 66: {
            mediaFiles_.AddEntriesFrom(input, _repeated_mediaFiles_codec);
            break;
          }
          case 74: {
            AttID = input.ReadString();
            break;
          }
          case 82: {
            Clrd = input.ReadString();
            break;
          }
          case 90: {
            ClrdId = input.ReadString();
            break;
          }
          case 98: {
            ClrdName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PInspectionItemList : pb::IMessage<PInspectionItemList> {
    private static readonly pb::MessageParser<PInspectionItemList> _parser = new pb::MessageParser<PInspectionItemList>(() => new PInspectionItemList());
    public static pb::MessageParser<PInspectionItemList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[17]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PInspectionItemList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PInspectionItemList(PInspectionItemList other) : this() {
      list_ = other.list_.Clone();
    }

    public PInspectionItemList Clone() {
      return new PInspectionItemList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionItem> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Protobuf.MyCommProto.CommPackets.PInspectionItem.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionItem> list_ = new pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionItem>();
    public pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionItem> List {
      get { return list_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PInspectionItemList);
    }

    public bool Equals(PInspectionItemList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    public void MergeFrom(PInspectionItemList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PInspectionCategoryRow : pb::IMessage<PInspectionCategoryRow> {
    private static readonly pb::MessageParser<PInspectionCategoryRow> _parser = new pb::MessageParser<PInspectionCategoryRow>(() => new PInspectionCategoryRow());
    public static pb::MessageParser<PInspectionCategoryRow> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[18]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PInspectionCategoryRow() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PInspectionCategoryRow(PInspectionCategoryRow other) : this() {
      cID_ = other.cID_;
      desc_ = other.desc_;
      groupID_ = other.groupID_;
      barCodeID_ = other.barCodeID_;
      bCLoc_ = other.bCLoc_;
      Items = other.items_ != null ? other.Items.Clone() : null;
      isChecked_ = other.isChecked_;
    }

    public PInspectionCategoryRow Clone() {
      return new PInspectionCategoryRow(this);
    }

    /// <summary>Field number for the "cID" field.</summary>
    public const int CIDFieldNumber = 1;
    private int cID_;
    public int CID {
      get { return cID_; }
      set {
        cID_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 2;
    private string desc_ = "";
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "groupID" field.</summary>
    public const int GroupIDFieldNumber = 3;
    private int groupID_;
    public int GroupID {
      get { return groupID_; }
      set {
        groupID_ = value;
      }
    }

    /// <summary>Field number for the "BarCodeID" field.</summary>
    public const int BarCodeIDFieldNumber = 4;
    private int barCodeID_;
    /// <summary>
    ///  It's  to scan to inspect this category !!!!!!!!
    /// </summary>
    public int BarCodeID {
      get { return barCodeID_; }
      set {
        barCodeID_ = value;
      }
    }

    /// <summary>Field number for the "BCLoc" field.</summary>
    public const int BCLocFieldNumber = 5;
    private string bCLoc_ = "";
    public string BCLoc {
      get { return bCLoc_; }
      set {
        bCLoc_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 6;
    private global::Google.Protobuf.MyCommProto.CommPackets.PInspectionItemList items_;
    /// <summary>
    /// repeated PInspectionItem items=6;
    /// </summary>
    public global::Google.Protobuf.MyCommProto.CommPackets.PInspectionItemList Items {
      get { return items_; }
      set {
        items_ = value;
      }
    }

    /// <summary>Field number for the "isChecked" field.</summary>
    public const int IsCheckedFieldNumber = 7;
    private int isChecked_;
    /// <summary>
    ///  To be able to track which Category is check when driver does the circle check
    ///  bool isChecked = false;   // need to be changed  ------------====================----------------------===========
    /// </summary>
    public int IsChecked {
      get { return isChecked_; }
      set {
        isChecked_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PInspectionCategoryRow);
    }

    public bool Equals(PInspectionCategoryRow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CID != other.CID) return false;
      if (Desc != other.Desc) return false;
      if (GroupID != other.GroupID) return false;
      if (BarCodeID != other.BarCodeID) return false;
      if (BCLoc != other.BCLoc) return false;
      if (!object.Equals(Items, other.Items)) return false;
      if (IsChecked != other.IsChecked) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (CID != 0) hash ^= CID.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (GroupID != 0) hash ^= GroupID.GetHashCode();
      if (BarCodeID != 0) hash ^= BarCodeID.GetHashCode();
      if (BCLoc.Length != 0) hash ^= BCLoc.GetHashCode();
      if (items_ != null) hash ^= Items.GetHashCode();
      if (IsChecked != 0) hash ^= IsChecked.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CID);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Desc);
      }
      if (GroupID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GroupID);
      }
      if (BarCodeID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BarCodeID);
      }
      if (BCLoc.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BCLoc);
      }
      if (items_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Items);
      }
      if (IsChecked != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(IsChecked);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (CID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CID);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (GroupID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupID);
      }
      if (BarCodeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BarCodeID);
      }
      if (BCLoc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BCLoc);
      }
      if (items_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Items);
      }
      if (IsChecked != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsChecked);
      }
      return size;
    }

    public void MergeFrom(PInspectionCategoryRow other) {
      if (other == null) {
        return;
      }
      if (other.CID != 0) {
        CID = other.CID;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.GroupID != 0) {
        GroupID = other.GroupID;
      }
      if (other.BarCodeID != 0) {
        BarCodeID = other.BarCodeID;
      }
      if (other.BCLoc.Length != 0) {
        BCLoc = other.BCLoc;
      }
      if (other.items_ != null) {
        if (items_ == null) {
          items_ = new global::Google.Protobuf.MyCommProto.CommPackets.PInspectionItemList();
        }
        Items.MergeFrom(other.Items);
      }
      if (other.IsChecked != 0) {
        IsChecked = other.IsChecked;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CID = input.ReadInt32();
            break;
          }
          case 18: {
            Desc = input.ReadString();
            break;
          }
          case 24: {
            GroupID = input.ReadInt32();
            break;
          }
          case 32: {
            BarCodeID = input.ReadInt32();
            break;
          }
          case 42: {
            BCLoc = input.ReadString();
            break;
          }
          case 50: {
            if (items_ == null) {
              items_ = new global::Google.Protobuf.MyCommProto.CommPackets.PInspectionItemList();
            }
            input.ReadMessage(items_);
            break;
          }
          case 56: {
            IsChecked = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ==========for report==============================================
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PInspectionRow : pb::IMessage<PInspectionRow> {
    private static readonly pb::MessageParser<PInspectionRow> _parser = new pb::MessageParser<PInspectionRow>(() => new PInspectionRow());
    public static pb::MessageParser<PInspectionRow> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[19]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PInspectionRow() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PInspectionRow(PInspectionRow other) : this() {
      insRID_ = other.insRID_;
      insTime_ = other.insTime_;
      eqID_ = other.eqID_;
      odo_ = other.odo_;
      signed_ = other.signed_;
      defects_ = other.defects_.Clone();
      drId_ = other.drId_;
      drName_ = other.drName_;
      insType_ = other.insType_;
      cbCats_ = other.cbCats_;
      cbACats_ = other.cbACats_;
      boxID_ = other.boxID_;
      tzOf_ = other.tzOf_;
      lat_ = other.lat_;
      lon_ = other.lon_;
      attID_ = other.attID_;
    }

    public PInspectionRow Clone() {
      return new PInspectionRow(this);
    }

    /// <summary>Field number for the "InsRID" field.</summary>
    public const int InsRIDFieldNumber = 1;
    private int insRID_;
    public int InsRID {
      get { return insRID_; }
      set {
        insRID_ = value;
      }
    }

    /// <summary>Field number for the "InsTime" field.</summary>
    public const int InsTimeFieldNumber = 2;
    private long insTime_;
    /// <summary>
    /// DateTime InsTime = TimeUtil.DateTime_Now();
    /// </summary>
    public long InsTime {
      get { return insTime_; }
      set {
        insTime_ = value;
      }
    }

    /// <summary>Field number for the "EqID" field.</summary>
    public const int EqIDFieldNumber = 3;
    private string eqID_ = "";
    /// <summary>
    ///  LocationInfoRow location = new LocationInfoRow();
    /// </summary>
    public string EqID {
      get { return eqID_; }
      set {
        eqID_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "odo" field.</summary>
    public const int OdoFieldNumber = 4;
    private int odo_;
    public int Odo {
      get { return odo_; }
      set {
        odo_ = value;
      }
    }

    /// <summary>Field number for the "Signed" field.</summary>
    public const int SignedFieldNumber = 5;
    private bool signed_;
    public bool Signed {
      get { return signed_; }
      set {
        signed_ = value;
      }
    }

    /// <summary>Field number for the "Defects" field.</summary>
    public const int DefectsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionItem> _repeated_defects_codec
        = pb::FieldCodec.ForMessage(50, global::Google.Protobuf.MyCommProto.CommPackets.PInspectionItem.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionItem> defects_ = new pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionItem>();
    /// <summary>
    /// List&lt;InspectionItem> Defects = new List&lt;InspectionItem>();// ArrayList Defects = new ArrayList();
    /// </summary>
    public pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionItem> Defects {
      get { return defects_; }
    }

    /// <summary>Field number for the "drId" field.</summary>
    public const int DrIdFieldNumber = 7;
    private string drId_ = "";
    public string DrId {
      get { return drId_; }
      set {
        drId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "drName" field.</summary>
    public const int DrNameFieldNumber = 8;
    private string drName_ = "";
    public string DrName {
      get { return drName_; }
      set {
        drName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "InsType" field.</summary>
    public const int InsTypeFieldNumber = 9;
    private int insType_;
    /// <summary>
    /// InspectionType InsType = InspectionType.None;
    /// </summary>
    public int InsType {
      get { return insType_; }
      set {
        insType_ = value;
      }
    }

    /// <summary>Field number for the "cb_cats" field.</summary>
    public const int CbCatsFieldNumber = 10;
    private string cbCats_ = "";
    public string CbCats {
      get { return cbCats_; }
      set {
        cbCats_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cb_a_cats" field.</summary>
    public const int CbACatsFieldNumber = 11;
    private string cbACats_ = "";
    /// <summary>
    ///  Devin request ?? not sure if it's right -> Contains all checked category for attachment
    /// </summary>
    public string CbACats {
      get { return cbACats_; }
      set {
        cbACats_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BoxID" field.</summary>
    public const int BoxIDFieldNumber = 12;
    private int boxID_;
    public int BoxID {
      get { return boxID_; }
      set {
        boxID_ = value;
      }
    }

    /// <summary>Field number for the "tzOf" field.</summary>
    public const int TzOfFieldNumber = 13;
    private int tzOf_;
    /// <summary>
    ///  UTC offset 
    /// </summary>
    public int TzOf {
      get { return tzOf_; }
      set {
        tzOf_ = value;
      }
    }

    /// <summary>Field number for the "Lat" field.</summary>
    public const int LatFieldNumber = 14;
    private float lat_;
    public float Lat {
      get { return lat_; }
      set {
        lat_ = value;
      }
    }

    /// <summary>Field number for the "Lon" field.</summary>
    public const int LonFieldNumber = 15;
    private float lon_;
    public float Lon {
      get { return lon_; }
      set {
        lon_ = value;
      }
    }

    /// <summary>Field number for the "attID" field.</summary>
    public const int AttIDFieldNumber = 16;
    private string attID_ = "";
    /// <summary>
    ///  AttachmentID -> need when inspection contains attachment (e.g. trailor) 
    /// </summary>
    public string AttID {
      get { return attID_; }
      set {
        attID_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PInspectionRow);
    }

    public bool Equals(PInspectionRow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InsRID != other.InsRID) return false;
      if (InsTime != other.InsTime) return false;
      if (EqID != other.EqID) return false;
      if (Odo != other.Odo) return false;
      if (Signed != other.Signed) return false;
      if(!defects_.Equals(other.defects_)) return false;
      if (DrId != other.DrId) return false;
      if (DrName != other.DrName) return false;
      if (InsType != other.InsType) return false;
      if (CbCats != other.CbCats) return false;
      if (CbACats != other.CbACats) return false;
      if (BoxID != other.BoxID) return false;
      if (TzOf != other.TzOf) return false;
      if (Lat != other.Lat) return false;
      if (Lon != other.Lon) return false;
      if (AttID != other.AttID) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (InsRID != 0) hash ^= InsRID.GetHashCode();
      if (InsTime != 0L) hash ^= InsTime.GetHashCode();
      if (EqID.Length != 0) hash ^= EqID.GetHashCode();
      if (Odo != 0) hash ^= Odo.GetHashCode();
      if (Signed != false) hash ^= Signed.GetHashCode();
      hash ^= defects_.GetHashCode();
      if (DrId.Length != 0) hash ^= DrId.GetHashCode();
      if (DrName.Length != 0) hash ^= DrName.GetHashCode();
      if (InsType != 0) hash ^= InsType.GetHashCode();
      if (CbCats.Length != 0) hash ^= CbCats.GetHashCode();
      if (CbACats.Length != 0) hash ^= CbACats.GetHashCode();
      if (BoxID != 0) hash ^= BoxID.GetHashCode();
      if (TzOf != 0) hash ^= TzOf.GetHashCode();
      if (Lat != 0F) hash ^= Lat.GetHashCode();
      if (Lon != 0F) hash ^= Lon.GetHashCode();
      if (AttID.Length != 0) hash ^= AttID.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (InsRID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InsRID);
      }
      if (InsTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(InsTime);
      }
      if (EqID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EqID);
      }
      if (Odo != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Odo);
      }
      if (Signed != false) {
        output.WriteRawTag(40);
        output.WriteBool(Signed);
      }
      defects_.WriteTo(output, _repeated_defects_codec);
      if (DrId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DrId);
      }
      if (DrName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DrName);
      }
      if (InsType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(InsType);
      }
      if (CbCats.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CbCats);
      }
      if (CbACats.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CbACats);
      }
      if (BoxID != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(BoxID);
      }
      if (TzOf != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(TzOf);
      }
      if (Lat != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(Lat);
      }
      if (Lon != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(Lon);
      }
      if (AttID.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(AttID);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (InsRID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InsRID);
      }
      if (InsTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InsTime);
      }
      if (EqID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EqID);
      }
      if (Odo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Odo);
      }
      if (Signed != false) {
        size += 1 + 1;
      }
      size += defects_.CalculateSize(_repeated_defects_codec);
      if (DrId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DrId);
      }
      if (DrName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DrName);
      }
      if (InsType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InsType);
      }
      if (CbCats.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CbCats);
      }
      if (CbACats.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CbACats);
      }
      if (BoxID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoxID);
      }
      if (TzOf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TzOf);
      }
      if (Lat != 0F) {
        size += 1 + 4;
      }
      if (Lon != 0F) {
        size += 1 + 4;
      }
      if (AttID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AttID);
      }
      return size;
    }

    public void MergeFrom(PInspectionRow other) {
      if (other == null) {
        return;
      }
      if (other.InsRID != 0) {
        InsRID = other.InsRID;
      }
      if (other.InsTime != 0L) {
        InsTime = other.InsTime;
      }
      if (other.EqID.Length != 0) {
        EqID = other.EqID;
      }
      if (other.Odo != 0) {
        Odo = other.Odo;
      }
      if (other.Signed != false) {
        Signed = other.Signed;
      }
      defects_.Add(other.defects_);
      if (other.DrId.Length != 0) {
        DrId = other.DrId;
      }
      if (other.DrName.Length != 0) {
        DrName = other.DrName;
      }
      if (other.InsType != 0) {
        InsType = other.InsType;
      }
      if (other.CbCats.Length != 0) {
        CbCats = other.CbCats;
      }
      if (other.CbACats.Length != 0) {
        CbACats = other.CbACats;
      }
      if (other.BoxID != 0) {
        BoxID = other.BoxID;
      }
      if (other.TzOf != 0) {
        TzOf = other.TzOf;
      }
      if (other.Lat != 0F) {
        Lat = other.Lat;
      }
      if (other.Lon != 0F) {
        Lon = other.Lon;
      }
      if (other.AttID.Length != 0) {
        AttID = other.AttID;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InsRID = input.ReadInt32();
            break;
          }
          case 16: {
            InsTime = input.ReadInt64();
            break;
          }
          case 26: {
            EqID = input.ReadString();
            break;
          }
          case 32: {
            Odo = input.ReadInt32();
            break;
          }
          case 40: {
            Signed = input.ReadBool();
            break;
          }
          case 50: {
            defects_.AddEntriesFrom(input, _repeated_defects_codec);
            break;
          }
          case 58: {
            DrId = input.ReadString();
            break;
          }
          case 66: {
            DrName = input.ReadString();
            break;
          }
          case 72: {
            InsType = input.ReadInt32();
            break;
          }
          case 82: {
            CbCats = input.ReadString();
            break;
          }
          case 90: {
            CbACats = input.ReadString();
            break;
          }
          case 96: {
            BoxID = input.ReadInt32();
            break;
          }
          case 104: {
            TzOf = input.ReadInt32();
            break;
          }
          case 117: {
            Lat = input.ReadFloat();
            break;
          }
          case 125: {
            Lon = input.ReadFloat();
            break;
          }
          case 130: {
            AttID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PInspectionRowList : pb::IMessage<PInspectionRowList> {
    private static readonly pb::MessageParser<PInspectionRowList> _parser = new pb::MessageParser<PInspectionRowList>(() => new PInspectionRowList());
    public static pb::MessageParser<PInspectionRowList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[20]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PInspectionRowList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PInspectionRowList(PInspectionRowList other) : this() {
      list_ = other.list_.Clone();
    }

    public PInspectionRowList Clone() {
      return new PInspectionRowList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionRow> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Protobuf.MyCommProto.CommPackets.PInspectionRow.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionRow> list_ = new pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionRow>();
    public pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionRow> List {
      get { return list_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PInspectionRowList);
    }

    public bool Equals(PInspectionRowList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    public void MergeFrom(PInspectionRowList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PInspectionCategoryRowList : pb::IMessage<PInspectionCategoryRowList> {
    private static readonly pb::MessageParser<PInspectionCategoryRowList> _parser = new pb::MessageParser<PInspectionCategoryRowList>(() => new PInspectionCategoryRowList());
    public static pb::MessageParser<PInspectionCategoryRowList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[21]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PInspectionCategoryRowList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PInspectionCategoryRowList(PInspectionCategoryRowList other) : this() {
      list_ = other.list_.Clone();
    }

    public PInspectionCategoryRowList Clone() {
      return new PInspectionCategoryRowList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionCategoryRow> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Protobuf.MyCommProto.CommPackets.PInspectionCategoryRow.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionCategoryRow> list_ = new pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionCategoryRow>();
    public pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionCategoryRow> List {
      get { return list_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PInspectionCategoryRowList);
    }

    public bool Equals(PInspectionCategoryRowList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    public void MergeFrom(PInspectionCategoryRowList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// these 2 messages used to send inpection reports data to server
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PInspectionReportMediaFile : pb::IMessage<PInspectionReportMediaFile> {
    private static readonly pb::MessageParser<PInspectionReportMediaFile> _parser = new pb::MessageParser<PInspectionReportMediaFile>(() => new PInspectionReportMediaFile());
    public static pb::MessageParser<PInspectionReportMediaFile> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[22]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PInspectionReportMediaFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PInspectionReportMediaFile(PInspectionReportMediaFile other) : this() {
      fname_ = other.fname_;
      payload_ = other.payload_;
    }

    public PInspectionReportMediaFile Clone() {
      return new PInspectionReportMediaFile(this);
    }

    /// <summary>Field number for the "fname" field.</summary>
    public const int FnameFieldNumber = 1;
    private string fname_ = "";
    public string Fname {
      get { return fname_; }
      set {
        fname_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PInspectionReportMediaFile);
    }

    public bool Equals(PInspectionReportMediaFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fname != other.Fname) return false;
      if (Payload != other.Payload) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Fname.Length != 0) hash ^= Fname.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Fname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fname);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Payload);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Fname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fname);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      return size;
    }

    public void MergeFrom(PInspectionReportMediaFile other) {
      if (other == null) {
        return;
      }
      if (other.Fname.Length != 0) {
        Fname = other.Fname;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Fname = input.ReadString();
            break;
          }
          case 18: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PInspectionReports : pb::IMessage<PInspectionReports> {
    private static readonly pb::MessageParser<PInspectionReports> _parser = new pb::MessageParser<PInspectionReports>(() => new PInspectionReports());
    public static pb::MessageParser<PInspectionReports> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[23]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PInspectionReports() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PInspectionReports(PInspectionReports other) : this() {
      Reports = other.reports_ != null ? other.Reports.Clone() : null;
      mfiles_ = other.mfiles_.Clone();
    }

    public PInspectionReports Clone() {
      return new PInspectionReports(this);
    }

    /// <summary>Field number for the "reports" field.</summary>
    public const int ReportsFieldNumber = 1;
    private global::Google.Protobuf.MyCommProto.CommPackets.PInspectionRowList reports_;
    public global::Google.Protobuf.MyCommProto.CommPackets.PInspectionRowList Reports {
      get { return reports_; }
      set {
        reports_ = value;
      }
    }

    /// <summary>Field number for the "mfiles" field.</summary>
    public const int MfilesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionReportMediaFile> _repeated_mfiles_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Protobuf.MyCommProto.CommPackets.PInspectionReportMediaFile.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionReportMediaFile> mfiles_ = new pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionReportMediaFile>();
    public pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionReportMediaFile> Mfiles {
      get { return mfiles_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PInspectionReports);
    }

    public bool Equals(PInspectionReports other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Reports, other.Reports)) return false;
      if(!mfiles_.Equals(other.mfiles_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (reports_ != null) hash ^= Reports.GetHashCode();
      hash ^= mfiles_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (reports_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Reports);
      }
      mfiles_.WriteTo(output, _repeated_mfiles_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (reports_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reports);
      }
      size += mfiles_.CalculateSize(_repeated_mfiles_codec);
      return size;
    }

    public void MergeFrom(PInspectionReports other) {
      if (other == null) {
        return;
      }
      if (other.reports_ != null) {
        if (reports_ == null) {
          reports_ = new global::Google.Protobuf.MyCommProto.CommPackets.PInspectionRowList();
        }
        Reports.MergeFrom(other.Reports);
      }
      mfiles_.Add(other.mfiles_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (reports_ == null) {
              reports_ = new global::Google.Protobuf.MyCommProto.CommPackets.PInspectionRowList();
            }
            input.ReadMessage(reports_);
            break;
          }
          case 18: {
            mfiles_.AddEntriesFrom(input, _repeated_mfiles_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// this message to send new created vehicles data to the server
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PVehicleReports : pb::IMessage<PVehicleReports> {
    private static readonly pb::MessageParser<PVehicleReports> _parser = new pb::MessageParser<PVehicleReports>(() => new PVehicleReports());
    public static pb::MessageParser<PVehicleReports> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[24]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PVehicleReports() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PVehicleReports(PVehicleReports other) : this() {
      Vehicles = other.vehicles_ != null ? other.Vehicles.Clone() : null;
      mfiles_ = other.mfiles_.Clone();
    }

    public PVehicleReports Clone() {
      return new PVehicleReports(this);
    }

    /// <summary>Field number for the "vehicles" field.</summary>
    public const int VehiclesFieldNumber = 1;
    private global::Google.Protobuf.MyCommProto.CommPackets.PBoxIdVehicleRowList vehicles_;
    public global::Google.Protobuf.MyCommProto.CommPackets.PBoxIdVehicleRowList Vehicles {
      get { return vehicles_; }
      set {
        vehicles_ = value;
      }
    }

    /// <summary>Field number for the "mfiles" field.</summary>
    public const int MfilesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionReportMediaFile> _repeated_mfiles_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Protobuf.MyCommProto.CommPackets.PInspectionReportMediaFile.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionReportMediaFile> mfiles_ = new pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionReportMediaFile>();
    public pbc::RepeatedField<global::Google.Protobuf.MyCommProto.CommPackets.PInspectionReportMediaFile> Mfiles {
      get { return mfiles_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PVehicleReports);
    }

    public bool Equals(PVehicleReports other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Vehicles, other.Vehicles)) return false;
      if(!mfiles_.Equals(other.mfiles_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (vehicles_ != null) hash ^= Vehicles.GetHashCode();
      hash ^= mfiles_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (vehicles_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Vehicles);
      }
      mfiles_.WriteTo(output, _repeated_mfiles_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (vehicles_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vehicles);
      }
      size += mfiles_.CalculateSize(_repeated_mfiles_codec);
      return size;
    }

    public void MergeFrom(PVehicleReports other) {
      if (other == null) {
        return;
      }
      if (other.vehicles_ != null) {
        if (vehicles_ == null) {
          vehicles_ = new global::Google.Protobuf.MyCommProto.CommPackets.PBoxIdVehicleRowList();
        }
        Vehicles.MergeFrom(other.Vehicles);
      }
      mfiles_.Add(other.mfiles_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (vehicles_ == null) {
              vehicles_ = new global::Google.Protobuf.MyCommProto.CommPackets.PBoxIdVehicleRowList();
            }
            input.ReadMessage(vehicles_);
            break;
          }
          case 18: {
            mfiles_.AddEntriesFrom(input, _repeated_mfiles_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ClsLoginMD : pb::IMessage<ClsLoginMD> {
    private static readonly pb::MessageParser<ClsLoginMD> _parser = new pb::MessageParser<ClsLoginMD>(() => new ClsLoginMD());
    public static pb::MessageParser<ClsLoginMD> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[25]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ClsLoginMD() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ClsLoginMD(ClsLoginMD other) : this() {
      res_ = other.res_;
      cid_ = other.cid_;
      user_ = other.user_;
      pass_ = other.pass_;
      resourceID_ = other.resourceID_;
      drName_ = other.drName_;
      Vehicles = other.vehicles_ != null ? other.Vehicles.Clone() : null;
      Config = other.config_ != null ? other.Config.Clone() : null;
      DriverProf = other.driverProf_ != null ? other.DriverProf.Clone() : null;
    }

    public ClsLoginMD Clone() {
      return new ClsLoginMD(this);
    }

    /// <summary>Field number for the "res" field.</summary>
    public const int ResFieldNumber = 1;
    private bool res_;
    public bool Res {
      get { return res_; }
      set {
        res_ = value;
      }
    }

    /// <summary>Field number for the "cid" field.</summary>
    public const int CidFieldNumber = 2;
    private int cid_;
    public int Cid {
      get { return cid_; }
      set {
        cid_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 3;
    private string user_ = "";
    public string User {
      get { return user_; }
      set {
        user_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pass" field.</summary>
    public const int PassFieldNumber = 4;
    private string pass_ = "";
    public string Pass {
      get { return pass_; }
      set {
        pass_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ResourceID" field.</summary>
    public const int ResourceIDFieldNumber = 5;
    private int resourceID_;
    public int ResourceID {
      get { return resourceID_; }
      set {
        resourceID_ = value;
      }
    }

    /// <summary>Field number for the "DrName" field.</summary>
    public const int DrNameFieldNumber = 6;
    private string drName_ = "";
    public string DrName {
      get { return drName_; }
      set {
        drName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vehicles" field.</summary>
    public const int VehiclesFieldNumber = 7;
    private global::Google.Protobuf.MyCommProto.CommPackets.PBoxIdVehicleRowList vehicles_;
    /// <summary>
    ///  repeated
    /// </summary>
    public global::Google.Protobuf.MyCommProto.CommPackets.PBoxIdVehicleRowList Vehicles {
      get { return vehicles_; }
      set {
        vehicles_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 8;
    private global::Google.Protobuf.MyCommProto.CommPackets.PConfiguration config_;
    public global::Google.Protobuf.MyCommProto.CommPackets.PConfiguration Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "driverProf" field.</summary>
    public const int DriverProfFieldNumber = 9;
    private global::Google.Protobuf.MyCommProto.CommPackets.PEmployeeRow driverProf_;
    public global::Google.Protobuf.MyCommProto.CommPackets.PEmployeeRow DriverProf {
      get { return driverProf_; }
      set {
        driverProf_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ClsLoginMD);
    }

    public bool Equals(ClsLoginMD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Res != other.Res) return false;
      if (Cid != other.Cid) return false;
      if (User != other.User) return false;
      if (Pass != other.Pass) return false;
      if (ResourceID != other.ResourceID) return false;
      if (DrName != other.DrName) return false;
      if (!object.Equals(Vehicles, other.Vehicles)) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (!object.Equals(DriverProf, other.DriverProf)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Res != false) hash ^= Res.GetHashCode();
      if (Cid != 0) hash ^= Cid.GetHashCode();
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (Pass.Length != 0) hash ^= Pass.GetHashCode();
      if (ResourceID != 0) hash ^= ResourceID.GetHashCode();
      if (DrName.Length != 0) hash ^= DrName.GetHashCode();
      if (vehicles_ != null) hash ^= Vehicles.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (driverProf_ != null) hash ^= DriverProf.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Res != false) {
        output.WriteRawTag(8);
        output.WriteBool(Res);
      }
      if (Cid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cid);
      }
      if (User.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(User);
      }
      if (Pass.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Pass);
      }
      if (ResourceID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ResourceID);
      }
      if (DrName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DrName);
      }
      if (vehicles_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Vehicles);
      }
      if (config_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Config);
      }
      if (driverProf_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(DriverProf);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Res != false) {
        size += 1 + 1;
      }
      if (Cid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cid);
      }
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (Pass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pass);
      }
      if (ResourceID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResourceID);
      }
      if (DrName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DrName);
      }
      if (vehicles_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vehicles);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (driverProf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DriverProf);
      }
      return size;
    }

    public void MergeFrom(ClsLoginMD other) {
      if (other == null) {
        return;
      }
      if (other.Res != false) {
        Res = other.Res;
      }
      if (other.Cid != 0) {
        Cid = other.Cid;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
      if (other.Pass.Length != 0) {
        Pass = other.Pass;
      }
      if (other.ResourceID != 0) {
        ResourceID = other.ResourceID;
      }
      if (other.DrName.Length != 0) {
        DrName = other.DrName;
      }
      if (other.vehicles_ != null) {
        if (vehicles_ == null) {
          vehicles_ = new global::Google.Protobuf.MyCommProto.CommPackets.PBoxIdVehicleRowList();
        }
        Vehicles.MergeFrom(other.Vehicles);
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Google.Protobuf.MyCommProto.CommPackets.PConfiguration();
        }
        Config.MergeFrom(other.Config);
      }
      if (other.driverProf_ != null) {
        if (driverProf_ == null) {
          driverProf_ = new global::Google.Protobuf.MyCommProto.CommPackets.PEmployeeRow();
        }
        DriverProf.MergeFrom(other.DriverProf);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Res = input.ReadBool();
            break;
          }
          case 16: {
            Cid = input.ReadInt32();
            break;
          }
          case 26: {
            User = input.ReadString();
            break;
          }
          case 34: {
            Pass = input.ReadString();
            break;
          }
          case 40: {
            ResourceID = input.ReadInt32();
            break;
          }
          case 50: {
            DrName = input.ReadString();
            break;
          }
          case 58: {
            if (vehicles_ == null) {
              vehicles_ = new global::Google.Protobuf.MyCommProto.CommPackets.PBoxIdVehicleRowList();
            }
            input.ReadMessage(vehicles_);
            break;
          }
          case 66: {
            if (config_ == null) {
              config_ = new global::Google.Protobuf.MyCommProto.CommPackets.PConfiguration();
            }
            input.ReadMessage(config_);
            break;
          }
          case 74: {
            if (driverProf_ == null) {
              driverProf_ = new global::Google.Protobuf.MyCommProto.CommPackets.PEmployeeRow();
            }
            input.ReadMessage(driverProf_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PMobileHB : pb::IMessage<PMobileHB> {
    private static readonly pb::MessageParser<PMobileHB> _parser = new pb::MessageParser<PMobileHB>(() => new PMobileHB());
    public static pb::MessageParser<PMobileHB> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[26]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PMobileHB() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PMobileHB(PMobileHB other) : this() {
      rid_ = other.rid_;
      lat_ = other.lat_;
      lon_ = other.lon_;
      spd_ = other.spd_;
      cog_ = other.cog_;
      ts_ = other.ts_;
    }

    public PMobileHB Clone() {
      return new PMobileHB(this);
    }

    /// <summary>Field number for the "rid" field.</summary>
    public const int RidFieldNumber = 1;
    private int rid_;
    public int Rid {
      get { return rid_; }
      set {
        rid_ = value;
      }
    }

    /// <summary>Field number for the "lat" field.</summary>
    public const int LatFieldNumber = 2;
    private float lat_;
    public float Lat {
      get { return lat_; }
      set {
        lat_ = value;
      }
    }

    /// <summary>Field number for the "lon" field.</summary>
    public const int LonFieldNumber = 3;
    private float lon_;
    public float Lon {
      get { return lon_; }
      set {
        lon_ = value;
      }
    }

    /// <summary>Field number for the "spd" field.</summary>
    public const int SpdFieldNumber = 4;
    private int spd_;
    public int Spd {
      get { return spd_; }
      set {
        spd_ = value;
      }
    }

    /// <summary>Field number for the "cog" field.</summary>
    public const int CogFieldNumber = 5;
    private int cog_;
    public int Cog {
      get { return cog_; }
      set {
        cog_ = value;
      }
    }

    /// <summary>Field number for the "ts" field.</summary>
    public const int TsFieldNumber = 6;
    private long ts_;
    public long Ts {
      get { return ts_; }
      set {
        ts_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PMobileHB);
    }

    public bool Equals(PMobileHB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rid != other.Rid) return false;
      if (Lat != other.Lat) return false;
      if (Lon != other.Lon) return false;
      if (Spd != other.Spd) return false;
      if (Cog != other.Cog) return false;
      if (Ts != other.Ts) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Rid != 0) hash ^= Rid.GetHashCode();
      if (Lat != 0F) hash ^= Lat.GetHashCode();
      if (Lon != 0F) hash ^= Lon.GetHashCode();
      if (Spd != 0) hash ^= Spd.GetHashCode();
      if (Cog != 0) hash ^= Cog.GetHashCode();
      if (Ts != 0L) hash ^= Ts.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Rid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rid);
      }
      if (Lat != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Lat);
      }
      if (Lon != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Lon);
      }
      if (Spd != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Spd);
      }
      if (Cog != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Cog);
      }
      if (Ts != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Ts);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Rid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rid);
      }
      if (Lat != 0F) {
        size += 1 + 4;
      }
      if (Lon != 0F) {
        size += 1 + 4;
      }
      if (Spd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Spd);
      }
      if (Cog != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cog);
      }
      if (Ts != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ts);
      }
      return size;
    }

    public void MergeFrom(PMobileHB other) {
      if (other == null) {
        return;
      }
      if (other.Rid != 0) {
        Rid = other.Rid;
      }
      if (other.Lat != 0F) {
        Lat = other.Lat;
      }
      if (other.Lon != 0F) {
        Lon = other.Lon;
      }
      if (other.Spd != 0) {
        Spd = other.Spd;
      }
      if (other.Cog != 0) {
        Cog = other.Cog;
      }
      if (other.Ts != 0L) {
        Ts = other.Ts;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rid = input.ReadInt32();
            break;
          }
          case 21: {
            Lat = input.ReadFloat();
            break;
          }
          case 29: {
            Lon = input.ReadFloat();
            break;
          }
          case 32: {
            Spd = input.ReadInt32();
            break;
          }
          case 40: {
            Cog = input.ReadInt32();
            break;
          }
          case 48: {
            Ts = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommPacket : pb::IMessage<CommPacket> {
    private static readonly pb::MessageParser<CommPacket> _parser = new pb::MessageParser<CommPacket>(() => new CommPacket());
    public static pb::MessageParser<CommPacket> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[27]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommPacket(CommPacket other) : this() {
      req_ = other.req_;
      rID_ = other.rID_;
      cID_ = other.cID_;
      user_ = other.user_;
      payload_ = other.payload_;
    }

    public CommPacket Clone() {
      return new CommPacket(this);
    }

    /// <summary>Field number for the "req" field.</summary>
    public const int ReqFieldNumber = 1;
    private int req_;
    public int Req {
      get { return req_; }
      set {
        req_ = value;
      }
    }

    /// <summary>Field number for the "rID" field.</summary>
    public const int RIDFieldNumber = 2;
    private int rID_;
    public int RID {
      get { return rID_; }
      set {
        rID_ = value;
      }
    }

    /// <summary>Field number for the "cID" field.</summary>
    public const int CIDFieldNumber = 3;
    private int cID_;
    public int CID {
      get { return cID_; }
      set {
        cID_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 4;
    private string user_ = "";
    public string User {
      get { return user_; }
      set {
        user_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 5;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CommPacket);
    }

    public bool Equals(CommPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Req != other.Req) return false;
      if (RID != other.RID) return false;
      if (CID != other.CID) return false;
      if (User != other.User) return false;
      if (Payload != other.Payload) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Req != 0) hash ^= Req.GetHashCode();
      if (RID != 0) hash ^= RID.GetHashCode();
      if (CID != 0) hash ^= CID.GetHashCode();
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Req != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Req);
      }
      if (RID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RID);
      }
      if (CID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CID);
      }
      if (User.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(User);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Payload);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Req != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Req);
      }
      if (RID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RID);
      }
      if (CID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CID);
      }
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      return size;
    }

    public void MergeFrom(CommPacket other) {
      if (other == null) {
        return;
      }
      if (other.Req != 0) {
        Req = other.Req;
      }
      if (other.RID != 0) {
        RID = other.RID;
      }
      if (other.CID != 0) {
        CID = other.CID;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Req = input.ReadInt32();
            break;
          }
          case 16: {
            RID = input.ReadInt32();
            break;
          }
          case 24: {
            CID = input.ReadInt32();
            break;
          }
          case 34: {
            User = input.ReadString();
            break;
          }
          case 42: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PRegister : pb::IMessage<PRegister> {
    private static readonly pb::MessageParser<PRegister> _parser = new pb::MessageParser<PRegister>(() => new PRegister());
    public static pb::MessageParser<PRegister> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MyCommProto.CommPackets.MyCsharpProto3CommReflection.Descriptor.MessageTypes[28]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PRegister() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PRegister(PRegister other) : this() {
      user_ = other.user_;
      pass_ = other.pass_;
      fname_ = other.fname_;
      email_ = other.email_;
    }

    public PRegister Clone() {
      return new PRegister(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private string user_ = "";
    public string User {
      get { return user_; }
      set {
        user_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pass" field.</summary>
    public const int PassFieldNumber = 2;
    private string pass_ = "";
    public string Pass {
      get { return pass_; }
      set {
        pass_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fname" field.</summary>
    public const int FnameFieldNumber = 3;
    private string fname_ = "";
    public string Fname {
      get { return fname_; }
      set {
        fname_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 4;
    private string email_ = "";
    public string Email {
      get { return email_; }
      set {
        email_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PRegister);
    }

    public bool Equals(PRegister other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (User != other.User) return false;
      if (Pass != other.Pass) return false;
      if (Fname != other.Fname) return false;
      if (Email != other.Email) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (Pass.Length != 0) hash ^= Pass.GetHashCode();
      if (Fname.Length != 0) hash ^= Fname.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (User.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(User);
      }
      if (Pass.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Pass);
      }
      if (Fname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Fname);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Email);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (Pass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pass);
      }
      if (Fname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fname);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      return size;
    }

    public void MergeFrom(PRegister other) {
      if (other == null) {
        return;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
      if (other.Pass.Length != 0) {
        Pass = other.Pass;
      }
      if (other.Fname.Length != 0) {
        Fname = other.Fname;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            User = input.ReadString();
            break;
          }
          case 18: {
            Pass = input.ReadString();
            break;
          }
          case 26: {
            Fname = input.ReadString();
            break;
          }
          case 34: {
            Email = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

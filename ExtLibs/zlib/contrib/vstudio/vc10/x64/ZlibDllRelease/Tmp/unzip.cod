; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	unz_copyright
	ORG $+1
unz_copyright DB ' unzip 1.01 Copyright 1998-2004 Gilles Vollant - http:/'
	DB	'/www.winimage.com/zLibDll', 00H
PUBLIC	unzeof
; Function compile flags: /Ogtpy
; File c:\my\gis\extlibs\zlib\contrib\minizip\unzip.c
;	COMDAT unzeof
_TEXT	SEGMENT
file$ = 8
unzeof	PROC						; COMDAT

; 1926 :     unz64_s* s;
; 1927 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1928 :     if (file==NULL)

  00000	48 85 c9	 test	 rcx, rcx
  00003	75 06		 jne	 SHORT $LN4@unzeof
$LN7@unzeof:

; 1929 :         return UNZ_PARAMERROR;

  00005	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 1937 :         return 1;
; 1938 :     else
; 1939 :         return 0;
; 1940 : }

  0000a	c3		 ret	 0
$LN4@unzeof:

; 1930 :     s=(unz64_s*)file;
; 1931 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  0000b	48 8b 91 10 01
	00 00		 mov	 rdx, QWORD PTR [rcx+272]

; 1932 : 
; 1933 :     if (pfile_in_zip_read_info==NULL)

  00012	48 85 d2	 test	 rdx, rdx

; 1934 :         return UNZ_PARAMERROR;

  00015	74 ee		 je	 SHORT $LN7@unzeof

; 1935 : 
; 1936 :     if (pfile_in_zip_read_info->rest_read_uncompressed == 0)

  00017	33 c0		 xor	 eax, eax
  00019	48 39 82 a0 00
	00 00		 cmp	 QWORD PTR [rdx+160], rax
  00020	0f 94 c0	 sete	 al

; 1937 :         return 1;
; 1938 :     else
; 1939 :         return 0;
; 1940 : }

  00023	c3		 ret	 0
unzeof	ENDP
_TEXT	ENDS
PUBLIC	unztell64
; Function compile flags: /Ogtpy
;	COMDAT unztell64
_TEXT	SEGMENT
file$ = 8
unztell64 PROC						; COMDAT

; 1906 : 
; 1907 :     unz64_s* s;
; 1908 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1909 :     if (file==NULL)

  00000	48 85 c9	 test	 rcx, rcx
  00003	75 05		 jne	 SHORT $LN2@unztell64
$LN5@unztell64:

; 1910 :         return (ZPOS64_T)-1;

  00005	48 83 c8 ff	 or	 rax, -1

; 1918 : }

  00009	c3		 ret	 0
$LN2@unztell64:

; 1911 :     s=(unz64_s*)file;
; 1912 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  0000a	48 8b 81 10 01
	00 00		 mov	 rax, QWORD PTR [rcx+272]

; 1913 : 
; 1914 :     if (pfile_in_zip_read_info==NULL)

  00011	48 85 c0	 test	 rax, rax

; 1915 :         return (ZPOS64_T)-1;

  00014	74 ef		 je	 SHORT $LN5@unztell64

; 1916 : 
; 1917 :     return pfile_in_zip_read_info->total_out_64;

  00016	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]

; 1918 : }

  0001d	c3		 ret	 0
unztell64 ENDP
_TEXT	ENDS
PUBLIC	unztell
; Function compile flags: /Ogtpy
;	COMDAT unztell
_TEXT	SEGMENT
file$ = 8
unztell	PROC						; COMDAT

; 1891 :     unz64_s* s;
; 1892 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1893 :     if (file==NULL)

  00000	48 85 c9	 test	 rcx, rcx
  00003	75 06		 jne	 SHORT $LN2@unztell
$LN5@unztell:

; 1894 :         return UNZ_PARAMERROR;

  00005	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 1902 : }

  0000a	c3		 ret	 0
$LN2@unztell:

; 1895 :     s=(unz64_s*)file;
; 1896 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  0000b	48 8b 81 10 01
	00 00		 mov	 rax, QWORD PTR [rcx+272]

; 1897 : 
; 1898 :     if (pfile_in_zip_read_info==NULL)

  00012	48 85 c0	 test	 rax, rax

; 1899 :         return UNZ_PARAMERROR;

  00015	74 ee		 je	 SHORT $LN5@unztell

; 1900 : 
; 1901 :     return (z_off_t)pfile_in_zip_read_info->stream.total_out;

  00017	8b 40 24	 mov	 eax, DWORD PTR [rax+36]

; 1902 : }

  0001a	c3		 ret	 0
unztell	ENDP
_TEXT	ENDS
PUBLIC	unzGetCurrentFileZStreamPos64
; Function compile flags: /Ogtpy
;	COMDAT unzGetCurrentFileZStreamPos64
_TEXT	SEGMENT
file$ = 8
unzGetCurrentFileZStreamPos64 PROC			; COMDAT

; 1660 :     unz64_s* s;
; 1661 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1662 :     s=(unz64_s*)file;
; 1663 :     if (file==NULL)

  00000	48 85 c9	 test	 rcx, rcx
  00003	75 03		 jne	 SHORT $LN2@unzGetCurr
$LN5@unzGetCurr:

; 1664 :         return 0; //UNZ_PARAMERROR;

  00005	33 c0		 xor	 eax, eax

; 1670 : }

  00007	c3		 ret	 0
$LN2@unzGetCurr:

; 1665 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00008	48 8b 89 10 01
	00 00		 mov	 rcx, QWORD PTR [rcx+272]

; 1666 :     if (pfile_in_zip_read_info==NULL)

  0000f	48 85 c9	 test	 rcx, rcx

; 1667 :         return 0; //UNZ_PARAMERROR;

  00012	74 f1		 je	 SHORT $LN5@unzGetCurr

; 1668 :     return pfile_in_zip_read_info->pos_in_zipfile +
; 1669 :                          pfile_in_zip_read_info->byte_before_the_zipfile;

  00014	48 8b 81 10 01
	00 00		 mov	 rax, QWORD PTR [rcx+272]
  0001b	48 03 41 60	 add	 rax, QWORD PTR [rcx+96]

; 1670 : }

  0001f	c3		 ret	 0
unzGetCurrentFileZStreamPos64 ENDP
_TEXT	ENDS
PUBLIC	unzGetFilePos64
; Function compile flags: /Ogtpy
;	COMDAT unzGetFilePos64
_TEXT	SEGMENT
file$ = 8
file_pos$ = 16
unzGetFilePos64 PROC					; COMDAT

; 1310 :     unz64_s* s;
; 1311 : 
; 1312 :     if (file==NULL || file_pos==NULL)

  00000	48 85 c9	 test	 rcx, rcx
  00003	74 2d		 je	 SHORT $LN2@unzGetFile
  00005	48 85 d2	 test	 rdx, rdx
  00008	74 28		 je	 SHORT $LN2@unzGetFile

; 1314 :     s=(unz64_s*)file;
; 1315 :     if (!s->current_file_ok)

  0000a	48 83 b9 90 00
	00 00 00	 cmp	 QWORD PTR [rcx+144], 0
  00012	75 06		 jne	 SHORT $LN1@unzGetFile

; 1316 :         return UNZ_END_OF_LIST_OF_FILE;

  00014	b8 9c ff ff ff	 mov	 eax, -100		; ffffffffffffff9cH

; 1322 : }

  00019	c3		 ret	 0
$LN1@unzGetFile:

; 1317 : 
; 1318 :     file_pos->pos_in_zip_directory  = s->pos_in_central_dir;

  0001a	48 8b 81 88 00
	00 00		 mov	 rax, QWORD PTR [rcx+136]
  00021	48 89 02	 mov	 QWORD PTR [rdx], rax

; 1319 :     file_pos->num_of_file           = s->num_file;

  00024	48 8b 81 80 00
	00 00		 mov	 rax, QWORD PTR [rcx+128]
  0002b	48 89 42 08	 mov	 QWORD PTR [rdx+8], rax

; 1320 : 
; 1321 :     return UNZ_OK;

  0002f	33 c0		 xor	 eax, eax

; 1322 : }

  00031	c3		 ret	 0
$LN2@unzGetFile:

; 1313 :         return UNZ_PARAMERROR;

  00032	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 1322 : }

  00037	c3		 ret	 0
unzGetFilePos64 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT unz64local_DosDateToTmuDate
_TEXT	SEGMENT
ulDosDate$ = 8
ptm$ = 16
unz64local_DosDateToTmuDate PROC			; COMDAT

; 854  :     ZPOS64_T uDate;
; 855  :     uDate = (ZPOS64_T)(ulDosDate>>16);

  00000	4c 8b c1	 mov	 r8, rcx
  00003	49 c1 e8 10	 shr	 r8, 16

; 856  :     ptm->tm_mday = (uInt)(uDate&0x1f) ;

  00007	41 8b c0	 mov	 eax, r8d
  0000a	83 e0 1f	 and	 eax, 31
  0000d	89 42 0c	 mov	 DWORD PTR [rdx+12], eax

; 857  :     ptm->tm_mon =  (uInt)((((uDate)&0x1E0)/0x20)-1) ;

  00010	49 8b c0	 mov	 rax, r8

; 858  :     ptm->tm_year = (uInt)(((uDate&0x0FE00)/0x0200)+1980) ;

  00013	49 c1 e8 09	 shr	 r8, 9
  00017	48 c1 e8 05	 shr	 rax, 5
  0001b	41 83 e0 7f	 and	 r8d, 127		; 0000007fH
  0001f	83 e0 0f	 and	 eax, 15
  00022	41 81 c0 bc 07
	00 00		 add	 r8d, 1980		; 000007bcH
  00029	ff c8		 dec	 eax
  0002b	44 89 42 14	 mov	 DWORD PTR [rdx+20], r8d
  0002f	89 42 10	 mov	 DWORD PTR [rdx+16], eax

; 859  : 
; 860  :     ptm->tm_hour = (uInt) ((ulDosDate &0xF800)/0x800);

  00032	48 8b c1	 mov	 rax, rcx
  00035	48 c1 e8 0b	 shr	 rax, 11
  00039	83 e0 1f	 and	 eax, 31
  0003c	89 42 08	 mov	 DWORD PTR [rdx+8], eax

; 861  :     ptm->tm_min =  (uInt) ((ulDosDate&0x7E0)/0x20) ;

  0003f	48 8b c1	 mov	 rax, rcx

; 862  :     ptm->tm_sec =  (uInt) (2*(ulDosDate&0x1f)) ;

  00042	83 e1 1f	 and	 ecx, 31
  00045	48 c1 e8 05	 shr	 rax, 5
  00049	03 c9		 add	 ecx, ecx
  0004b	83 e0 3f	 and	 eax, 63			; 0000003fH
  0004e	89 0a		 mov	 DWORD PTR [rdx], ecx
  00050	89 42 04	 mov	 DWORD PTR [rdx+4], eax

; 863  : }

  00053	c3		 ret	 0
unz64local_DosDateToTmuDate ENDP
_TEXT	ENDS
PUBLIC	unzGetGlobalInfo
; Function compile flags: /Ogtpy
;	COMDAT unzGetGlobalInfo
_TEXT	SEGMENT
file$ = 8
pglobal_info32$ = 16
unzGetGlobalInfo PROC					; COMDAT

; 840  :     unz64_s* s;
; 841  :     if (file==NULL)

  00000	48 85 c9	 test	 rcx, rcx
  00003	75 06		 jne	 SHORT $LN1@unzGetGlob

; 842  :         return UNZ_PARAMERROR;

  00005	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 848  : }

  0000a	c3		 ret	 0
$LN1@unzGetGlob:

; 843  :     s=(unz64_s*)file;
; 844  :     /* to do : check if number_entry is not truncated */
; 845  :     pglobal_info32->number_entry = (uLong)s->gi.number_entry;

  0000b	8b 41 68	 mov	 eax, DWORD PTR [rcx+104]
  0000e	89 02		 mov	 DWORD PTR [rdx], eax

; 846  :     pglobal_info32->size_comment = s->gi.size_comment;

  00010	8b 41 70	 mov	 eax, DWORD PTR [rcx+112]
  00013	89 42 04	 mov	 DWORD PTR [rdx+4], eax

; 847  :     return UNZ_OK;

  00016	33 c0		 xor	 eax, eax

; 848  : }

  00018	c3		 ret	 0
unzGetGlobalInfo ENDP
_TEXT	ENDS
PUBLIC	unzGetGlobalInfo64
; Function compile flags: /Ogtpy
;	COMDAT unzGetGlobalInfo64
_TEXT	SEGMENT
file$ = 8
pglobal_info$ = 16
unzGetGlobalInfo64 PROC					; COMDAT

; 830  :     unz64_s* s;
; 831  :     if (file==NULL)

  00000	48 85 c9	 test	 rcx, rcx
  00003	75 06		 jne	 SHORT $LN1@unzGetGlob@2

; 832  :         return UNZ_PARAMERROR;

  00005	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 836  : }

  0000a	c3		 ret	 0
$LN1@unzGetGlob@2:

; 833  :     s=(unz64_s*)file;
; 834  :     *pglobal_info=s->gi;

  0000b	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  0000f	48 89 02	 mov	 QWORD PTR [rdx], rax
  00012	48 8b 41 70	 mov	 rax, QWORD PTR [rcx+112]
  00016	48 89 42 08	 mov	 QWORD PTR [rdx+8], rax

; 835  :     return UNZ_OK;

  0001a	33 c0		 xor	 eax, eax

; 836  : }

  0001c	c3		 ret	 0
unzGetGlobalInfo64 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT strcmpcasenosensitive_internal
_TEXT	SEGMENT
fileName1$ = 8
fileName2$ = 16
strcmpcasenosensitive_internal PROC			; COMDAT

; 367  :     }

  00000	48 2b ca	 sub	 rcx, rdx
  00003	66 66 66 66 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL8@strcmpcase:

; 351  :     for (;;)
; 352  :     {
; 353  :         char c1=*(fileName1++);

  00010	44 0f b6 0c 11	 movzx	 r9d, BYTE PTR [rcx+rdx]

; 354  :         char c2=*(fileName2++);

  00015	44 0f b6 02	 movzx	 r8d, BYTE PTR [rdx]
  00019	48 ff c2	 inc	 rdx

; 355  :         if ((c1>='a') && (c1<='z'))

  0001c	41 8d 41 9f	 lea	 eax, DWORD PTR [r9-97]
  00020	3c 19		 cmp	 al, 25
  00022	77 04		 ja	 SHORT $LN6@strcmpcase

; 356  :             c1 -= 0x20;

  00024	41 80 c1 e0	 add	 r9b, -32		; ffffffffffffffe0H
$LN6@strcmpcase:

; 357  :         if ((c2>='a') && (c2<='z'))

  00028	41 8d 40 9f	 lea	 eax, DWORD PTR [r8-97]
  0002c	3c 19		 cmp	 al, 25
  0002e	77 04		 ja	 SHORT $LN5@strcmpcase

; 358  :             c2 -= 0x20;

  00030	41 80 c0 e0	 add	 r8b, -32		; ffffffffffffffe0H
$LN5@strcmpcase:

; 359  :         if (c1=='\0')

  00034	45 84 c9	 test	 r9b, r9b
  00037	74 16		 je	 SHORT $LN13@strcmpcase

; 361  :         if (c2=='\0')

  00039	45 84 c0	 test	 r8b, r8b
  0003c	74 07		 je	 SHORT $LN14@strcmpcase

; 362  :             return 1;
; 363  :         if (c1<c2)

  0003e	45 3a c8	 cmp	 r9b, r8b
  00041	7c 08		 jl	 SHORT $LN15@strcmpcase

; 365  :         if (c1>c2)

  00043	7e cb		 jle	 SHORT $LL8@strcmpcase
$LN14@strcmpcase:

; 366  :             return 1;

  00045	b8 01 00 00 00	 mov	 eax, 1

; 368  : }

  0004a	c3		 ret	 0
$LN15@strcmpcase:

; 364  :             return -1;

  0004b	83 c8 ff	 or	 eax, -1

; 368  : }

  0004e	c3		 ret	 0
$LN13@strcmpcase:

; 360  :             return ((c2=='\0') ? 0 : -1);

  0004f	41 f6 d8	 neg	 r8b
  00052	1b c0		 sbb	 eax, eax

; 368  : }

  00054	c3		 ret	 0
strcmpcasenosensitive_internal ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_getByte DD imagerel unz64local_getByte
	DD	imagerel unz64local_getByte+102
	DD	imagerel $unwind$unz64local_getByte
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_getByte DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unz64local_getByte
_TEXT	SEGMENT
c$ = 48
pzlib_filefunc_def$ = 48
filestream$ = 56
pi$ = 64
unz64local_getByte PROC					; COMDAT

; 213  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b d9	 mov	 rbx, rcx

; 214  :     unsigned char c;
; 215  :     int err = (int)ZREAD64(*pzlib_filefunc_def,filestream,&c,1);

  00012	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00016	49 8b f8	 mov	 rdi, r8
  00019	4c 8d 44 24 30	 lea	 r8, QWORD PTR c$[rsp]
  0001e	41 b9 01 00 00
	00		 mov	 r9d, 1
  00024	48 8b f2	 mov	 rsi, rdx
  00027	ff 53 08	 call	 QWORD PTR [rbx+8]

; 216  :     if (err==1)

  0002a	83 f8 01	 cmp	 eax, 1
  0002d	75 19		 jne	 SHORT $LN4@unz64local

; 217  :     {
; 218  :         *pi = (int)c;

  0002f	0f b6 44 24 30	 movzx	 eax, BYTE PTR c$[rsp]
  00034	89 07		 mov	 DWORD PTR [rdi], eax

; 219  :         return UNZ_OK;

  00036	33 c0		 xor	 eax, eax

; 224  :             return UNZ_ERRNO;
; 225  :         else
; 226  :             return UNZ_EOF;
; 227  :     }
; 228  : }

  00038	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0003d	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
$LN4@unz64local:

; 220  :     }
; 221  :     else
; 222  :     {
; 223  :         if (ZERROR64(*pzlib_filefunc_def,filestream))

  00048	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0004c	48 8b d6	 mov	 rdx, rsi
  0004f	ff 53 30	 call	 QWORD PTR [rbx+48]

; 224  :             return UNZ_ERRNO;
; 225  :         else
; 226  :             return UNZ_EOF;
; 227  :     }
; 228  : }

  00052	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00057	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0005c	f7 d8		 neg	 eax
  0005e	1b c0		 sbb	 eax, eax
  00060	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00064	5f		 pop	 rdi
  00065	c3		 ret	 0
unz64local_getByte ENDP
PUBLIC	unzGetGlobalComment
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetGlobalComment DD imagerel $LN11
	DD	imagerel $LN11+163
	DD	imagerel $unwind$unzGetGlobalComment
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetGlobalComment DD 083c01H
	DD	06643cH
	DD	08540fH
	DD	07340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unzGetGlobalComment
_TEXT	SEGMENT
file$ = 48
szComment$ = 56
uSizeBuf$ = 64
unzGetGlobalComment PROC				; COMDAT

; 2052 : {

$LN11:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	41 8b e8	 mov	 ebp, r8d
  00012	48 8b fa	 mov	 rdi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 2053 :     unz64_s* s;
; 2054 :     uLong uReadThis ;
; 2055 :     if (file==NULL)

  00018	48 85 c9	 test	 rcx, rcx
  0001b	75 13		 jne	 SHORT $LN6@unzGetGlob@3

; 2056 :         return (int)UNZ_PARAMERROR;

  0001d	8d 41 9a	 lea	 eax, QWORD PTR [rcx-102]

; 2076 : }

  00020	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00025	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
$LN6@unzGetGlob@3:

; 2057 :     s=(unz64_s*)file;
; 2058 : 
; 2059 :     uReadThis = uSizeBuf;
; 2060 :     if (uReadThis>s->gi.size_comment)

  00030	8b 41 70	 mov	 eax, DWORD PTR [rcx+112]

; 2061 :         uReadThis = s->gi.size_comment;
; 2062 : 
; 2063 :     if (ZSEEK64(s->z_filefunc,s->filestream,s->central_pos+22,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00033	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00037	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  0003c	44 3b c0	 cmp	 r8d, eax
  0003f	41 8b f0	 mov	 esi, r8d
  00042	4c 8b 81 98 00
	00 00		 mov	 r8, QWORD PTR [rcx+152]
  00049	0f 47 f0	 cmova	 esi, eax
  0004c	49 83 c0 16	 add	 r8, 22
  00050	45 33 c9	 xor	 r9d, r9d
  00053	e8 00 00 00 00	 call	 call_zseek64
  00058	85 c0		 test	 eax, eax

; 2064 :         return UNZ_ERRNO;

  0005a	75 1b		 jne	 SHORT $LN10@unzGetGlob@3

; 2065 : 
; 2066 :     if (uReadThis>0)

  0005c	85 f6		 test	 esi, esi
  0005e	74 1c		 je	 SHORT $LN2@unzGetGlob@3

; 2067 :     {
; 2068 :       *szComment='\0';

  00060	88 07		 mov	 BYTE PTR [rdi], al

; 2069 :       if (ZREAD64(s->z_filefunc,s->filestream,szComment,uReadThis)!=uReadThis)

  00062	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  00066	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0006a	44 8b ce	 mov	 r9d, esi
  0006d	4c 8b c7	 mov	 r8, rdi
  00070	ff 53 08	 call	 QWORD PTR [rbx+8]
  00073	3b c6		 cmp	 eax, esi
  00075	74 05		 je	 SHORT $LN2@unzGetGlob@3
$LN10@unzGetGlob@3:

; 2070 :         return UNZ_ERRNO;

  00077	83 c8 ff	 or	 eax, -1
  0007a	eb 12		 jmp	 SHORT $LN9@unzGetGlob@3
$LN2@unzGetGlob@3:

; 2071 :     }
; 2072 : 
; 2073 :     if ((szComment != NULL) && (uSizeBuf > s->gi.size_comment))

  0007c	48 85 ff	 test	 rdi, rdi
  0007f	74 0b		 je	 SHORT $LN1@unzGetGlob@3
  00081	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
  00084	3b e8		 cmp	 ebp, eax
  00086	76 04		 jbe	 SHORT $LN1@unzGetGlob@3

; 2074 :         *(szComment+s->gi.size_comment)='\0';

  00088	c6 04 38 00	 mov	 BYTE PTR [rax+rdi], 0
$LN1@unzGetGlob@3:

; 2075 :     return (int)uReadThis;

  0008c	8b c6		 mov	 eax, esi
$LN9@unzGetGlob@3:
  0008e	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 2076 : }

  00093	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00098	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0009d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a1	5f		 pop	 rdi
  000a2	c3		 ret	 0
unzGetGlobalComment ENDP
_TEXT	ENDS
PUBLIC	unzCloseCurrentFile
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzCloseCurrentFile DD imagerel $LN11
	DD	imagerel $LN11+34
	DD	imagerel $unwind$unzCloseCurrentFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$unzCloseCurrentFile DD imagerel $LN11+34
	DD	imagerel $LN11+70
	DD	imagerel $chain$0$unzCloseCurrentFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$unzCloseCurrentFile DD imagerel $LN11+70
	DD	imagerel $LN11+188
	DD	imagerel $chain$2$unzCloseCurrentFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$unzCloseCurrentFile DD 020021H
	DD	063400H
	DD	imagerel $LN11
	DD	imagerel $LN11+34
	DD	imagerel $unwind$unzCloseCurrentFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$unzCloseCurrentFile DD 020521H
	DD	063405H
	DD	imagerel $LN11
	DD	imagerel $LN11+34
	DD	imagerel $unwind$unzCloseCurrentFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzCloseCurrentFile DD 040a01H
	DD	07640aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unzCloseCurrentFile
_TEXT	SEGMENT
file$ = 48
unzCloseCurrentFile PROC				; COMDAT

; 2005 : {

$LN11:
  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2006 :     int err=UNZ_OK;

  0000a	33 f6		 xor	 esi, esi
  0000c	48 8b f9	 mov	 rdi, rcx

; 2007 : 
; 2008 :     unz64_s* s;
; 2009 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 2010 :     if (file==NULL)

  0000f	48 85 c9	 test	 rcx, rcx
  00012	75 0e		 jne	 SHORT $LN7@unzCloseCu

; 2011 :         return UNZ_PARAMERROR;

  00014	8d 41 9a	 lea	 eax, QWORD PTR [rcx-102]

; 2043 : }

  00017	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0001c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00020	5f		 pop	 rdi
  00021	c3		 ret	 0
$LN7@unzCloseCu:
  00022	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 2012 :     s=(unz64_s*)file;
; 2013 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00027	48 8b 99 10 01
	00 00		 mov	 rbx, QWORD PTR [rcx+272]

; 2014 : 
; 2015 :     if (pfile_in_zip_read_info==NULL)

  0002e	48 85 db	 test	 rbx, rbx
  00031	75 13		 jne	 SHORT $LN6@unzCloseCu

; 2016 :         return UNZ_PARAMERROR;

  00033	8d 43 9a	 lea	 eax, QWORD PTR [rbx-102]
  00036	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 2043 : }

  0003b	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00040	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00044	5f		 pop	 rdi
  00045	c3		 ret	 0
$LN6@unzCloseCu:

; 2017 : 
; 2018 : 
; 2019 :     if ((pfile_in_zip_read_info->rest_read_uncompressed == 0) &&
; 2020 :         (!pfile_in_zip_read_info->raw))

  00046	48 39 b3 a0 00
	00 00		 cmp	 QWORD PTR [rbx+160], rsi
  0004d	75 1c		 jne	 SHORT $LN4@unzCloseCu
  0004f	39 b3 18 01 00
	00		 cmp	 DWORD PTR [rbx+280], esi
  00055	75 14		 jne	 SHORT $LN4@unzCloseCu

; 2021 :     {
; 2022 :         if (pfile_in_zip_read_info->crc32 != pfile_in_zip_read_info->crc32_wait)

  00057	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  0005d	b9 97 ff ff ff	 mov	 ecx, -105		; ffffffffffffff97H
  00062	39 83 90 00 00
	00		 cmp	 DWORD PTR [rbx+144], eax
  00068	0f 45 f1	 cmovne	 esi, ecx
$LN4@unzCloseCu:

; 2023 :             err=UNZ_CRCERROR;
; 2024 :     }
; 2025 : 
; 2026 : 
; 2027 :     TRYFREE(pfile_in_zip_read_info->read_buffer);

  0006b	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0006e	48 85 c9	 test	 rcx, rcx
  00071	74 06		 je	 SHORT $LN3@unzCloseCu
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN3@unzCloseCu:

; 2028 :     pfile_in_zip_read_info->read_buffer = NULL;
; 2029 :     if (pfile_in_zip_read_info->stream_initialised == Z_DEFLATED)

  00079	83 7b 68 08	 cmp	 DWORD PTR [rbx+104], 8
  0007d	48 c7 03 00 00
	00 00		 mov	 QWORD PTR [rbx], 0
  00084	75 09		 jne	 SHORT $LN2@unzCloseCu

; 2030 :         inflateEnd(&pfile_in_zip_read_info->stream);

  00086	48 8d 4b 08	 lea	 rcx, QWORD PTR [rbx+8]
  0008a	e8 00 00 00 00	 call	 inflateEnd
$LN2@unzCloseCu:

; 2031 : #ifdef HAVE_BZIP2
; 2032 :     else if (pfile_in_zip_read_info->stream_initialised == Z_BZIP2ED)
; 2033 :         BZ2_bzDecompressEnd(&pfile_in_zip_read_info->bstream);
; 2034 : #endif
; 2035 : 
; 2036 : 
; 2037 :     pfile_in_zip_read_info->stream_initialised = 0;
; 2038 :     TRYFREE(pfile_in_zip_read_info);

  0008f	48 8b cb	 mov	 rcx, rbx
  00092	c7 43 68 00 00
	00 00		 mov	 DWORD PTR [rbx+104], 0
  00099	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  0009f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 2039 : 
; 2040 :     s->pfile_in_zip_read=NULL;
; 2041 : 
; 2042 :     return err;

  000a4	8b c6		 mov	 eax, esi

; 2043 : }

  000a6	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000ab	48 c7 87 10 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rdi+272], 0
  000b6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ba	5f		 pop	 rdi
  000bb	c3		 ret	 0
unzCloseCurrentFile ENDP
_TEXT	ENDS
PUBLIC	unzGetLocalExtrafield
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetLocalExtrafield DD imagerel $LN12
	DD	imagerel $LN12+35
	DD	imagerel $unwind$unzGetLocalExtrafield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$unzGetLocalExtrafield DD imagerel $LN12+35
	DD	imagerel $LN12+71
	DD	imagerel $chain$0$unzGetLocalExtrafield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$unzGetLocalExtrafield DD imagerel $LN12+71
	DD	imagerel $LN12+107
	DD	imagerel $chain$2$unzGetLocalExtrafield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$unzGetLocalExtrafield DD imagerel $LN12+107
	DD	imagerel $LN12+135
	DD	imagerel $chain$4$unzGetLocalExtrafield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$unzGetLocalExtrafield DD imagerel $LN12+135
	DD	imagerel $LN12+188
	DD	imagerel $chain$6$unzGetLocalExtrafield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$unzGetLocalExtrafield DD imagerel $LN12+188
	DD	imagerel $LN12+243
	DD	imagerel $chain$8$unzGetLocalExtrafield
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$unzGetLocalExtrafield DD 020021H
	DD	063400H
	DD	imagerel $LN12
	DD	imagerel $LN12+35
	DD	imagerel $unwind$unzGetLocalExtrafield
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$unzGetLocalExtrafield DD 020021H
	DD	063400H
	DD	imagerel $LN12
	DD	imagerel $LN12+35
	DD	imagerel $unwind$unzGetLocalExtrafield
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$unzGetLocalExtrafield DD 020021H
	DD	063400H
	DD	imagerel $LN12
	DD	imagerel $LN12+35
	DD	imagerel $unwind$unzGetLocalExtrafield
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$unzGetLocalExtrafield DD 020021H
	DD	063400H
	DD	imagerel $LN12
	DD	imagerel $LN12+35
	DD	imagerel $unwind$unzGetLocalExtrafield
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$unzGetLocalExtrafield DD 020521H
	DD	063405H
	DD	imagerel $LN12
	DD	imagerel $LN12+35
	DD	imagerel $unwind$unzGetLocalExtrafield
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetLocalExtrafield DD 040a01H
	DD	07640aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unzGetLocalExtrafield
_TEXT	SEGMENT
file$ = 48
buf$ = 56
len$ = 64
unzGetLocalExtrafield PROC				; COMDAT

; 1957 : {

$LN12:
  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	41 8b f8	 mov	 edi, r8d
  0000d	48 8b f2	 mov	 rsi, rdx

; 1958 :     unz64_s* s;
; 1959 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1960 :     uInt read_now;
; 1961 :     ZPOS64_T size_to_read;
; 1962 : 
; 1963 :     if (file==NULL)

  00010	48 85 c9	 test	 rcx, rcx
  00013	75 0e		 jne	 SHORT $LN8@unzGetLoca

; 1964 :         return UNZ_PARAMERROR;

  00015	8d 41 9a	 lea	 eax, QWORD PTR [rcx-102]

; 1995 :         return UNZ_ERRNO;
; 1996 : 
; 1997 :     return (int)read_now;
; 1998 : }

  00018	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0001d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00021	5f		 pop	 rdi
  00022	c3		 ret	 0
$LN8@unzGetLoca:
  00023	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 1965 :     s=(unz64_s*)file;
; 1966 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00028	48 8b 99 10 01
	00 00		 mov	 rbx, QWORD PTR [rcx+272]

; 1967 : 
; 1968 :     if (pfile_in_zip_read_info==NULL)

  0002f	48 85 db	 test	 rbx, rbx
  00032	75 13		 jne	 SHORT $LN7@unzGetLoca

; 1969 :         return UNZ_PARAMERROR;

  00034	8d 43 9a	 lea	 eax, QWORD PTR [rbx-102]
  00037	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1995 :         return UNZ_ERRNO;
; 1996 : 
; 1997 :     return (int)read_now;
; 1998 : }

  0003c	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5f		 pop	 rdi
  00046	c3		 ret	 0
$LN7@unzGetLoca:

; 1970 : 
; 1971 :     size_to_read = (pfile_in_zip_read_info->size_local_extrafield -
; 1972 :                 pfile_in_zip_read_info->pos_local_extrafield);

  00047	48 8b 93 80 00
	00 00		 mov	 rdx, QWORD PTR [rbx+128]
  0004e	8b 4b 78	 mov	 ecx, DWORD PTR [rbx+120]
  00051	48 2b ca	 sub	 rcx, rdx

; 1973 : 
; 1974 :     if (buf==NULL)

  00054	48 85 f6	 test	 rsi, rsi
  00057	75 12		 jne	 SHORT $LN6@unzGetLoca

; 1975 :         return (int)size_to_read;

  00059	8b c1		 mov	 eax, ecx
  0005b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1995 :         return UNZ_ERRNO;
; 1996 : 
; 1997 :     return (int)read_now;
; 1998 : }

  00060	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
$LN6@unzGetLoca:

; 1976 : 
; 1977 :     if (len>size_to_read)

  0006b	48 3b f9	 cmp	 rdi, rcx
  0006e	0f 47 f9	 cmova	 edi, ecx

; 1978 :         read_now = (uInt)size_to_read;
; 1979 :     else
; 1980 :         read_now = (uInt)len ;
; 1981 : 
; 1982 :     if (read_now==0)

  00071	85 ff		 test	 edi, edi
  00073	75 12		 jne	 SHORT $LN3@unzGetLoca

; 1983 :         return 0;

  00075	33 c0		 xor	 eax, eax
  00077	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1995 :         return UNZ_ERRNO;
; 1996 : 
; 1997 :     return (int)read_now;
; 1998 : }

  0007c	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00081	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00085	5f		 pop	 rdi
  00086	c3		 ret	 0
$LN3@unzGetLoca:

; 1984 : 
; 1985 :     if (ZSEEK64(pfile_in_zip_read_info->z_filefunc,
; 1986 :               pfile_in_zip_read_info->filestream,
; 1987 :               pfile_in_zip_read_info->offset_local_extrafield +
; 1988 :               pfile_in_zip_read_info->pos_local_extrafield,
; 1989 :               ZLIB_FILEFUNC_SEEK_SET)!=0)

  00087	48 8b 43 70	 mov	 rax, QWORD PTR [rbx+112]
  0008b	48 8d 8b a8 00
	00 00		 lea	 rcx, QWORD PTR [rbx+168]
  00092	45 33 c9	 xor	 r9d, r9d
  00095	4c 8d 04 02	 lea	 r8, QWORD PTR [rdx+rax]
  00099	48 8b 93 00 01
	00 00		 mov	 rdx, QWORD PTR [rbx+256]
  000a0	e8 00 00 00 00	 call	 call_zseek64
  000a5	85 c0		 test	 eax, eax
  000a7	74 13		 je	 SHORT $LN2@unzGetLoca

; 1990 :         return UNZ_ERRNO;

  000a9	83 c8 ff	 or	 eax, -1
  000ac	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1995 :         return UNZ_ERRNO;
; 1996 : 
; 1997 :     return (int)read_now;
; 1998 : }

  000b1	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000b6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ba	5f		 pop	 rdi
  000bb	c3		 ret	 0
$LN2@unzGetLoca:

; 1991 : 
; 1992 :     if (ZREAD64(pfile_in_zip_read_info->z_filefunc,
; 1993 :               pfile_in_zip_read_info->filestream,
; 1994 :               buf,read_now)!=read_now)

  000bc	48 8b 93 00 01
	00 00		 mov	 rdx, QWORD PTR [rbx+256]
  000c3	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  000ca	44 8b cf	 mov	 r9d, edi
  000cd	4c 8b c6	 mov	 r8, rsi
  000d0	48 8b 83 b0 00
	00 00		 mov	 rax, QWORD PTR [rbx+176]
  000d7	ff d0		 call	 rax
  000d9	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1995 :         return UNZ_ERRNO;
; 1996 : 
; 1997 :     return (int)read_now;
; 1998 : }

  000de	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000e3	83 c9 ff	 or	 ecx, -1
  000e6	3b c7		 cmp	 eax, edi
  000e8	0f 45 f9	 cmovne	 edi, ecx
  000eb	8b c7		 mov	 eax, edi
  000ed	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f1	5f		 pop	 rdi
  000f2	c3		 ret	 0
unzGetLocalExtrafield ENDP
_TEXT	ENDS
PUBLIC	unzGetFilePos
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetFilePos DD imagerel $LN5
	DD	imagerel $LN5+41
	DD	imagerel $unwind$unzGetFilePos
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetFilePos DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unzGetFilePos
_TEXT	SEGMENT
file_pos64$ = 32
file$ = 64
file_pos$ = 72
unzGetFilePos PROC					; COMDAT

; 1327 : {

$LN5:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	4c 8b c2	 mov	 r8, rdx

; 1328 :     unz64_file_pos file_pos64;
; 1329 :     int err = unzGetFilePos64(file,&file_pos64);

  00007	48 8d 54 24 20	 lea	 rdx, QWORD PTR file_pos64$[rsp]
  0000c	e8 00 00 00 00	 call	 unzGetFilePos64

; 1330 :     if (err==UNZ_OK)

  00011	85 c0		 test	 eax, eax
  00013	75 0f		 jne	 SHORT $LN4@unzGetFile@2

; 1331 :     {
; 1332 :         file_pos->pos_in_zip_directory = (uLong)file_pos64.pos_in_zip_directory;

  00015	8b 4c 24 20	 mov	 ecx, DWORD PTR file_pos64$[rsp]
  00019	41 89 08	 mov	 DWORD PTR [r8], ecx

; 1333 :         file_pos->num_of_file = (uLong)file_pos64.num_of_file;

  0001c	8b 4c 24 28	 mov	 ecx, DWORD PTR file_pos64$[rsp+8]
  00020	41 89 48 04	 mov	 DWORD PTR [r8+4], ecx
$LN4@unzGetFile@2:

; 1334 :     }
; 1335 :     return err;
; 1336 : }

  00024	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00028	c3		 ret	 0
unzGetFilePos ENDP
_TEXT	ENDS
PUBLIC	unzClose
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzClose DD imagerel $LN6
	DD	imagerel $LN6+66
	DD	imagerel $unwind$unzClose
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzClose DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unzClose
_TEXT	SEGMENT
file$ = 48
unzClose PROC						; COMDAT

; 809  : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 810  :     unz64_s* s;
; 811  :     if (file==NULL)

  00009	48 85 c9	 test	 rcx, rcx
  0000c	75 09		 jne	 SHORT $LN3@unzClose

; 812  :         return UNZ_PARAMERROR;

  0000e	8d 41 9a	 lea	 eax, QWORD PTR [rcx-102]

; 821  : }

  00011	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00015	5b		 pop	 rbx
  00016	c3		 ret	 0
$LN3@unzClose:

; 813  :     s=(unz64_s*)file;
; 814  : 
; 815  :     if (s->pfile_in_zip_read!=NULL)

  00017	48 83 b9 10 01
	00 00 00	 cmp	 QWORD PTR [rcx+272], 0
  0001f	74 05		 je	 SHORT $LN2@unzClose

; 816  :         unzCloseCurrentFile(file);

  00021	e8 00 00 00 00	 call	 unzCloseCurrentFile
$LN2@unzClose:

; 817  : 
; 818  :     ZCLOSE64(s->z_filefunc, s->filestream);

  00026	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  0002a	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0002e	ff 53 28	 call	 QWORD PTR [rbx+40]

; 819  :     TRYFREE(s);

  00031	48 8b cb	 mov	 rcx, rbx
  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 820  :     return UNZ_OK;

  0003a	33 c0		 xor	 eax, eax

; 821  : }

  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	5b		 pop	 rbx
  00041	c3		 ret	 0
unzClose ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_SearchCentralDir DD imagerel unz64local_SearchCentralDir
	DD	imagerel unz64local_SearchCentralDir+68
	DD	imagerel $unwind$unz64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$unz64local_SearchCentralDir DD imagerel unz64local_SearchCentralDir+68
	DD	imagerel unz64local_SearchCentralDir+124
	DD	imagerel $chain$0$unz64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$unz64local_SearchCentralDir DD imagerel unz64local_SearchCentralDir+124
	DD	imagerel unz64local_SearchCentralDir+143
	DD	imagerel $chain$3$unz64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$unz64local_SearchCentralDir DD imagerel unz64local_SearchCentralDir+143
	DD	imagerel unz64local_SearchCentralDir+338
	DD	imagerel $chain$5$unz64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$unz64local_SearchCentralDir DD imagerel unz64local_SearchCentralDir+338
	DD	imagerel unz64local_SearchCentralDir+372
	DD	imagerel $chain$6$unz64local_SearchCentralDir
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$unz64local_SearchCentralDir DD 021H
	DD	imagerel unz64local_SearchCentralDir+124
	DD	imagerel unz64local_SearchCentralDir+143
	DD	imagerel $chain$3$unz64local_SearchCentralDir
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$unz64local_SearchCentralDir DD 040a21H
	DD	0d740aH
	DD	0c6405H
	DD	imagerel unz64local_SearchCentralDir+124
	DD	imagerel unz64local_SearchCentralDir+143
	DD	imagerel $chain$3$unz64local_SearchCentralDir
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$unz64local_SearchCentralDir DD 040521H
	DD	0a5405H
	DD	04e400H
	DD	imagerel unz64local_SearchCentralDir
	DD	imagerel unz64local_SearchCentralDir+68
	DD	imagerel $unwind$unz64local_SearchCentralDir
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$unz64local_SearchCentralDir DD 020521H
	DD	04e405H
	DD	imagerel unz64local_SearchCentralDir
	DD	imagerel unz64local_SearchCentralDir+68
	DD	imagerel $unwind$unz64local_SearchCentralDir
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_SearchCentralDir DD 051001H
	DD	0f00c4210H
	DD	0c008d00aH
	DD	03006H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unz64local_SearchCentralDir
_TEXT	SEGMENT
pzlib_filefunc_def$ = 80
filestream$ = 88
unz64local_SearchCentralDir PROC			; COMDAT

; 414  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	53		 push	 rbx
  00006	41 54		 push	 r12
  00008	41 55		 push	 r13
  0000a	41 57		 push	 r15
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 415  :     unsigned char* buf;
; 416  :     ZPOS64_T uSizeFile;
; 417  :     ZPOS64_T uBackRead;
; 418  :     ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */
; 419  :     ZPOS64_T uPosFound=0;

  00010	45 33 e4	 xor	 r12d, r12d

; 420  : 
; 421  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00013	45 33 c0	 xor	 r8d, r8d
  00016	48 8b da	 mov	 rbx, rdx
  00019	45 8d 4c 24 02	 lea	 r9d, QWORD PTR [r12+2]
  0001e	4c 8b f9	 mov	 r15, rcx
  00021	41 bd ff ff 00
	00		 mov	 r13d, 65535		; 0000ffffH
  00027	e8 00 00 00 00	 call	 call_zseek64
  0002c	85 c0		 test	 eax, eax
  0002e	74 0e		 je	 SHORT $LN14@unz64local@2

; 422  :         return 0;

  00030	33 c0		 xor	 eax, eax

; 467  : }

  00032	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00036	41 5f		 pop	 r15
  00038	41 5d		 pop	 r13
  0003a	41 5c		 pop	 r12
  0003c	5b		 pop	 rbx
  0003d	c3		 ret	 0
$LN14@unz64local@2:

; 423  : 
; 424  : 
; 425  :     uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  0003e	48 8b d3	 mov	 rdx, rbx
  00041	49 8b cf	 mov	 rcx, r15
  00044	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  00049	e8 00 00 00 00	 call	 call_ztell64

; 426  : 
; 427  :     if (uMaxBack>uSizeFile)
; 428  :         uMaxBack = uSizeFile;
; 429  : 
; 430  :     buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  0004e	b9 04 04 00 00	 mov	 ecx, 1028		; 00000404H
  00053	49 3b c5	 cmp	 rax, r13
  00056	4c 8b f0	 mov	 r14, rax
  00059	4c 0f 42 e8	 cmovb	 r13, rax
  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00063	48 8b d8	 mov	 rbx, rax

; 431  :     if (buf==NULL)

  00066	48 85 c0	 test	 rax, rax
  00069	75 11		 jne	 SHORT $LN12@unz64local@2
  0006b	4c 8b 74 24 20	 mov	 r14, QWORD PTR [rsp+32]

; 467  : }

  00070	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00074	41 5f		 pop	 r15
  00076	41 5d		 pop	 r13
  00078	41 5c		 pop	 r12
  0007a	5b		 pop	 rbx
  0007b	c3		 ret	 0
$LN12@unz64local@2:
  0007c	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp

; 432  :         return 0;
; 433  : 
; 434  :     uBackRead = 4;

  00081	bd 04 00 00 00	 mov	 ebp, 4

; 435  :     while (uBackRead<uMaxBack)

  00086	49 3b ed	 cmp	 rbp, r13
  00089	0f 83 c3 00 00
	00		 jae	 $LN28@unz64local@2
  0008f	48 89 74 24 60	 mov	 QWORD PTR [rsp+96], rsi
  00094	48 89 7c 24 68	 mov	 QWORD PTR [rsp+104], rdi
  00099	0f 1f 80 00 00
	00 00		 npad	 7
$LL11@unz64local@2:

; 436  :     {
; 437  :         uLong uReadSize;
; 438  :         ZPOS64_T uReadPos ;
; 439  :         int i;
; 440  :         if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000a0	48 8d 85 00 04
	00 00		 lea	 rax, QWORD PTR [rbp+1024]

; 441  :             uBackRead = uMaxBack;
; 442  :         else
; 443  :             uBackRead+=BUFREADCOMMENT;
; 444  :         uReadPos = uSizeFile-uBackRead ;

  000a7	49 8b f6	 mov	 rsi, r14
  000aa	49 3b c5	 cmp	 rax, r13
  000ad	48 8b e8	 mov	 rbp, rax

; 445  : 
; 446  :         uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?
; 447  :                      (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);

  000b0	49 8b c6	 mov	 rax, r14
  000b3	49 0f 47 ed	 cmova	 rbp, r13
  000b7	48 2b f5	 sub	 rsi, rbp
  000ba	48 2b c6	 sub	 rax, rsi
  000bd	48 3d 04 04 00
	00		 cmp	 rax, 1028		; 00000404H
  000c3	76 07		 jbe	 SHORT $LN17@unz64local@2
  000c5	bf 04 04 00 00	 mov	 edi, 1028		; 00000404H
  000ca	eb 05		 jmp	 SHORT $LN18@unz64local@2
$LN17@unz64local@2:
  000cc	41 8b fe	 mov	 edi, r14d
  000cf	2b fe		 sub	 edi, esi
$LN18@unz64local@2:

; 448  :         if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  000d1	48 8b 54 24 58	 mov	 rdx, QWORD PTR filestream$[rsp]
  000d6	45 33 c9	 xor	 r9d, r9d
  000d9	4c 8b c6	 mov	 r8, rsi
  000dc	49 8b cf	 mov	 rcx, r15
  000df	e8 00 00 00 00	 call	 call_zseek64
  000e4	85 c0		 test	 eax, eax
  000e6	75 60		 jne	 SHORT $LN31@unz64local@2

; 449  :             break;
; 450  : 
; 451  :         if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  000e8	48 8b 54 24 58	 mov	 rdx, QWORD PTR filestream$[rsp]
  000ed	49 8b 4f 38	 mov	 rcx, QWORD PTR [r15+56]
  000f1	44 8b cf	 mov	 r9d, edi
  000f4	4c 8b c3	 mov	 r8, rbx
  000f7	41 ff 57 08	 call	 QWORD PTR [r15+8]
  000fb	3b c7		 cmp	 eax, edi
  000fd	75 49		 jne	 SHORT $LN31@unz64local@2

; 452  :             break;
; 453  : 
; 454  :         for (i=(int)uReadSize-3; (i--)>0;)

  000ff	8d 4f fd	 lea	 ecx, DWORD PTR [rdi-3]
  00102	48 63 c1	 movsxd	 rax, ecx
  00105	85 c9		 test	 ecx, ecx
  00107	7e 36		 jle	 SHORT $LN27@unz64local@2
  00109	0f 1f 80 00 00
	00 00		 npad	 7
$LL5@unz64local@2:
  00110	48 ff c8	 dec	 rax
  00113	ff c9		 dec	 ecx

; 455  :             if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 456  :                 ((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))

  00115	80 3c 18 50	 cmp	 BYTE PTR [rax+rbx], 80	; 00000050H
  00119	75 15		 jne	 SHORT $LN3@unz64local@2
  0011b	80 7c 18 01 4b	 cmp	 BYTE PTR [rax+rbx+1], 75 ; 0000004bH
  00120	75 0e		 jne	 SHORT $LN3@unz64local@2
  00122	80 7c 18 02 05	 cmp	 BYTE PTR [rax+rbx+2], 5
  00127	75 07		 jne	 SHORT $LN3@unz64local@2
  00129	80 7c 18 03 06	 cmp	 BYTE PTR [rax+rbx+3], 6
  0012e	74 07		 je	 SHORT $LN21@unz64local@2
$LN3@unz64local@2:

; 452  :             break;
; 453  : 
; 454  :         for (i=(int)uReadSize-3; (i--)>0;)

  00130	48 85 c0	 test	 rax, rax
  00133	7f db		 jg	 SHORT $LL5@unz64local@2
  00135	eb 08		 jmp	 SHORT $LN27@unz64local@2
$LN21@unz64local@2:

; 457  :             {
; 458  :                 uPosFound = uReadPos+i;

  00137	4c 63 e1	 movsxd	 r12, ecx
  0013a	4c 03 e6	 add	 r12, rsi

; 459  :                 break;
; 460  :             }
; 461  : 
; 462  :         if (uPosFound!=0)

  0013d	75 09		 jne	 SHORT $LN31@unz64local@2
$LN27@unz64local@2:

; 435  :     while (uBackRead<uMaxBack)

  0013f	49 3b ed	 cmp	 rbp, r13
  00142	0f 82 58 ff ff
	ff		 jb	 $LL11@unz64local@2
$LN31@unz64local@2:
  00148	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  0014d	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
$LN28@unz64local@2:

; 463  :             break;
; 464  :     }
; 465  :     TRYFREE(buf);

  00152	48 8b cb	 mov	 rcx, rbx
  00155	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  0015b	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00160	4c 8b 74 24 20	 mov	 r14, QWORD PTR [rsp+32]

; 466  :     return uPosFound;

  00165	49 8b c4	 mov	 rax, r12

; 467  : }

  00168	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0016c	41 5f		 pop	 r15
  0016e	41 5d		 pop	 r13
  00170	41 5c		 pop	 r12
  00172	5b		 pop	 rbx
  00173	c3		 ret	 0
unz64local_SearchCentralDir ENDP
_TEXT	ENDS
PUBLIC	unzStringFileNameCompare
; Function compile flags: /Ogtpy
;	COMDAT unzStringFileNameCompare
_TEXT	SEGMENT
fileName1$ = 8
fileName2$ = 16
iCaseSensitivity$ = 24
unzStringFileNameCompare PROC				; COMDAT

; 395  :     if (iCaseSensitivity==0)

  00000	45 85 c0	 test	 r8d, r8d

; 396  :         iCaseSensitivity=CASESENSITIVITYDEFAULTVALUE;
; 397  : 
; 398  :     if (iCaseSensitivity==1)

  00003	74 23		 je	 SHORT $LN1@unzStringF
  00005	41 83 f8 01	 cmp	 r8d, 1
  00009	75 1d		 jne	 SHORT $LN1@unzStringF

; 399  :         return strcmp(fileName1,fileName2);

  0000b	48 2b d1	 sub	 rdx, rcx
  0000e	66 90		 npad	 2
$LL5@unzStringF:
  00010	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00013	3a 04 11	 cmp	 al, BYTE PTR [rcx+rdx]
  00016	75 0a		 jne	 SHORT $LN7@unzStringF
  00018	48 ff c1	 inc	 rcx
  0001b	84 c0		 test	 al, al
  0001d	75 f1		 jne	 SHORT $LL5@unzStringF
  0001f	33 c0		 xor	 eax, eax

; 400  : 
; 401  :     return STRCMPCASENOSENTIVEFUNCTION(fileName1,fileName2);
; 402  : }

  00021	c3		 ret	 0
$LN7@unzStringF:

; 399  :         return strcmp(fileName1,fileName2);

  00022	1b c0		 sbb	 eax, eax
  00024	83 d8 ff	 sbb	 eax, -1

; 400  : 
; 401  :     return STRCMPCASENOSENTIVEFUNCTION(fileName1,fileName2);
; 402  : }

  00027	c3		 ret	 0
$LN1@unzStringF:
  00028	e9 00 00 00 00	 jmp	 strcmpcasenosensitive_internal
unzStringFileNameCompare ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_getLong64 DD imagerel unz64local_getLong64
	DD	imagerel unz64local_getLong64+369
	DD	imagerel $unwind$unz64local_getLong64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_getLong64 DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unz64local_getLong64
_TEXT	SEGMENT
pzlib_filefunc_def$ = 48
filestream$ = 56
pX$ = 64
i$ = 72
unz64local_getLong64 PROC				; COMDAT

; 305  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b e8	 mov	 rbp, r8

; 306  :     ZPOS64_T x ;
; 307  :     int i = 0;
; 308  :     int err;
; 309  : 
; 310  :     err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00017	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  0001c	48 8b fa	 mov	 rdi, rdx
  0001f	48 8b f1	 mov	 rsi, rcx
  00022	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0002a	e8 00 00 00 00	 call	 unz64local_getByte

; 311  :     x = (ZPOS64_T)i;

  0002f	4c 63 4c 24 48	 movsxd	 r9, DWORD PTR i$[rsp]
  00034	44 8b d8	 mov	 r11d, eax
  00037	49 8b d9	 mov	 rbx, r9

; 312  : 
; 313  :     if (err==UNZ_OK)

  0003a	85 c0		 test	 eax, eax
  0003c	75 18		 jne	 SHORT $LN9@unz64local@3

; 314  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0003e	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00043	48 8b d7	 mov	 rdx, rdi
  00046	48 8b ce	 mov	 rcx, rsi
  00049	e8 00 00 00 00	 call	 unz64local_getByte
  0004e	44 8b 4c 24 48	 mov	 r9d, DWORD PTR i$[rsp]
  00053	44 8b d8	 mov	 r11d, eax
$LN9@unz64local@3:

; 315  :     x |= ((ZPOS64_T)i)<<8;

  00056	49 63 c1	 movsxd	 rax, r9d
  00059	48 c1 e0 08	 shl	 rax, 8
  0005d	48 0b d8	 or	 rbx, rax

; 316  : 
; 317  :     if (err==UNZ_OK)

  00060	45 85 db	 test	 r11d, r11d
  00063	75 18		 jne	 SHORT $LN8@unz64local@3

; 318  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00065	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  0006a	48 8b d7	 mov	 rdx, rdi
  0006d	48 8b ce	 mov	 rcx, rsi
  00070	e8 00 00 00 00	 call	 unz64local_getByte
  00075	44 8b 4c 24 48	 mov	 r9d, DWORD PTR i$[rsp]
  0007a	44 8b d8	 mov	 r11d, eax
$LN8@unz64local@3:

; 319  :     x |= ((ZPOS64_T)i)<<16;

  0007d	49 63 c1	 movsxd	 rax, r9d
  00080	48 c1 e0 10	 shl	 rax, 16
  00084	48 0b d8	 or	 rbx, rax

; 320  : 
; 321  :     if (err==UNZ_OK)

  00087	45 85 db	 test	 r11d, r11d
  0008a	75 18		 jne	 SHORT $LN7@unz64local@3

; 322  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0008c	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00091	48 8b d7	 mov	 rdx, rdi
  00094	48 8b ce	 mov	 rcx, rsi
  00097	e8 00 00 00 00	 call	 unz64local_getByte
  0009c	44 8b 4c 24 48	 mov	 r9d, DWORD PTR i$[rsp]
  000a1	44 8b d8	 mov	 r11d, eax
$LN7@unz64local@3:

; 323  :     x |= ((ZPOS64_T)i)<<24;

  000a4	49 63 c1	 movsxd	 rax, r9d
  000a7	48 c1 e0 18	 shl	 rax, 24
  000ab	48 0b d8	 or	 rbx, rax

; 324  : 
; 325  :     if (err==UNZ_OK)

  000ae	45 85 db	 test	 r11d, r11d
  000b1	75 18		 jne	 SHORT $LN6@unz64local@3

; 326  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  000b3	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  000b8	48 8b d7	 mov	 rdx, rdi
  000bb	48 8b ce	 mov	 rcx, rsi
  000be	e8 00 00 00 00	 call	 unz64local_getByte
  000c3	44 8b 4c 24 48	 mov	 r9d, DWORD PTR i$[rsp]
  000c8	44 8b d8	 mov	 r11d, eax
$LN6@unz64local@3:

; 327  :     x |= ((ZPOS64_T)i)<<32;

  000cb	49 63 c1	 movsxd	 rax, r9d
  000ce	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  000d2	48 0b d8	 or	 rbx, rax

; 328  : 
; 329  :     if (err==UNZ_OK)

  000d5	45 85 db	 test	 r11d, r11d
  000d8	75 18		 jne	 SHORT $LN5@unz64local@3

; 330  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  000da	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  000df	48 8b d7	 mov	 rdx, rdi
  000e2	48 8b ce	 mov	 rcx, rsi
  000e5	e8 00 00 00 00	 call	 unz64local_getByte
  000ea	44 8b 4c 24 48	 mov	 r9d, DWORD PTR i$[rsp]
  000ef	44 8b d8	 mov	 r11d, eax
$LN5@unz64local@3:

; 331  :     x |= ((ZPOS64_T)i)<<40;

  000f2	49 63 c1	 movsxd	 rax, r9d
  000f5	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  000f9	48 0b d8	 or	 rbx, rax

; 332  : 
; 333  :     if (err==UNZ_OK)

  000fc	45 85 db	 test	 r11d, r11d
  000ff	75 18		 jne	 SHORT $LN4@unz64local@3

; 334  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00101	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00106	48 8b d7	 mov	 rdx, rdi
  00109	48 8b ce	 mov	 rcx, rsi
  0010c	e8 00 00 00 00	 call	 unz64local_getByte
  00111	44 8b 4c 24 48	 mov	 r9d, DWORD PTR i$[rsp]
  00116	44 8b d8	 mov	 r11d, eax
$LN4@unz64local@3:

; 335  :     x |= ((ZPOS64_T)i)<<48;

  00119	49 63 c1	 movsxd	 rax, r9d
  0011c	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  00120	48 0b d8	 or	 rbx, rax

; 336  : 
; 337  :     if (err==UNZ_OK)

  00123	45 85 db	 test	 r11d, r11d
  00126	75 29		 jne	 SHORT $LN2@unz64local@3

; 338  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00128	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  0012d	48 8b d7	 mov	 rdx, rdi
  00130	48 8b ce	 mov	 rcx, rsi
  00133	e8 00 00 00 00	 call	 unz64local_getByte
  00138	44 8b d8	 mov	 r11d, eax

; 339  :     x |= ((ZPOS64_T)i)<<56;
; 340  : 
; 341  :     if (err==UNZ_OK)

  0013b	85 c0		 test	 eax, eax
  0013d	75 12		 jne	 SHORT $LN2@unz64local@3

; 342  :         *pX = x;

  0013f	48 63 44 24 48	 movsxd	 rax, DWORD PTR i$[rsp]
  00144	48 c1 e0 38	 shl	 rax, 56			; 00000038H
  00148	48 0b c3	 or	 rax, rbx
  0014b	48 89 45 00	 mov	 QWORD PTR [rbp], rax

; 343  :     else

  0014f	eb 08		 jmp	 SHORT $LN12@unz64local@3
$LN2@unz64local@3:

; 344  :         *pX = 0;

  00151	48 c7 45 00 00
	00 00 00	 mov	 QWORD PTR [rbp], 0
$LN12@unz64local@3:

; 345  :     return err;
; 346  : }

  00159	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0015e	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00163	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00168	41 8b c3	 mov	 eax, r11d
  0016b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0016f	5f		 pop	 rdi
  00170	c3		 ret	 0
unz64local_getLong64 ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_getLong DD imagerel unz64local_getLong
	DD	imagerel unz64local_getLong+201
	DD	imagerel $unwind$unz64local_getLong
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_getLong DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unz64local_getLong
_TEXT	SEGMENT
pzlib_filefunc_def$ = 48
filestream$ = 56
pX$ = 64
i$ = 72
unz64local_getLong PROC					; COMDAT

; 269  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b f8	 mov	 rdi, r8

; 270  :     uLong x ;
; 271  :     int i = 0;
; 272  :     int err;
; 273  : 
; 274  :     err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00017	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  0001c	48 8b f2	 mov	 rsi, rdx
  0001f	48 8b e9	 mov	 rbp, rcx
  00022	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0002a	e8 00 00 00 00	 call	 unz64local_getByte

; 275  :     x = (uLong)i;

  0002f	44 8b 4c 24 48	 mov	 r9d, DWORD PTR i$[rsp]
  00034	44 8b d8	 mov	 r11d, eax
  00037	41 8b d9	 mov	 ebx, r9d

; 276  : 
; 277  :     if (err==UNZ_OK)

  0003a	85 c0		 test	 eax, eax
  0003c	75 18		 jne	 SHORT $LN5@unz64local@4

; 278  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0003e	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00043	48 8b d6	 mov	 rdx, rsi
  00046	48 8b cd	 mov	 rcx, rbp
  00049	e8 00 00 00 00	 call	 unz64local_getByte
  0004e	44 8b 4c 24 48	 mov	 r9d, DWORD PTR i$[rsp]
  00053	44 8b d8	 mov	 r11d, eax
$LN5@unz64local@4:

; 279  :     x |= ((uLong)i)<<8;

  00056	41 8b c1	 mov	 eax, r9d
  00059	c1 e0 08	 shl	 eax, 8
  0005c	0b d8		 or	 ebx, eax

; 280  : 
; 281  :     if (err==UNZ_OK)

  0005e	45 85 db	 test	 r11d, r11d
  00061	75 18		 jne	 SHORT $LN4@unz64local@4

; 282  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00063	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00068	48 8b d6	 mov	 rdx, rsi
  0006b	48 8b cd	 mov	 rcx, rbp
  0006e	e8 00 00 00 00	 call	 unz64local_getByte
  00073	44 8b 4c 24 48	 mov	 r9d, DWORD PTR i$[rsp]
  00078	44 8b d8	 mov	 r11d, eax
$LN4@unz64local@4:

; 283  :     x |= ((uLong)i)<<16;

  0007b	41 c1 e1 10	 shl	 r9d, 16
  0007f	41 0b d9	 or	 ebx, r9d

; 284  : 
; 285  :     if (err==UNZ_OK)

  00082	45 85 db	 test	 r11d, r11d
  00085	75 24		 jne	 SHORT $LN2@unz64local@4

; 286  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00087	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  0008c	48 8b d6	 mov	 rdx, rsi
  0008f	48 8b cd	 mov	 rcx, rbp
  00092	e8 00 00 00 00	 call	 unz64local_getByte
  00097	44 8b d8	 mov	 r11d, eax

; 288  : 
; 289  :     if (err==UNZ_OK)

  0009a	85 c0		 test	 eax, eax
  0009c	75 0d		 jne	 SHORT $LN2@unz64local@4

; 287  :     x += ((uLong)i)<<24;

  0009e	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  000a2	c1 e0 18	 shl	 eax, 24
  000a5	03 c3		 add	 eax, ebx

; 290  :         *pX = x;

  000a7	89 07		 mov	 DWORD PTR [rdi], eax

; 291  :     else

  000a9	eb 06		 jmp	 SHORT $LN8@unz64local@4
$LN2@unz64local@4:

; 292  :         *pX = 0;

  000ab	c7 07 00 00 00
	00		 mov	 DWORD PTR [rdi], 0
$LN8@unz64local@4:

; 293  :     return err;
; 294  : }

  000b1	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b6	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000bb	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000c0	41 8b c3	 mov	 eax, r11d
  000c3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c7	5f		 pop	 rdi
  000c8	c3		 ret	 0
unz64local_getLong ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_getShort DD imagerel unz64local_getShort
	DD	imagerel unz64local_getShort+124
	DD	imagerel $unwind$unz64local_getShort
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_getShort DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unz64local_getShort
_TEXT	SEGMENT
pzlib_filefunc_def$ = 48
filestream$ = 56
pX$ = 64
i$ = 72
unz64local_getShort PROC				; COMDAT

; 242  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b d8	 mov	 rbx, r8

; 243  :     uLong x ;
; 244  :     int i = 0;
; 245  :     int err;
; 246  : 
; 247  :     err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  00017	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  0001c	48 8b f2	 mov	 rsi, rdx
  0001f	48 8b e9	 mov	 rbp, rcx
  00022	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0002a	e8 00 00 00 00	 call	 unz64local_getByte

; 248  :     x = (uLong)i;

  0002f	8b 7c 24 48	 mov	 edi, DWORD PTR i$[rsp]
  00033	44 8b d8	 mov	 r11d, eax

; 249  : 
; 250  :     if (err==UNZ_OK)

  00036	85 c0		 test	 eax, eax
  00038	75 24		 jne	 SHORT $LN2@unz64local@5

; 251  :         err = unz64local_getByte(pzlib_filefunc_def,filestream,&i);

  0003a	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  0003f	48 8b d6	 mov	 rdx, rsi
  00042	48 8b cd	 mov	 rcx, rbp
  00045	e8 00 00 00 00	 call	 unz64local_getByte
  0004a	44 8b d8	 mov	 r11d, eax

; 253  : 
; 254  :     if (err==UNZ_OK)

  0004d	85 c0		 test	 eax, eax
  0004f	75 0d		 jne	 SHORT $LN2@unz64local@5

; 252  :     x |= ((uLong)i)<<8;

  00051	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  00055	c1 e0 08	 shl	 eax, 8
  00058	0b c7		 or	 eax, edi

; 255  :         *pX = x;

  0005a	89 03		 mov	 DWORD PTR [rbx], eax

; 256  :     else

  0005c	eb 06		 jmp	 SHORT $LN6@unz64local@5
$LN2@unz64local@5:

; 257  :         *pX = 0;

  0005e	c7 03 00 00 00
	00		 mov	 DWORD PTR [rbx], 0
$LN6@unz64local@5:

; 258  :     return err;
; 259  : }

  00064	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00069	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0006e	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00073	41 8b c3	 mov	 eax, r11d
  00076	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007a	5f		 pop	 rdi
  0007b	c3		 ret	 0
unz64local_getShort ENDP
PUBLIC	unzReadCurrentFile
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzReadCurrentFile DD imagerel $LN51
	DD	imagerel $LN51+24
	DD	imagerel $unwind$unzReadCurrentFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$unzReadCurrentFile DD imagerel $LN51+24
	DD	imagerel $LN51+56
	DD	imagerel $chain$0$unzReadCurrentFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$unzReadCurrentFile DD imagerel $LN51+56
	DD	imagerel $LN51+78
	DD	imagerel $chain$2$unzReadCurrentFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$unzReadCurrentFile DD imagerel $LN51+78
	DD	imagerel $LN51+97
	DD	imagerel $chain$4$unzReadCurrentFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$12$unzReadCurrentFile DD imagerel $LN51+97
	DD	imagerel $LN51+692
	DD	imagerel $chain$12$unzReadCurrentFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$14$unzReadCurrentFile DD imagerel $LN51+692
	DD	imagerel $LN51+701
	DD	imagerel $chain$14$unzReadCurrentFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$14$unzReadCurrentFile DD 0e0021H
	DD	04f400H
	DD	05d400H
	DD	06c400H
	DD	077400H
	DD	0c6400H
	DD	0b5400H
	DD	0a3400H
	DD	imagerel $LN51
	DD	imagerel $LN51+24
	DD	imagerel $unwind$unzReadCurrentFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$12$unzReadCurrentFile DD 0e6a21H
	DD	04f46aH
	DD	05d465H
	DD	06c460H
	DD	07745bH
	DD	0b5456H
	DD	0a3451H
	DD	0c6400H
	DD	imagerel $LN51
	DD	imagerel $LN51+24
	DD	imagerel $unwind$unzReadCurrentFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$unzReadCurrentFile DD 020021H
	DD	0c6400H
	DD	imagerel $LN51
	DD	imagerel $LN51+24
	DD	imagerel $unwind$unzReadCurrentFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$unzReadCurrentFile DD 020021H
	DD	0c6400H
	DD	imagerel $LN51
	DD	imagerel $LN51+24
	DD	imagerel $unwind$unzReadCurrentFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$unzReadCurrentFile DD 020521H
	DD	0c6405H
	DD	imagerel $LN51
	DD	imagerel $LN51+24
	DD	imagerel $unwind$unzReadCurrentFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzReadCurrentFile DD 020601H
	DD	0e0027206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unzReadCurrentFile
_TEXT	SEGMENT
file$ = 80
buf$ = 88
len$ = 96
unzReadCurrentFile PROC					; COMDAT

; 1685 : {

$LN51:
  00000	41 56		 push	 r14
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 1686 :     int err=UNZ_OK;
; 1687 :     uInt iRead = 0;

  00006	45 33 f6	 xor	 r14d, r14d

; 1688 :     unz64_s* s;
; 1689 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1690 :     if (file==NULL)

  00009	48 85 c9	 test	 rcx, rcx
  0000c	75 0a		 jne	 SHORT $LN28@unzReadCur

; 1691 :         return UNZ_PARAMERROR;

  0000e	8d 41 9a	 lea	 eax, QWORD PTR [rcx-102]

; 1883 : }

  00011	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00015	41 5e		 pop	 r14
  00017	c3		 ret	 0
$LN28@unzReadCur:
  00018	48 89 74 24 60	 mov	 QWORD PTR [rsp+96], rsi

; 1692 :     s=(unz64_s*)file;
; 1693 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  0001d	48 8b b1 10 01
	00 00		 mov	 rsi, QWORD PTR [rcx+272]

; 1694 : 
; 1695 :     if (pfile_in_zip_read_info==NULL)

  00024	48 85 f6	 test	 rsi, rsi
  00027	75 0f		 jne	 SHORT $LN27@unzReadCur

; 1696 :         return UNZ_PARAMERROR;

  00029	8d 46 9a	 lea	 eax, QWORD PTR [rsi-102]
  0002c	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]

; 1883 : }

  00031	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00035	41 5e		 pop	 r14
  00037	c3		 ret	 0
$LN27@unzReadCur:

; 1697 : 
; 1698 : 
; 1699 :     if (pfile_in_zip_read_info->read_buffer == NULL)

  00038	4c 39 36	 cmp	 QWORD PTR [rsi], r14
  0003b	75 11		 jne	 SHORT $LN26@unzReadCur

; 1700 :         return UNZ_END_OF_LIST_OF_FILE;

  0003d	b8 9c ff ff ff	 mov	 eax, -100		; ffffffffffffff9cH
  00042	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]

; 1883 : }

  00047	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0004b	41 5e		 pop	 r14
  0004d	c3		 ret	 0
$LN26@unzReadCur:

; 1701 :     if (len==0)

  0004e	45 85 c0	 test	 r8d, r8d
  00051	75 0e		 jne	 SHORT $LN25@unzReadCur

; 1702 :         return 0;

  00053	33 c0		 xor	 eax, eax
  00055	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]

; 1883 : }

  0005a	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0005e	41 5e		 pop	 r14
  00060	c3		 ret	 0
$LN25@unzReadCur:

; 1703 : 
; 1704 :     pfile_in_zip_read_info->stream.next_out = (Bytef*)buf;
; 1705 : 
; 1706 :     pfile_in_zip_read_info->stream.avail_out = (uInt)len;
; 1707 : 
; 1708 :     if ((len>pfile_in_zip_read_info->rest_read_uncompressed) &&
; 1709 :         (!(pfile_in_zip_read_info->raw)))

  00061	41 8b c8	 mov	 ecx, r8d
  00064	48 89 56 18	 mov	 QWORD PTR [rsi+24], rdx
  00068	44 89 46 20	 mov	 DWORD PTR [rsi+32], r8d
  0006c	48 3b 8e a0 00
	00 00		 cmp	 rcx, QWORD PTR [rsi+160]
  00073	76 12		 jbe	 SHORT $LN24@unzReadCur
  00075	44 39 b6 18 01
	00 00		 cmp	 DWORD PTR [rsi+280], r14d
  0007c	75 09		 jne	 SHORT $LN24@unzReadCur

; 1710 :         pfile_in_zip_read_info->stream.avail_out =
; 1711 :             (uInt)pfile_in_zip_read_info->rest_read_uncompressed;

  0007e	8b 86 a0 00 00
	00		 mov	 eax, DWORD PTR [rsi+160]
  00084	89 46 20	 mov	 DWORD PTR [rsi+32], eax
$LN24@unzReadCur:

; 1712 : 
; 1713 :     if ((len>pfile_in_zip_read_info->rest_read_compressed+
; 1714 :            pfile_in_zip_read_info->stream.avail_in) &&
; 1715 :          (pfile_in_zip_read_info->raw))

  00087	8b 56 10	 mov	 edx, DWORD PTR [rsi+16]
  0008a	8b c2		 mov	 eax, edx
  0008c	48 03 86 98 00
	00 00		 add	 rax, QWORD PTR [rsi+152]
  00093	48 3b c8	 cmp	 rcx, rax
  00096	76 15		 jbe	 SHORT $LN31@unzReadCur
  00098	44 39 b6 18 01
	00 00		 cmp	 DWORD PTR [rsi+280], r14d
  0009f	74 0c		 je	 SHORT $LN31@unzReadCur

; 1716 :         pfile_in_zip_read_info->stream.avail_out =
; 1717 :             (uInt)pfile_in_zip_read_info->rest_read_compressed+
; 1718 :             pfile_in_zip_read_info->stream.avail_in;

  000a1	8b 86 98 00 00
	00		 mov	 eax, DWORD PTR [rsi+152]
  000a7	8d 0c 02	 lea	 ecx, DWORD PTR [rdx+rax]
  000aa	89 4e 20	 mov	 DWORD PTR [rsi+32], ecx
$LN31@unzReadCur:

; 1719 : 
; 1720 :     while (pfile_in_zip_read_info->stream.avail_out>0)

  000ad	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  000b2	48 89 6c 24 58	 mov	 QWORD PTR [rsp+88], rbp
  000b7	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  000bc	4c 89 64 24 30	 mov	 QWORD PTR [rsp+48], r12
  000c1	4c 89 6c 24 28	 mov	 QWORD PTR [rsp+40], r13
  000c6	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  000cb	44 39 76 20	 cmp	 DWORD PTR [rsi+32], r14d
  000cf	0f 86 b2 01 00
	00		 jbe	 $LN42@unzReadCur
  000d5	41 bf fd ff ff
	ff		 mov	 r15d, -3
  000db	0f 1f 44 00 00	 npad	 5
$LL22@unzReadCur:

; 1721 :     {
; 1722 :         if ((pfile_in_zip_read_info->stream.avail_in==0) &&
; 1723 :             (pfile_in_zip_read_info->rest_read_compressed>0))

  000e0	83 7e 10 00	 cmp	 DWORD PTR [rsi+16], 0
  000e4	0f 85 82 00 00
	00		 jne	 $LN20@unzReadCur
  000ea	48 8b 86 98 00
	00 00		 mov	 rax, QWORD PTR [rsi+152]
  000f1	48 85 c0	 test	 rax, rax
  000f4	74 76		 je	 SHORT $LN20@unzReadCur

; 1724 :         {
; 1725 :             uInt uReadThis = UNZ_BUFSIZE;

  000f6	bb 00 40 00 00	 mov	 ebx, 16384		; 00004000H

; 1726 :             if (pfile_in_zip_read_info->rest_read_compressed<uReadThis)

  000fb	48 3b c3	 cmp	 rax, rbx
  000fe	73 0a		 jae	 SHORT $LN41@unzReadCur

; 1727 :                 uReadThis = (uInt)pfile_in_zip_read_info->rest_read_compressed;

  00100	8b d8		 mov	 ebx, eax

; 1728 :             if (uReadThis == 0)

  00102	85 c0		 test	 eax, eax
  00104	0f 84 aa 01 00
	00		 je	 $LN33@unzReadCur
$LN41@unzReadCur:

; 1730 :             if (ZSEEK64(pfile_in_zip_read_info->z_filefunc,
; 1731 :                       pfile_in_zip_read_info->filestream,
; 1732 :                       pfile_in_zip_read_info->pos_in_zipfile +
; 1733 :                          pfile_in_zip_read_info->byte_before_the_zipfile,
; 1734 :                          ZLIB_FILEFUNC_SEEK_SET)!=0)

  0010a	4c 8b 86 10 01
	00 00		 mov	 r8, QWORD PTR [rsi+272]
  00111	48 8b 96 00 01
	00 00		 mov	 rdx, QWORD PTR [rsi+256]
  00118	48 8d 8e a8 00
	00 00		 lea	 rcx, QWORD PTR [rsi+168]
  0011f	4c 03 46 60	 add	 r8, QWORD PTR [rsi+96]
  00123	45 33 c9	 xor	 r9d, r9d
  00126	e8 00 00 00 00	 call	 call_zseek64
  0012b	85 c0		 test	 eax, eax
  0012d	0f 85 85 01 00
	00		 jne	 $LN34@unzReadCur

; 1736 :             if (ZREAD64(pfile_in_zip_read_info->z_filefunc,
; 1737 :                       pfile_in_zip_read_info->filestream,
; 1738 :                       pfile_in_zip_read_info->read_buffer,
; 1739 :                       uReadThis)!=uReadThis)

  00133	4c 8b 06	 mov	 r8, QWORD PTR [rsi]
  00136	48 8b 96 00 01
	00 00		 mov	 rdx, QWORD PTR [rsi+256]
  0013d	48 8b 8e e0 00
	00 00		 mov	 rcx, QWORD PTR [rsi+224]
  00144	44 8b cb	 mov	 r9d, ebx
  00147	ff 96 b0 00 00
	00		 call	 QWORD PTR [rsi+176]
  0014d	3b c3		 cmp	 eax, ebx
  0014f	0f 85 63 01 00
	00		 jne	 $LN34@unzReadCur

; 1740 :                 return UNZ_ERRNO;
; 1741 : 
; 1742 : 
; 1743 : #            ifndef NOUNCRYPT
; 1744 :             if(s->encrypted)
; 1745 :             {
; 1746 :                 uInt i;
; 1747 :                 for(i=0;i<uReadThis;i++)
; 1748 :                   pfile_in_zip_read_info->read_buffer[i] =
; 1749 :                       zdecode(s->keys,s->pcrc_32_tab,
; 1750 :                               pfile_in_zip_read_info->read_buffer[i]);
; 1751 :             }
; 1752 : #            endif
; 1753 : 
; 1754 : 
; 1755 :             pfile_in_zip_read_info->pos_in_zipfile += uReadThis;

  00155	8b c3		 mov	 eax, ebx

; 1756 : 
; 1757 :             pfile_in_zip_read_info->rest_read_compressed-=uReadThis;
; 1758 : 
; 1759 :             pfile_in_zip_read_info->stream.next_in =
; 1760 :                 (Bytef*)pfile_in_zip_read_info->read_buffer;
; 1761 :             pfile_in_zip_read_info->stream.avail_in = (uInt)uReadThis;

  00157	89 5e 10	 mov	 DWORD PTR [rsi+16], ebx
  0015a	48 01 46 60	 add	 QWORD PTR [rsi+96], rax
  0015e	48 29 86 98 00
	00 00		 sub	 QWORD PTR [rsi+152], rax
  00165	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  00168	48 89 46 08	 mov	 QWORD PTR [rsi+8], rax
$LN20@unzReadCur:

; 1762 :         }
; 1763 : 
; 1764 :         if ((pfile_in_zip_read_info->compression_method==0) || (pfile_in_zip_read_info->raw))

  0016c	8b 86 08 01 00
	00		 mov	 eax, DWORD PTR [rsi+264]
  00172	85 c0		 test	 eax, eax
  00174	0f 84 82 00 00
	00		 je	 $LN14@unzReadCur
  0017a	83 be 18 01 00
	00 00		 cmp	 DWORD PTR [rsi+280], 0
  00181	75 79		 jne	 SHORT $LN14@unzReadCur

; 1794 :         }
; 1795 :         else if (pfile_in_zip_read_info->compression_method==Z_BZIP2ED)

  00183	83 f8 0c	 cmp	 eax, 12
  00186	0f 84 f1 00 00
	00		 je	 $LN2@unzReadCur

; 1796 :         {
; 1797 : #ifdef HAVE_BZIP2
; 1798 :             uLong uTotalOutBefore,uTotalOutAfter;
; 1799 :             const Bytef *bufBefore;
; 1800 :             uLong uOutThis;
; 1801 : 
; 1802 :             pfile_in_zip_read_info->bstream.next_in        = (char*)pfile_in_zip_read_info->stream.next_in;
; 1803 :             pfile_in_zip_read_info->bstream.avail_in       = pfile_in_zip_read_info->stream.avail_in;
; 1804 :             pfile_in_zip_read_info->bstream.total_in_lo32  = pfile_in_zip_read_info->stream.total_in;
; 1805 :             pfile_in_zip_read_info->bstream.total_in_hi32  = 0;
; 1806 :             pfile_in_zip_read_info->bstream.next_out       = (char*)pfile_in_zip_read_info->stream.next_out;
; 1807 :             pfile_in_zip_read_info->bstream.avail_out      = pfile_in_zip_read_info->stream.avail_out;
; 1808 :             pfile_in_zip_read_info->bstream.total_out_lo32 = pfile_in_zip_read_info->stream.total_out;
; 1809 :             pfile_in_zip_read_info->bstream.total_out_hi32 = 0;
; 1810 : 
; 1811 :             uTotalOutBefore = pfile_in_zip_read_info->bstream.total_out_lo32;
; 1812 :             bufBefore = (const Bytef *)pfile_in_zip_read_info->bstream.next_out;
; 1813 : 
; 1814 :             err=BZ2_bzDecompress(&pfile_in_zip_read_info->bstream);
; 1815 : 
; 1816 :             uTotalOutAfter = pfile_in_zip_read_info->bstream.total_out_lo32;
; 1817 :             uOutThis = uTotalOutAfter-uTotalOutBefore;
; 1818 : 
; 1819 :             pfile_in_zip_read_info->total_out_64 = pfile_in_zip_read_info->total_out_64 + uOutThis;
; 1820 : 
; 1821 :             pfile_in_zip_read_info->crc32 = crc32(pfile_in_zip_read_info->crc32,bufBefore, (uInt)(uOutThis));
; 1822 :             pfile_in_zip_read_info->rest_read_uncompressed -= uOutThis;
; 1823 :             iRead += (uInt)(uTotalOutAfter - uTotalOutBefore);
; 1824 : 
; 1825 :             pfile_in_zip_read_info->stream.next_in   = (Bytef*)pfile_in_zip_read_info->bstream.next_in;
; 1826 :             pfile_in_zip_read_info->stream.avail_in  = pfile_in_zip_read_info->bstream.avail_in;
; 1827 :             pfile_in_zip_read_info->stream.total_in  = pfile_in_zip_read_info->bstream.total_in_lo32;
; 1828 :             pfile_in_zip_read_info->stream.next_out  = (Bytef*)pfile_in_zip_read_info->bstream.next_out;
; 1829 :             pfile_in_zip_read_info->stream.avail_out = pfile_in_zip_read_info->bstream.avail_out;
; 1830 :             pfile_in_zip_read_info->stream.total_out = pfile_in_zip_read_info->bstream.total_out_lo32;
; 1831 : 
; 1832 :             if (err==BZ_STREAM_END)
; 1833 :               return (iRead==0) ? UNZ_EOF : iRead;
; 1834 :             if (err!=BZ_OK)
; 1835 :               break;
; 1836 : #endif
; 1837 :         } // end Z_BZIP2ED
; 1838 :         else
; 1839 :         {
; 1840 :             ZPOS64_T uTotalOutBefore,uTotalOutAfter;
; 1841 :             const Bytef *bufBefore;
; 1842 :             ZPOS64_T uOutThis;
; 1843 :             int flush=Z_SYNC_FLUSH;
; 1844 : 
; 1845 :             uTotalOutBefore = pfile_in_zip_read_info->stream.total_out;

  0018c	44 8b 66 24	 mov	 r12d, DWORD PTR [rsi+36]

; 1846 :             bufBefore = pfile_in_zip_read_info->stream.next_out;

  00190	4c 8b 6e 18	 mov	 r13, QWORD PTR [rsi+24]

; 1847 : 
; 1848 :             /*
; 1849 :             if ((pfile_in_zip_read_info->rest_read_uncompressed ==
; 1850 :                      pfile_in_zip_read_info->stream.avail_out) &&
; 1851 :                 (pfile_in_zip_read_info->rest_read_compressed == 0))
; 1852 :                 flush = Z_FINISH;
; 1853 :             */
; 1854 :             err=inflate(&pfile_in_zip_read_info->stream,flush);

  00194	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00198	ba 02 00 00 00	 mov	 edx, 2
  0019d	e8 00 00 00 00	 call	 inflate
  001a2	8b e8		 mov	 ebp, eax

; 1855 : 
; 1856 :             if ((err>=0) && (pfile_in_zip_read_info->stream.msg!=NULL))

  001a4	85 c0		 test	 eax, eax
  001a6	78 09		 js	 SHORT $LN4@unzReadCur
  001a8	48 83 7e 28 00	 cmp	 QWORD PTR [rsi+40], 0
  001ad	41 0f 45 ef	 cmovne	 ebp, r15d
$LN4@unzReadCur:

; 1857 :               err = Z_DATA_ERROR;
; 1858 : 
; 1859 :             uTotalOutAfter = pfile_in_zip_read_info->stream.total_out;

  001b1	8b 7e 24	 mov	 edi, DWORD PTR [rsi+36]

; 1860 :             uOutThis = uTotalOutAfter-uTotalOutBefore;
; 1861 : 
; 1862 :             pfile_in_zip_read_info->total_out_64 = pfile_in_zip_read_info->total_out_64 + uOutThis;
; 1863 : 
; 1864 :             pfile_in_zip_read_info->crc32 =
; 1865 :                 crc32(pfile_in_zip_read_info->crc32,bufBefore,
; 1866 :                         (uInt)(uOutThis));

  001b4	8b 8e 90 00 00
	00		 mov	 ecx, DWORD PTR [rsi+144]
  001ba	49 8b d5	 mov	 rdx, r13
  001bd	8b df		 mov	 ebx, edi
  001bf	49 2b dc	 sub	 rbx, r12
  001c2	48 01 9e 88 00
	00 00		 add	 QWORD PTR [rsi+136], rbx
  001c9	44 8b c3	 mov	 r8d, ebx
  001cc	e8 00 00 00 00	 call	 crc32

; 1867 : 
; 1868 :             pfile_in_zip_read_info->rest_read_uncompressed -=
; 1869 :                 uOutThis;

  001d1	48 29 9e a0 00
	00 00		 sub	 QWORD PTR [rsi+160], rbx

; 1870 : 
; 1871 :             iRead += (uInt)(uTotalOutAfter - uTotalOutBefore);

  001d8	41 2b fc	 sub	 edi, r12d
  001db	44 03 f7	 add	 r14d, edi
  001de	89 86 90 00 00
	00		 mov	 DWORD PTR [rsi+144], eax

; 1872 : 
; 1873 :             if (err==Z_STREAM_END)

  001e4	83 fd 01	 cmp	 ebp, 1
  001e7	0f 84 9a 00 00
	00		 je	 $LN42@unzReadCur

; 1875 :             if (err!=Z_OK)

  001ed	85 ed		 test	 ebp, ebp
  001ef	0f 84 88 00 00
	00		 je	 $LN2@unzReadCur

; 1882 :     return err;

  001f5	8b c5		 mov	 eax, ebp

; 1874 :                 return (iRead==0) ? UNZ_EOF : iRead;

  001f7	e9 8e 00 00 00	 jmp	 $LN49@unzReadCur
$LN14@unzReadCur:

; 1765 :         {
; 1766 :             uInt uDoCopy,i ;
; 1767 : 
; 1768 :             if ((pfile_in_zip_read_info->stream.avail_in == 0) &&
; 1769 :                 (pfile_in_zip_read_info->rest_read_compressed == 0))

  001fc	8b 6e 10	 mov	 ebp, DWORD PTR [rsi+16]
  001ff	85 ed		 test	 ebp, ebp
  00201	75 0a		 jne	 SHORT $LN13@unzReadCur
  00203	48 83 be 98 00
	00 00 00	 cmp	 QWORD PTR [rsi+152], 0
  0020b	74 7a		 je	 SHORT $LN42@unzReadCur
$LN13@unzReadCur:

; 1770 :                 return (iRead==0) ? UNZ_EOF : iRead;
; 1771 : 
; 1772 :             if (pfile_in_zip_read_info->stream.avail_out <
; 1773 :                             pfile_in_zip_read_info->stream.avail_in)

  0020d	8b 46 20	 mov	 eax, DWORD PTR [rsi+32]
  00210	3b c5		 cmp	 eax, ebp
  00212	0f 42 e8	 cmovb	 ebp, eax

; 1774 :                 uDoCopy = pfile_in_zip_read_info->stream.avail_out ;
; 1775 :             else
; 1776 :                 uDoCopy = pfile_in_zip_read_info->stream.avail_in ;
; 1777 : 
; 1778 :             for (i=0;i<uDoCopy;i++)

  00215	85 ed		 test	 ebp, ebp
  00217	74 20		 je	 SHORT $LN8@unzReadCur
  00219	33 d2		 xor	 edx, edx
  0021b	44 8b c5	 mov	 r8d, ebp
  0021e	66 90		 npad	 2
$LL10@unzReadCur:

; 1779 :                 *(pfile_in_zip_read_info->stream.next_out+i) =
; 1780 :                         *(pfile_in_zip_read_info->stream.next_in+i);

  00220	48 8b 46 08	 mov	 rax, QWORD PTR [rsi+8]
  00224	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]
  00228	48 ff c2	 inc	 rdx
  0022b	49 ff c8	 dec	 r8
  0022e	0f b6 44 02 ff	 movzx	 eax, BYTE PTR [rdx+rax-1]
  00233	88 44 0a ff	 mov	 BYTE PTR [rdx+rcx-1], al
  00237	75 e7		 jne	 SHORT $LL10@unzReadCur
$LN8@unzReadCur:

; 1781 : 
; 1782 :             pfile_in_zip_read_info->total_out_64 = pfile_in_zip_read_info->total_out_64 + uDoCopy;
; 1783 : 
; 1784 :             pfile_in_zip_read_info->crc32 = crc32(pfile_in_zip_read_info->crc32,
; 1785 :                                 pfile_in_zip_read_info->stream.next_out,
; 1786 :                                 uDoCopy);

  00239	48 8b 5e 18	 mov	 rbx, QWORD PTR [rsi+24]
  0023d	8b 8e 90 00 00
	00		 mov	 ecx, DWORD PTR [rsi+144]
  00243	8b fd		 mov	 edi, ebp
  00245	48 01 be 88 00
	00 00		 add	 QWORD PTR [rsi+136], rdi
  0024c	44 8b c5	 mov	 r8d, ebp
  0024f	48 8b d3	 mov	 rdx, rbx
  00252	e8 00 00 00 00	 call	 crc32

; 1787 :             pfile_in_zip_read_info->rest_read_uncompressed-=uDoCopy;

  00257	48 29 be a0 00
	00 00		 sub	 QWORD PTR [rsi+160], rdi

; 1788 :             pfile_in_zip_read_info->stream.avail_in -= uDoCopy;

  0025e	29 6e 10	 sub	 DWORD PTR [rsi+16], ebp

; 1789 :             pfile_in_zip_read_info->stream.avail_out -= uDoCopy;

  00261	29 6e 20	 sub	 DWORD PTR [rsi+32], ebp

; 1790 :             pfile_in_zip_read_info->stream.next_out += uDoCopy;
; 1791 :             pfile_in_zip_read_info->stream.next_in += uDoCopy;

  00264	48 01 7e 08	 add	 QWORD PTR [rsi+8], rdi

; 1792 :             pfile_in_zip_read_info->stream.total_out += uDoCopy;

  00268	01 6e 24	 add	 DWORD PTR [rsi+36], ebp
  0026b	89 86 90 00 00
	00		 mov	 DWORD PTR [rsi+144], eax
  00271	48 8d 44 1d 00	 lea	 rax, QWORD PTR [rbp+rbx]

; 1793 :             iRead += uDoCopy;

  00276	44 03 f5	 add	 r14d, ebp
  00279	48 89 46 18	 mov	 QWORD PTR [rsi+24], rax
$LN2@unzReadCur:

; 1719 : 
; 1720 :     while (pfile_in_zip_read_info->stream.avail_out>0)

  0027d	83 7e 20 00	 cmp	 DWORD PTR [rsi+32], 0
  00281	0f 87 59 fe ff
	ff		 ja	 $LL22@unzReadCur
$LN42@unzReadCur:

; 1876 :                 break;
; 1877 :         }
; 1878 :     }
; 1879 : 
; 1880 :     if (err==Z_OK)
; 1881 :         return iRead;

  00287	41 8b c6	 mov	 eax, r14d
$LN49@unzReadCur:
  0028a	4c 8b 6c 24 28	 mov	 r13, QWORD PTR [rsp+40]
  0028f	4c 8b 64 24 30	 mov	 r12, QWORD PTR [rsp+48]
  00294	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  00299	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0029e	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  002a3	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]
  002a8	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]

; 1883 : }

  002ad	48 83 c4 40	 add	 rsp, 64			; 00000040H
  002b1	41 5e		 pop	 r14
  002b3	c3		 ret	 0
$LN33@unzReadCur:

; 1729 :                 return UNZ_EOF;

  002b4	33 c0		 xor	 eax, eax
  002b6	eb d2		 jmp	 SHORT $LN49@unzReadCur
$LN34@unzReadCur:

; 1735 :                 return UNZ_ERRNO;

  002b8	83 c8 ff	 or	 eax, -1
  002bb	eb cd		 jmp	 SHORT $LN49@unzReadCur
unzReadCurrentFile ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_CheckCurrentFileCoherencyHeader DD imagerel unz64local_CheckCurrentFileCoherencyHeader
	DD	imagerel unz64local_CheckCurrentFileCoherencyHeader+549
	DD	imagerel $unwind$unz64local_CheckCurrentFileCoherencyHeader
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_CheckCurrentFileCoherencyHeader DD 0b6601H
	DD	04f466H
	DD	0e5461H
	DD	0e00a420eH
	DD	0c006d008H
	DD	060037004H
	DD	03002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unz64local_CheckCurrentFileCoherencyHeader
_TEXT	SEGMENT
size_extra_field$ = 96
size_filename$ = 96
uData$ = 96
uMagic$ = 96
s$ = 96
uFlags$ = 104
piSizeVar$ = 104
poffset_local_extrafield$ = 112
psize_local_extrafield$ = 120
unz64local_CheckCurrentFileCoherencyHeader PROC		; COMDAT

; 1388 : {

  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	41 54		 push	 r12
  00006	41 55		 push	 r13
  00008	41 56		 push	 r14
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1389 :     uLong uMagic,uData,uFlags;
; 1390 :     uLong size_filename;
; 1391 :     uLong size_extra_field;
; 1392 :     int err=UNZ_OK;

  0000e	33 db		 xor	 ebx, ebx
  00010	4d 8b f0	 mov	 r14, r8
  00013	4c 8b e2	 mov	 r12, rdx

; 1393 : 
; 1394 :     *piSizeVar = 0;
; 1395 :     *poffset_local_extrafield = 0;

  00016	49 89 18	 mov	 QWORD PTR [r8], rbx

; 1396 :     *psize_local_extrafield = 0;
; 1397 : 
; 1398 :     if (ZSEEK64(s->z_filefunc, s->filestream,s->cur_file_info_internal.offset_curfile +
; 1399 :                                 s->byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00019	4c 8b 41 78	 mov	 r8, QWORD PTR [rcx+120]
  0001d	89 1a		 mov	 DWORD PTR [rdx], ebx
  0001f	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00023	4c 03 81 08 01
	00 00		 add	 r8, QWORD PTR [rcx+264]
  0002a	4d 8b e9	 mov	 r13, r9
  0002d	41 89 19	 mov	 DWORD PTR [r9], ebx
  00030	45 33 c9	 xor	 r9d, r9d
  00033	48 8b f9	 mov	 rdi, rcx
  00036	e8 00 00 00 00	 call	 call_zseek64
  0003b	85 c0		 test	 eax, eax
  0003d	74 11		 je	 SHORT $LN28@unz64local@6

; 1400 :         return UNZ_ERRNO;

  0003f	83 c8 ff	 or	 eax, -1

; 1466 : }

  00042	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00046	41 5e		 pop	 r14
  00048	41 5d		 pop	 r13
  0004a	41 5c		 pop	 r12
  0004c	5f		 pop	 rdi
  0004d	5e		 pop	 rsi
  0004e	5b		 pop	 rbx
  0004f	c3		 ret	 0
$LN28@unz64local@6:

; 1401 : 
; 1402 : 
; 1403 :     if (err==UNZ_OK)
; 1404 :     {
; 1405 :         if (unz64local_getLong(&s->z_filefunc, s->filestream,&uMagic) != UNZ_OK)

  00050	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  00054	4c 8d 44 24 60	 lea	 r8, QWORD PTR uMagic$[rsp]
  00059	48 8b cf	 mov	 rcx, rdi
  0005c	48 89 6c 24 70	 mov	 QWORD PTR [rsp+112], rbp
  00061	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  00066	e8 00 00 00 00	 call	 unz64local_getLong
  0006b	83 ce ff	 or	 esi, -1
  0006e	41 bf 99 ff ff
	ff		 mov	 r15d, -103		; ffffffffffffff99H
  00074	85 c0		 test	 eax, eax
  00076	74 04		 je	 SHORT $LN23@unz64local@6

; 1406 :             err=UNZ_ERRNO;

  00078	8b de		 mov	 ebx, esi
  0007a	eb 0c		 jmp	 SHORT $LN21@unz64local@6
$LN23@unz64local@6:

; 1407 :         else if (uMagic!=0x04034b50)

  0007c	81 7c 24 60 50
	4b 03 04	 cmp	 DWORD PTR uMagic$[rsp], 67324752 ; 04034b50H
  00084	41 0f 45 df	 cmovne	 ebx, r15d
$LN21@unz64local@6:

; 1408 :             err=UNZ_BADZIPFILE;
; 1409 :     }
; 1410 : 
; 1411 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&uData) != UNZ_OK)

  00088	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  0008c	4c 8d 44 24 60	 lea	 r8, QWORD PTR uData$[rsp]
  00091	48 8b cf	 mov	 rcx, rdi
  00094	e8 00 00 00 00	 call	 unz64local_getShort

; 1412 :         err=UNZ_ERRNO;
; 1413 : /*
; 1414 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.wVersion))
; 1415 :         err=UNZ_BADZIPFILE;
; 1416 : */
; 1417 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&uFlags) != UNZ_OK)

  00099	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  0009d	4c 8d 44 24 68	 lea	 r8, QWORD PTR uFlags$[rsp]
  000a2	85 c0		 test	 eax, eax
  000a4	48 8b cf	 mov	 rcx, rdi
  000a7	0f 45 de	 cmovne	 ebx, esi
  000aa	e8 00 00 00 00	 call	 unz64local_getShort

; 1418 :         err=UNZ_ERRNO;
; 1419 : 
; 1420 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&uData) != UNZ_OK)

  000af	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  000b3	85 c0		 test	 eax, eax
  000b5	4c 8d 44 24 60	 lea	 r8, QWORD PTR uData$[rsp]
  000ba	48 8b cf	 mov	 rcx, rdi
  000bd	0f 45 de	 cmovne	 ebx, esi
  000c0	e8 00 00 00 00	 call	 unz64local_getShort
  000c5	85 c0		 test	 eax, eax
  000c7	74 04		 je	 SHORT $LN18@unz64local@6

; 1421 :         err=UNZ_ERRNO;

  000c9	8b de		 mov	 ebx, esi
  000cb	eb 25		 jmp	 SHORT $LN15@unz64local@6
$LN18@unz64local@6:

; 1422 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.compression_method))

  000cd	85 db		 test	 ebx, ebx
  000cf	75 21		 jne	 SHORT $LN15@unz64local@6
  000d1	8b 87 bc 00 00
	00		 mov	 eax, DWORD PTR [rdi+188]
  000d7	39 44 24 60	 cmp	 DWORD PTR uData$[rsp], eax
  000db	74 05		 je	 SHORT $LN29@unz64local@6

; 1423 :         err=UNZ_BADZIPFILE;

  000dd	41 8b df	 mov	 ebx, r15d

; 1424 : 
; 1425 :     if ((err==UNZ_OK) && (s->cur_file_info.compression_method!=0) &&
; 1426 : /* #ifdef HAVE_BZIP2 */
; 1427 :                          (s->cur_file_info.compression_method!=Z_BZIP2ED) &&
; 1428 : /* #endif */
; 1429 :                          (s->cur_file_info.compression_method!=Z_DEFLATED))

  000e0	eb 10		 jmp	 SHORT $LN15@unz64local@6
$LN29@unz64local@6:
  000e2	85 c0		 test	 eax, eax
  000e4	74 0c		 je	 SHORT $LN15@unz64local@6
  000e6	83 f8 0c	 cmp	 eax, 12
  000e9	74 07		 je	 SHORT $LN15@unz64local@6
  000eb	83 f8 08	 cmp	 eax, 8
  000ee	41 0f 45 df	 cmovne	 ebx, r15d
$LN15@unz64local@6:

; 1430 :         err=UNZ_BADZIPFILE;
; 1431 : 
; 1432 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* date/time */

  000f2	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  000f6	4c 8d 44 24 60	 lea	 r8, QWORD PTR uData$[rsp]
  000fb	48 8b cf	 mov	 rcx, rdi
  000fe	e8 00 00 00 00	 call	 unz64local_getLong

; 1433 :         err=UNZ_ERRNO;
; 1434 : 
; 1435 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* crc */

  00103	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  00107	4c 8d 44 24 60	 lea	 r8, QWORD PTR uData$[rsp]
  0010c	85 c0		 test	 eax, eax
  0010e	48 8b cf	 mov	 rcx, rdi
  00111	0f 45 de	 cmovne	 ebx, esi
  00114	e8 00 00 00 00	 call	 unz64local_getLong
  00119	8b 6c 24 68	 mov	 ebp, DWORD PTR uFlags$[rsp]
  0011d	85 c0		 test	 eax, eax
  0011f	74 04		 je	 SHORT $LN13@unz64local@6

; 1436 :         err=UNZ_ERRNO;

  00121	8b de		 mov	 ebx, esi
  00123	eb 18		 jmp	 SHORT $LN11@unz64local@6
$LN13@unz64local@6:

; 1437 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.crc) && ((uFlags & 8)==0))

  00125	85 db		 test	 ebx, ebx
  00127	75 14		 jne	 SHORT $LN11@unz64local@6
  00129	8b 87 c4 00 00
	00		 mov	 eax, DWORD PTR [rdi+196]
  0012f	39 44 24 60	 cmp	 DWORD PTR uData$[rsp], eax
  00133	74 08		 je	 SHORT $LN11@unz64local@6
  00135	40 f6 c5 08	 test	 bpl, 8
  00139	41 0f 44 df	 cmove	 ebx, r15d
$LN11@unz64local@6:

; 1438 :         err=UNZ_BADZIPFILE;
; 1439 : 
; 1440 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* size compr */

  0013d	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  00141	4c 8d 44 24 60	 lea	 r8, QWORD PTR uData$[rsp]
  00146	48 8b cf	 mov	 rcx, rdi
  00149	e8 00 00 00 00	 call	 unz64local_getLong
  0014e	85 c0		 test	 eax, eax
  00150	74 04		 je	 SHORT $LN10@unz64local@6

; 1441 :         err=UNZ_ERRNO;

  00152	8b de		 mov	 ebx, esi
  00154	eb 1e		 jmp	 SHORT $LN8@unz64local@6
$LN10@unz64local@6:

; 1442 :     else if (uData != 0xFFFFFFFF && (err==UNZ_OK) && (uData!=s->cur_file_info.compressed_size) && ((uFlags & 8)==0))

  00156	8b 44 24 60	 mov	 eax, DWORD PTR uData$[rsp]
  0015a	83 f8 ff	 cmp	 eax, -1			; ffffffffH
  0015d	74 15		 je	 SHORT $LN8@unz64local@6
  0015f	85 db		 test	 ebx, ebx
  00161	75 11		 jne	 SHORT $LN8@unz64local@6
  00163	48 3b 87 c8 00
	00 00		 cmp	 rax, QWORD PTR [rdi+200]
  0016a	74 08		 je	 SHORT $LN8@unz64local@6
  0016c	40 f6 c5 08	 test	 bpl, 8
  00170	41 0f 44 df	 cmove	 ebx, r15d
$LN8@unz64local@6:

; 1443 :         err=UNZ_BADZIPFILE;
; 1444 : 
; 1445 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* size uncompr */

  00174	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  00178	4c 8d 44 24 60	 lea	 r8, QWORD PTR uData$[rsp]
  0017d	48 8b cf	 mov	 rcx, rdi
  00180	e8 00 00 00 00	 call	 unz64local_getLong
  00185	85 c0		 test	 eax, eax
  00187	74 04		 je	 SHORT $LN7@unz64local@6

; 1446 :         err=UNZ_ERRNO;

  00189	8b de		 mov	 ebx, esi
  0018b	eb 1e		 jmp	 SHORT $LN5@unz64local@6
$LN7@unz64local@6:

; 1447 :     else if (uData != 0xFFFFFFFF && (err==UNZ_OK) && (uData!=s->cur_file_info.uncompressed_size) && ((uFlags & 8)==0))

  0018d	8b 44 24 60	 mov	 eax, DWORD PTR uData$[rsp]
  00191	83 f8 ff	 cmp	 eax, -1			; ffffffffH
  00194	74 15		 je	 SHORT $LN5@unz64local@6
  00196	85 db		 test	 ebx, ebx
  00198	75 11		 jne	 SHORT $LN5@unz64local@6
  0019a	48 3b 87 d0 00
	00 00		 cmp	 rax, QWORD PTR [rdi+208]
  001a1	74 08		 je	 SHORT $LN5@unz64local@6
  001a3	40 f6 c5 08	 test	 bpl, 8
  001a7	41 0f 44 df	 cmove	 ebx, r15d
$LN5@unz64local@6:

; 1448 :         err=UNZ_BADZIPFILE;
; 1449 : 
; 1450 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&size_filename) != UNZ_OK)

  001ab	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  001af	4c 8d 44 24 60	 lea	 r8, QWORD PTR size_filename$[rsp]
  001b4	48 8b cf	 mov	 rcx, rdi
  001b7	e8 00 00 00 00	 call	 unz64local_getShort
  001bc	8b 6c 24 60	 mov	 ebp, DWORD PTR size_filename$[rsp]
  001c0	85 c0		 test	 eax, eax
  001c2	74 04		 je	 SHORT $LN4@unz64local@6

; 1451 :         err=UNZ_ERRNO;

  001c4	8b de		 mov	 ebx, esi
  001c6	eb 0e		 jmp	 SHORT $LN2@unz64local@6
$LN4@unz64local@6:

; 1452 :     else if ((err==UNZ_OK) && (size_filename!=s->cur_file_info.size_filename))

  001c8	85 db		 test	 ebx, ebx
  001ca	75 0a		 jne	 SHORT $LN2@unz64local@6
  001cc	3b af d8 00 00
	00		 cmp	 ebp, DWORD PTR [rdi+216]
  001d2	41 0f 45 df	 cmovne	 ebx, r15d
$LN2@unz64local@6:

; 1453 :         err=UNZ_BADZIPFILE;
; 1454 : 
; 1455 :     *piSizeVar += (uInt)size_filename;
; 1456 : 
; 1457 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&size_extra_field) != UNZ_OK)

  001d6	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  001da	41 01 2c 24	 add	 DWORD PTR [r12], ebp
  001de	4c 8d 44 24 60	 lea	 r8, QWORD PTR size_extra_field$[rsp]
  001e3	48 8b cf	 mov	 rcx, rdi
  001e6	e8 00 00 00 00	 call	 unz64local_getShort

; 1458 :         err=UNZ_ERRNO;
; 1459 :     *poffset_local_extrafield= s->cur_file_info_internal.offset_curfile +
; 1460 :                                     SIZEZIPLOCALHEADER + size_filename;

  001eb	48 8b 8f 08 01
	00 00		 mov	 rcx, QWORD PTR [rdi+264]
  001f2	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]
  001f7	48 8d 54 0d 1e	 lea	 rdx, QWORD PTR [rbp+rcx+30]

; 1461 :     *psize_local_extrafield = (uInt)size_extra_field;

  001fc	8b 4c 24 60	 mov	 ecx, DWORD PTR size_extra_field$[rsp]
  00200	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]
  00205	85 c0		 test	 eax, eax
  00207	41 89 4d 00	 mov	 DWORD PTR [r13], ecx
  0020b	49 89 16	 mov	 QWORD PTR [r14], rdx
  0020e	0f 45 de	 cmovne	 ebx, esi

; 1462 : 
; 1463 :     *piSizeVar += (uInt)size_extra_field;

  00211	41 01 0c 24	 add	 DWORD PTR [r12], ecx

; 1464 : 
; 1465 :     return err;

  00215	8b c3		 mov	 eax, ebx

; 1466 : }

  00217	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0021b	41 5e		 pop	 r14
  0021d	41 5d		 pop	 r13
  0021f	41 5c		 pop	 r12
  00221	5f		 pop	 rdi
  00222	5e		 pop	 rsi
  00223	5b		 pop	 rbx
  00224	c3		 ret	 0
unz64local_CheckCurrentFileCoherencyHeader ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_GetCurrentFileInfoInternal DD imagerel unz64local_GetCurrentFileInfoInternal
	DD	imagerel unz64local_GetCurrentFileInfoInternal+1325
	DD	imagerel $unwind$unz64local_GetCurrentFileInfoInternal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_GetCurrentFileInfoInternal DD 0d7101H
	DD	015d471H
	DD	0167469H
	DD	017345aH
	DD	0180123H
	DD	0e015f017H
	DD	06011c013H
	DD	05010H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unz64local_GetCurrentFileInfoInternal
_TEXT	SEGMENT
headerId$83364 = 32
dataSize$83365 = 36
file_info$ = 48
file_info_internal$ = 144
uL$83369 = 152
uSizeRead$1$ = 240
uSizeRead$1$ = 240
lSeek$1$ = 240
uL$ = 240
uMagic$ = 240
file$ = 240
pfile_info$ = 248
pfile_info_internal$ = 256
szFileName$ = 264
fileNameBufferSize$ = 272
extraField$ = 280
extraFieldBufferSize$ = 288
szComment$ = 296
commentBufferSize$ = 304
unz64local_GetCurrentFileInfoInternal PROC		; COMDAT

; 889  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	41 54		 push	 r12
  00013	41 56		 push	 r14
  00015	41 57		 push	 r15
  00017	48 8d 6c 24 f1	 lea	 rbp, QWORD PTR [rsp-15]
  0001c	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H

; 890  :     unz64_s* s;
; 891  :     unz_file_info64 file_info;
; 892  :     unz_file_info64_internal file_info_internal;
; 893  :     int err=UNZ_OK;

  00023	45 33 f6	 xor	 r14d, r14d
  00026	4d 8b e1	 mov	 r12, r9
  00029	4c 8b fa	 mov	 r15, rdx
  0002c	48 8b f1	 mov	 rsi, rcx

; 894  :     uLong uMagic;
; 895  :     long lSeek=0;
; 896  :     uLong uL;
; 897  : 
; 898  :     if (file==NULL)

  0002f	48 85 c9	 test	 rcx, rcx
  00032	75 13		 jne	 SHORT $LN65@unz64local@7

; 899  :         return UNZ_PARAMERROR;

  00034	8d 41 9a	 lea	 eax, QWORD PTR [rcx-102]

; 1115 : }

  00037	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0003e	41 5f		 pop	 r15
  00040	41 5e		 pop	 r14
  00042	41 5c		 pop	 r12
  00044	5e		 pop	 rsi
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
$LN65@unz64local@7:

; 900  :     s=(unz64_s*)file;
; 901  :     if (ZSEEK64(s->z_filefunc, s->filestream,
; 902  :               s->pos_in_central_dir+s->byte_before_the_zipfile,
; 903  :               ZLIB_FILEFUNC_SEEK_SET)!=0)

  00047	4c 8b 81 88 00
	00 00		 mov	 r8, QWORD PTR [rcx+136]
  0004e	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00052	48 89 9c 24 b8
	00 00 00	 mov	 QWORD PTR [rsp+184], rbx
  0005a	4c 03 41 78	 add	 r8, QWORD PTR [rcx+120]
  0005e	45 33 c9	 xor	 r9d, r9d
  00061	48 89 bc 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], rdi
  00069	4c 89 ac 24 a8
	00 00 00	 mov	 QWORD PTR [rsp+168], r13
  00071	e8 00 00 00 00	 call	 call_zseek64
  00076	83 cb ff	 or	 ebx, -1
  00079	85 c0		 test	 eax, eax
  0007b	74 04		 je	 SHORT $LN70@unz64local@7

; 904  :         err=UNZ_ERRNO;

  0007d	8b fb		 mov	 edi, ebx

; 905  : 
; 906  : 
; 907  :     /* we check the magic */
; 908  :     if (err==UNZ_OK)

  0007f	eb 2a		 jmp	 SHORT $LN60@unz64local@7
$LN70@unz64local@7:

; 909  :     {
; 910  :         if (unz64local_getLong(&s->z_filefunc, s->filestream,&uMagic) != UNZ_OK)

  00081	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00085	4c 8d 45 3f	 lea	 r8, QWORD PTR uMagic$[rbp-177]
  00089	48 8b ce	 mov	 rcx, rsi
  0008c	e8 00 00 00 00	 call	 unz64local_getLong
  00091	85 c0		 test	 eax, eax
  00093	74 04		 je	 SHORT $LN62@unz64local@7

; 911  :             err=UNZ_ERRNO;

  00095	8b fb		 mov	 edi, ebx
  00097	eb 12		 jmp	 SHORT $LN60@unz64local@7
$LN62@unz64local@7:

; 912  :         else if (uMagic!=0x02014b50)

  00099	81 7d 3f 50 4b
	01 02		 cmp	 DWORD PTR uMagic$[rbp-177], 33639248 ; 02014b50H
  000a0	41 8b fe	 mov	 edi, r14d
  000a3	b8 99 ff ff ff	 mov	 eax, -103		; ffffffffffffff99H
  000a8	0f 45 f8	 cmovne	 edi, eax
$LN60@unz64local@7:

; 913  :             err=UNZ_BADZIPFILE;
; 914  :     }
; 915  : 
; 916  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.version) != UNZ_OK)

  000ab	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  000af	4c 8d 44 24 30	 lea	 r8, QWORD PTR file_info$[rsp]
  000b4	48 8b ce	 mov	 rcx, rsi
  000b7	e8 00 00 00 00	 call	 unz64local_getShort

; 917  :         err=UNZ_ERRNO;
; 918  : 
; 919  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.version_needed) != UNZ_OK)

  000bc	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  000c0	4c 8d 45 83	 lea	 r8, QWORD PTR file_info$[rbp-173]
  000c4	85 c0		 test	 eax, eax
  000c6	48 8b ce	 mov	 rcx, rsi
  000c9	0f 45 fb	 cmovne	 edi, ebx
  000cc	e8 00 00 00 00	 call	 unz64local_getShort

; 920  :         err=UNZ_ERRNO;
; 921  : 
; 922  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.flag) != UNZ_OK)

  000d1	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  000d5	85 c0		 test	 eax, eax
  000d7	4c 8d 45 87	 lea	 r8, QWORD PTR file_info$[rbp-169]
  000db	48 8b ce	 mov	 rcx, rsi
  000de	0f 45 fb	 cmovne	 edi, ebx
  000e1	e8 00 00 00 00	 call	 unz64local_getShort

; 923  :         err=UNZ_ERRNO;
; 924  : 
; 925  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.compression_method) != UNZ_OK)

  000e6	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  000ea	85 c0		 test	 eax, eax
  000ec	4c 8d 45 8b	 lea	 r8, QWORD PTR file_info$[rbp-165]
  000f0	48 8b ce	 mov	 rcx, rsi
  000f3	0f 45 fb	 cmovne	 edi, ebx
  000f6	e8 00 00 00 00	 call	 unz64local_getShort

; 926  :         err=UNZ_ERRNO;
; 927  : 
; 928  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&file_info.dosDate) != UNZ_OK)

  000fb	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  000ff	85 c0		 test	 eax, eax
  00101	4c 8d 45 8f	 lea	 r8, QWORD PTR file_info$[rbp-161]
  00105	48 8b ce	 mov	 rcx, rsi
  00108	0f 45 fb	 cmovne	 edi, ebx
  0010b	e8 00 00 00 00	 call	 unz64local_getLong

; 929  :         err=UNZ_ERRNO;
; 930  : 
; 931  :     unz64local_DosDateToTmuDate(file_info.dosDate,&file_info.tmu_date);

  00110	8b 4d 8f	 mov	 ecx, DWORD PTR file_info$[rbp-161]
  00113	85 c0		 test	 eax, eax
  00115	48 8d 55 bf	 lea	 rdx, QWORD PTR file_info$[rbp-113]
  00119	0f 45 fb	 cmovne	 edi, ebx
  0011c	e8 00 00 00 00	 call	 unz64local_DosDateToTmuDate

; 932  : 
; 933  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&file_info.crc) != UNZ_OK)

  00121	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00125	4c 8d 45 93	 lea	 r8, QWORD PTR file_info$[rbp-157]
  00129	48 8b ce	 mov	 rcx, rsi
  0012c	e8 00 00 00 00	 call	 unz64local_getLong

; 934  :         err=UNZ_ERRNO;
; 935  : 
; 936  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  00131	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00135	4c 8d 45 3f	 lea	 r8, QWORD PTR uL$[rbp-177]
  00139	85 c0		 test	 eax, eax
  0013b	48 8b ce	 mov	 rcx, rsi
  0013e	0f 45 fb	 cmovne	 edi, ebx
  00141	e8 00 00 00 00	 call	 unz64local_getLong

; 937  :         err=UNZ_ERRNO;
; 938  :     file_info.compressed_size = uL;
; 939  : 
; 940  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  00146	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  0014a	85 c0		 test	 eax, eax
  0014c	8b 45 3f	 mov	 eax, DWORD PTR uL$[rbp-177]
  0014f	4c 8d 45 3f	 lea	 r8, QWORD PTR uL$[rbp-177]
  00153	48 8b ce	 mov	 rcx, rsi
  00156	0f 45 fb	 cmovne	 edi, ebx
  00159	48 89 45 97	 mov	 QWORD PTR file_info$[rbp-153], rax
  0015d	e8 00 00 00 00	 call	 unz64local_getLong

; 941  :         err=UNZ_ERRNO;
; 942  :     file_info.uncompressed_size = uL;
; 943  : 
; 944  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.size_filename) != UNZ_OK)

  00162	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00166	4c 8d 45 a7	 lea	 r8, QWORD PTR file_info$[rbp-137]
  0016a	85 c0		 test	 eax, eax
  0016c	8b 45 3f	 mov	 eax, DWORD PTR uL$[rbp-177]
  0016f	48 8b ce	 mov	 rcx, rsi
  00172	48 89 45 9f	 mov	 QWORD PTR file_info$[rbp-145], rax
  00176	0f 45 fb	 cmovne	 edi, ebx
  00179	e8 00 00 00 00	 call	 unz64local_getShort

; 945  :         err=UNZ_ERRNO;
; 946  : 
; 947  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.size_file_extra) != UNZ_OK)

  0017e	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00182	85 c0		 test	 eax, eax
  00184	4c 8d 45 ab	 lea	 r8, QWORD PTR file_info$[rbp-133]
  00188	48 8b ce	 mov	 rcx, rsi
  0018b	0f 45 fb	 cmovne	 edi, ebx
  0018e	e8 00 00 00 00	 call	 unz64local_getShort

; 948  :         err=UNZ_ERRNO;
; 949  : 
; 950  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.size_file_comment) != UNZ_OK)

  00193	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00197	4c 8d 45 af	 lea	 r8, QWORD PTR file_info$[rbp-129]
  0019b	85 c0		 test	 eax, eax
  0019d	48 8b ce	 mov	 rcx, rsi
  001a0	0f 45 fb	 cmovne	 edi, ebx
  001a3	e8 00 00 00 00	 call	 unz64local_getShort

; 951  :         err=UNZ_ERRNO;
; 952  : 
; 953  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.disk_num_start) != UNZ_OK)

  001a8	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  001ac	85 c0		 test	 eax, eax
  001ae	4c 8d 45 b3	 lea	 r8, QWORD PTR file_info$[rbp-125]
  001b2	48 8b ce	 mov	 rcx, rsi
  001b5	0f 45 fb	 cmovne	 edi, ebx
  001b8	e8 00 00 00 00	 call	 unz64local_getShort

; 954  :         err=UNZ_ERRNO;
; 955  : 
; 956  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.internal_fa) != UNZ_OK)

  001bd	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  001c1	85 c0		 test	 eax, eax
  001c3	4c 8d 45 b7	 lea	 r8, QWORD PTR file_info$[rbp-121]
  001c7	0f 45 fb	 cmovne	 edi, ebx
  001ca	48 8b ce	 mov	 rcx, rsi
  001cd	e8 00 00 00 00	 call	 unz64local_getShort

; 957  :         err=UNZ_ERRNO;
; 958  : 
; 959  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&file_info.external_fa) != UNZ_OK)

  001d2	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  001d6	4c 8d 45 bb	 lea	 r8, QWORD PTR file_info$[rbp-117]
  001da	85 c0		 test	 eax, eax
  001dc	48 8b ce	 mov	 rcx, rsi
  001df	0f 45 fb	 cmovne	 edi, ebx
  001e2	e8 00 00 00 00	 call	 unz64local_getLong

; 960  :         err=UNZ_ERRNO;
; 961  : 
; 962  :                 // relative offset of local header
; 963  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  001e7	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  001eb	85 c0		 test	 eax, eax
  001ed	4c 8d 45 3f	 lea	 r8, QWORD PTR uL$[rbp-177]
  001f1	48 8b ce	 mov	 rcx, rsi
  001f4	0f 45 fb	 cmovne	 edi, ebx
  001f7	e8 00 00 00 00	 call	 unz64local_getLong

; 964  :         err=UNZ_ERRNO;
; 965  :     file_info_internal.offset_curfile = uL;
; 966  : 
; 967  :     lSeek+=file_info.size_filename;

  001fc	44 8b 6d a7	 mov	 r13d, DWORD PTR file_info$[rbp-137]
  00200	85 c0		 test	 eax, eax
  00202	0f 45 fb	 cmovne	 edi, ebx
  00205	8b 5d 3f	 mov	 ebx, DWORD PTR uL$[rbp-177]
  00208	48 89 5d df	 mov	 QWORD PTR file_info_internal$[rbp-177], rbx

; 968  :     if ((err==UNZ_OK) && (szFileName!=NULL))

  0020c	85 ff		 test	 edi, edi
  0020e	0f 85 c6 00 00
	00		 jne	 $LN39@unz64local@7
  00214	4d 85 e4	 test	 r12, r12
  00217	74 42		 je	 SHORT $LN71@unz64local@7

; 969  :     {
; 970  :         uLong uSizeRead ;
; 971  :         if (file_info.size_filename<fileNameBufferSize)

  00219	8b 4d 5f	 mov	 ecx, DWORD PTR fileNameBufferSize$[rbp-177]
  0021c	44 3b e9	 cmp	 r13d, ecx
  0021f	73 0a		 jae	 SHORT $LN43@unz64local@7

; 972  :         {
; 973  :             *(szFileName+file_info.size_filename)='\0';

  00221	47 88 74 25 00	 mov	 BYTE PTR [r13+r12], r14b

; 974  :             uSizeRead = file_info.size_filename;

  00226	45 8b e5	 mov	 r12d, r13d

; 975  :         }
; 976  :         else

  00229	eb 03		 jmp	 SHORT $LN42@unz64local@7
$LN43@unz64local@7:

; 977  :             uSizeRead = fileNameBufferSize;

  0022b	44 8b e1	 mov	 r12d, ecx
$LN42@unz64local@7:

; 978  : 
; 979  :         if ((file_info.size_filename>0) && (fileNameBufferSize>0))

  0022e	45 85 ed	 test	 r13d, r13d
  00231	74 21		 je	 SHORT $LN40@unz64local@7
  00233	85 c9		 test	 ecx, ecx
  00235	74 1d		 je	 SHORT $LN40@unz64local@7

; 980  :             if (ZREAD64(s->z_filefunc, s->filestream,szFileName,uSizeRead)!=uSizeRead)

  00237	4c 8b 45 57	 mov	 r8, QWORD PTR szFileName$[rbp-177]
  0023b	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  0023f	48 8b 4e 38	 mov	 rcx, QWORD PTR [rsi+56]
  00243	45 8b cc	 mov	 r9d, r12d
  00246	ff 56 08	 call	 QWORD PTR [rsi+8]
  00249	41 3b c4	 cmp	 eax, r12d
  0024c	b8 ff ff ff ff	 mov	 eax, -1
  00251	0f 45 f8	 cmovne	 edi, eax
$LN40@unz64local@7:

; 981  :                 err=UNZ_ERRNO;
; 982  :         lSeek -= uSizeRead;

  00254	45 2b ec	 sub	 r13d, r12d

; 983  :     }
; 984  : 
; 985  :     // Read extrafield
; 986  :     if ((err==UNZ_OK) && (extraField!=NULL))

  00257	85 ff		 test	 edi, edi
  00259	75 7f		 jne	 SHORT $LN39@unz64local@7
$LN71@unz64local@7:
  0025b	48 8b 55 67	 mov	 rdx, QWORD PTR extraField$[rbp-177]
  0025f	48 85 d2	 test	 rdx, rdx
  00262	74 76		 je	 SHORT $LN39@unz64local@7

; 987  :     {
; 988  :         ZPOS64_T uSizeRead ;
; 989  :         if (file_info.size_file_extra<extraFieldBufferSize)

  00264	44 8b 65 ab	 mov	 r12d, DWORD PTR file_info$[rbp-133]
  00268	8b 4d 6f	 mov	 ecx, DWORD PTR extraFieldBufferSize$[rbp-177]

; 990  :             uSizeRead = file_info.size_file_extra;

  0026b	4c 89 65 3f	 mov	 QWORD PTR uSizeRead$1$[rbp-177], r12
  0026f	44 3b e1	 cmp	 r12d, ecx
  00272	72 04		 jb	 SHORT $LN37@unz64local@7

; 991  :         else
; 992  :             uSizeRead = extraFieldBufferSize;

  00274	48 89 4d 3f	 mov	 QWORD PTR uSizeRead$1$[rbp-177], rcx
$LN37@unz64local@7:

; 993  : 
; 994  :         if (lSeek!=0)

  00278	45 85 ed	 test	 r13d, r13d
  0027b	74 28		 je	 SHORT $LN34@unz64local@7

; 995  :         {
; 996  :             if (ZSEEK64(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  0027d	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00281	4d 63 c5	 movsxd	 r8, r13d
  00284	41 b9 01 00 00
	00		 mov	 r9d, 1
  0028a	48 8b ce	 mov	 rcx, rsi
  0028d	e8 00 00 00 00	 call	 call_zseek64

; 998  :             else

  00292	8b 4d 6f	 mov	 ecx, DWORD PTR extraFieldBufferSize$[rbp-177]
  00295	48 8b 55 67	 mov	 rdx, QWORD PTR extraField$[rbp-177]
  00299	85 c0		 test	 eax, eax
  0029b	75 05		 jne	 SHORT $LN35@unz64local@7

; 997  :                 lSeek=0;

  0029d	45 8b ee	 mov	 r13d, r14d

; 998  :             else

  002a0	eb 03		 jmp	 SHORT $LN34@unz64local@7
$LN35@unz64local@7:

; 999  :                 err=UNZ_ERRNO;

  002a2	83 cf ff	 or	 edi, -1
$LN34@unz64local@7:

; 1000 :         }
; 1001 : 
; 1002 :         if ((file_info.size_file_extra>0) && (extraFieldBufferSize>0))

  002a5	45 85 e4	 test	 r12d, r12d
  002a8	74 25		 je	 SHORT $LN32@unz64local@7
  002aa	85 c9		 test	 ecx, ecx
  002ac	74 21		 je	 SHORT $LN32@unz64local@7

; 1003 :             if (ZREAD64(s->z_filefunc, s->filestream,extraField,(uLong)uSizeRead)!=uSizeRead)

  002ae	44 8b 4d 3f	 mov	 r9d, DWORD PTR uSizeRead$1$[rbp-177]
  002b2	48 8b 4e 38	 mov	 rcx, QWORD PTR [rsi+56]
  002b6	4c 8b c2	 mov	 r8, rdx
  002b9	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  002bd	ff 56 08	 call	 QWORD PTR [rsi+8]
  002c0	44 8b d8	 mov	 r11d, eax
  002c3	b8 ff ff ff ff	 mov	 eax, -1
  002c8	4c 3b 5d 3f	 cmp	 r11, QWORD PTR uSizeRead$1$[rbp-177]
  002cc	0f 45 f8	 cmovne	 edi, eax
$LN32@unz64local@7:

; 1004 :                 err=UNZ_ERRNO;
; 1005 : 
; 1006 :         lSeek += file_info.size_file_extra - (uLong)uSizeRead;

  002cf	41 8b c4	 mov	 eax, r12d
  002d2	2b 45 3f	 sub	 eax, DWORD PTR uSizeRead$1$[rbp-177]
  002d5	44 03 e8	 add	 r13d, eax

; 1007 :     }
; 1008 :     else

  002d8	eb 07		 jmp	 SHORT $LN31@unz64local@7
$LN39@unz64local@7:

; 1009 :         lSeek += file_info.size_file_extra;

  002da	44 8b 65 ab	 mov	 r12d, DWORD PTR file_info$[rbp-133]
  002de	45 03 ec	 add	 r13d, r12d
$LN31@unz64local@7:

; 1010 : 
; 1011 : 
; 1012 :     if ((err==UNZ_OK) && (file_info.size_file_extra != 0))

  002e1	85 ff		 test	 edi, edi
  002e3	0f 85 1a 02 00
	00		 jne	 $LN1@unz64local@7
  002e9	45 85 e4	 test	 r12d, r12d
  002ec	0f 84 46 01 00
	00		 je	 $LN72@unz64local@7

; 1013 :     {
; 1014 :                                 uLong acc = 0;
; 1015 : 
; 1016 :         // since lSeek now points to after the extra field we need to move back
; 1017 :         lSeek -= file_info.size_file_extra;

  002f2	45 2b ec	 sub	 r13d, r12d
  002f5	44 89 6d 3f	 mov	 DWORD PTR lSeek$1$[rbp-177], r13d

; 1018 : 
; 1019 :         if (lSeek!=0)

  002f9	74 23		 je	 SHORT $LN68@unz64local@7

; 1020 :         {
; 1021 :             if (ZSEEK64(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  002fb	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  002ff	44 8d 4f 01	 lea	 r9d, QWORD PTR [rdi+1]
  00303	4d 63 c5	 movsxd	 r8, r13d
  00306	48 8b ce	 mov	 rcx, rsi
  00309	e8 00 00 00 00	 call	 call_zseek64
  0030e	85 c0		 test	 eax, eax
  00310	75 09		 jne	 SHORT $LN28@unz64local@7

; 1022 :                 lSeek=0;

  00312	45 8b ee	 mov	 r13d, r14d
  00315	44 89 75 3f	 mov	 DWORD PTR lSeek$1$[rbp-177], r14d

; 1023 :             else

  00319	eb 03		 jmp	 SHORT $LN68@unz64local@7
$LN28@unz64local@7:

; 1024 :                 err=UNZ_ERRNO;

  0031b	83 cf ff	 or	 edi, -1
$LN68@unz64local@7:

; 1025 :         }
; 1026 : 
; 1027 :         while(acc < file_info.size_file_extra)

  0031e	45 85 e4	 test	 r12d, r12d
  00321	0f 84 09 01 00
	00		 je	 $LN25@unz64local@7
  00327	41 83 cd ff	 or	 r13d, -1
  0032b	0f 1f 44 00 00	 npad	 5
$LL26@unz64local@7:

; 1028 :         {
; 1029 :             uLong headerId;
; 1030 :                                                 uLong dataSize;
; 1031 : 
; 1032 :             if (unz64local_getShort(&s->z_filefunc, s->filestream,&headerId) != UNZ_OK)

  00330	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00334	4c 8d 44 24 20	 lea	 r8, QWORD PTR headerId$83364[rsp]
  00339	48 8b ce	 mov	 rcx, rsi
  0033c	e8 00 00 00 00	 call	 unz64local_getShort

; 1033 :                 err=UNZ_ERRNO;
; 1034 : 
; 1035 :             if (unz64local_getShort(&s->z_filefunc, s->filestream,&dataSize) != UNZ_OK)

  00341	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00345	4c 8d 44 24 24	 lea	 r8, QWORD PTR dataSize$83365[rsp]
  0034a	85 c0		 test	 eax, eax
  0034c	48 8b ce	 mov	 rcx, rsi
  0034f	41 0f 45 fd	 cmovne	 edi, r13d
  00353	e8 00 00 00 00	 call	 unz64local_getShort

; 1036 :                 err=UNZ_ERRNO;
; 1037 : 
; 1038 :             /* ZIP64 extra fields */
; 1039 :             if (headerId == 0x0001)

  00358	44 8b 7c 24 24	 mov	 r15d, DWORD PTR dataSize$83365[rsp]
  0035d	85 c0		 test	 eax, eax
  0035f	41 0f 45 fd	 cmovne	 edi, r13d
  00363	83 7c 24 20 01	 cmp	 DWORD PTR headerId$83364[rsp], 1
  00368	0f 85 91 00 00
	00		 jne	 $LN22@unz64local@7

; 1040 :             {
; 1041 :                                                         uLong uL;
; 1042 : 
; 1043 :                                                                 if(file_info.uncompressed_size == MAXU32)

  0036e	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00373	48 39 45 9f	 cmp	 QWORD PTR file_info$[rbp-145], rax
  00377	75 1f		 jne	 SHORT $LN20@unz64local@7

; 1044 :                                                                 {
; 1045 :                                                                         if (unz64local_getLong64(&s->z_filefunc, s->filestream,&file_info.uncompressed_size) != UNZ_OK)

  00379	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  0037d	4c 8d 45 9f	 lea	 r8, QWORD PTR file_info$[rbp-145]
  00381	48 8b ce	 mov	 rcx, rsi
  00384	e8 00 00 00 00	 call	 unz64local_getLong64
  00389	44 8b 65 ab	 mov	 r12d, DWORD PTR file_info$[rbp-133]
  0038d	85 c0		 test	 eax, eax
  0038f	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00394	41 0f 45 fd	 cmovne	 edi, r13d
$LN20@unz64local@7:

; 1046 :                                                                                         err=UNZ_ERRNO;
; 1047 :                                                                 }
; 1048 : 
; 1049 :                                                                 if(file_info.compressed_size == MAXU32)

  00398	48 39 45 97	 cmp	 QWORD PTR file_info$[rbp-153], rax
  0039c	75 1f		 jne	 SHORT $LN18@unz64local@7

; 1050 :                                                                 {
; 1051 :                                                                         if (unz64local_getLong64(&s->z_filefunc, s->filestream,&file_info.compressed_size) != UNZ_OK)

  0039e	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  003a2	4c 8d 45 97	 lea	 r8, QWORD PTR file_info$[rbp-153]
  003a6	48 8b ce	 mov	 rcx, rsi
  003a9	e8 00 00 00 00	 call	 unz64local_getLong64
  003ae	44 8b 65 ab	 mov	 r12d, DWORD PTR file_info$[rbp-133]
  003b2	85 c0		 test	 eax, eax
  003b4	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  003b9	41 0f 45 fd	 cmovne	 edi, r13d
$LN18@unz64local@7:

; 1052 :                                                                                   err=UNZ_ERRNO;
; 1053 :                                                                 }
; 1054 : 
; 1055 :                                                                 if(file_info_internal.offset_curfile == MAXU32)

  003bd	48 3b d8	 cmp	 rbx, rax
  003c0	75 1f		 jne	 SHORT $LN16@unz64local@7

; 1056 :                                                                 {
; 1057 :                                                                         /* Relative Header offset */
; 1058 :                                                                         if (unz64local_getLong64(&s->z_filefunc, s->filestream,&file_info_internal.offset_curfile) != UNZ_OK)

  003c2	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  003c6	4c 8d 45 df	 lea	 r8, QWORD PTR file_info_internal$[rbp-177]
  003ca	48 8b ce	 mov	 rcx, rsi
  003cd	e8 00 00 00 00	 call	 unz64local_getLong64
  003d2	48 8b 5d df	 mov	 rbx, QWORD PTR file_info_internal$[rbp-177]
  003d6	85 c0		 test	 eax, eax
  003d8	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  003dd	41 0f 45 fd	 cmovne	 edi, r13d
$LN16@unz64local@7:

; 1059 :                                                                                 err=UNZ_ERRNO;
; 1060 :                                                                 }
; 1061 : 
; 1062 :                                                                 if(file_info.disk_num_start == MAXU32)

  003e1	39 45 b3	 cmp	 DWORD PTR file_info$[rbp-125], eax
  003e4	75 34		 jne	 SHORT $LN12@unz64local@7

; 1063 :                                                                 {
; 1064 :                                                                         /* Disk Start Number */
; 1065 :                                                                         if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  003e6	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  003ea	4c 8d 45 e7	 lea	 r8, QWORD PTR uL$83369[rbp-177]
  003ee	48 8b ce	 mov	 rcx, rsi
  003f1	e8 00 00 00 00	 call	 unz64local_getLong
  003f6	85 c0		 test	 eax, eax
  003f8	74 20		 je	 SHORT $LN12@unz64local@7

; 1066 :                                                                                 err=UNZ_ERRNO;

  003fa	41 8b fd	 mov	 edi, r13d

; 1067 :                                                                 }
; 1068 : 
; 1069 :             }
; 1070 :             else

  003fd	eb 1b		 jmp	 SHORT $LN12@unz64local@7
$LN22@unz64local@7:

; 1071 :             {
; 1072 :                 if (ZSEEK64(s->z_filefunc, s->filestream,dataSize,ZLIB_FILEFUNC_SEEK_CUR)!=0)

  003ff	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00403	4d 8b c7	 mov	 r8, r15
  00406	41 b9 01 00 00
	00		 mov	 r9d, 1
  0040c	48 8b ce	 mov	 rcx, rsi
  0040f	e8 00 00 00 00	 call	 call_zseek64
  00414	85 c0		 test	 eax, eax
  00416	41 0f 45 fd	 cmovne	 edi, r13d
$LN12@unz64local@7:

; 1073 :                     err=UNZ_ERRNO;
; 1074 :             }
; 1075 : 
; 1076 :             acc += 2 + 2 + dataSize;

  0041a	47 8d 74 3e 04	 lea	 r14d, DWORD PTR [r14+r15+4]
  0041f	45 3b f4	 cmp	 r14d, r12d
  00422	0f 82 08 ff ff
	ff		 jb	 $LL26@unz64local@7
  00428	44 8b 6d 3f	 mov	 r13d, DWORD PTR lSeek$1$[rbp-177]
  0042c	4c 8b 7d 47	 mov	 r15, QWORD PTR pfile_info$[rbp-177]
$LN25@unz64local@7:

; 1077 :         }
; 1078 :     }
; 1079 : 
; 1080 :     if ((err==UNZ_OK) && (szComment!=NULL))

  00430	85 ff		 test	 edi, edi
  00432	0f 85 cb 00 00
	00		 jne	 $LN1@unz64local@7
$LN72@unz64local@7:
  00438	48 8b 4d 77	 mov	 rcx, QWORD PTR szComment$[rbp-177]
  0043c	48 85 c9	 test	 rcx, rcx
  0043f	74 79		 je	 SHORT $LN73@unz64local@7

; 1081 :     {
; 1082 :         uLong uSizeRead ;
; 1083 :         if (file_info.size_file_comment<commentBufferSize)

  00441	44 8b 65 af	 mov	 r12d, DWORD PTR file_info$[rbp-129]
  00445	44 8b 75 7f	 mov	 r14d, DWORD PTR commentBufferSize$[rbp-177]
  00449	45 3b e6	 cmp	 r12d, r14d
  0044c	73 0b		 jae	 SHORT $LN10@unz64local@7

; 1084 :         {
; 1085 :             *(szComment+file_info.size_file_comment)='\0';

  0044e	41 c6 04 0c 00	 mov	 BYTE PTR [r12+rcx], 0

; 1086 :             uSizeRead = file_info.size_file_comment;

  00453	44 89 65 3f	 mov	 DWORD PTR uSizeRead$1$[rbp-177], r12d

; 1087 :         }
; 1088 :         else

  00457	eb 04		 jmp	 SHORT $LN9@unz64local@7
$LN10@unz64local@7:

; 1089 :             uSizeRead = commentBufferSize;

  00459	44 89 75 3f	 mov	 DWORD PTR uSizeRead$1$[rbp-177], r14d
$LN9@unz64local@7:

; 1090 : 
; 1091 :         if (lSeek!=0)

  0045d	45 85 ed	 test	 r13d, r13d
  00460	74 27		 je	 SHORT $LN75@unz64local@7

; 1092 :         {
; 1093 :             if (ZSEEK64(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  00462	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00466	4d 63 c5	 movsxd	 r8, r13d
  00469	41 b9 01 00 00
	00		 mov	 r9d, 1
  0046f	48 8b ce	 mov	 rcx, rsi
  00472	e8 00 00 00 00	 call	 call_zseek64
  00477	48 8b 4d 77	 mov	 rcx, QWORD PTR szComment$[rbp-177]
  0047b	41 bd ff ff ff
	ff		 mov	 r13d, -1
  00481	85 c0		 test	 eax, eax
  00483	41 0f 45 fd	 cmovne	 edi, r13d

; 1110 : 
; 1111 :     if ((err==UNZ_OK) && (pfile_info_internal!=NULL))

  00487	eb 04		 jmp	 SHORT $LN6@unz64local@7
$LN75@unz64local@7:
  00489	41 83 cd ff	 or	 r13d, -1
$LN6@unz64local@7:

; 1094 :                 lSeek=0;
; 1095 :             else
; 1096 :                 err=UNZ_ERRNO;
; 1097 :         }
; 1098 : 
; 1099 :         if ((file_info.size_file_comment>0) && (commentBufferSize>0))

  0048d	45 85 e4	 test	 r12d, r12d
  00490	74 24		 je	 SHORT $LN4@unz64local@7
  00492	45 85 f6	 test	 r14d, r14d
  00495	74 1f		 je	 SHORT $LN4@unz64local@7

; 1100 :             if (ZREAD64(s->z_filefunc, s->filestream,szComment,uSizeRead)!=uSizeRead)

  00497	44 8b 65 3f	 mov	 r12d, DWORD PTR uSizeRead$1$[rbp-177]
  0049b	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  0049f	4c 8b c1	 mov	 r8, rcx
  004a2	48 8b 4e 38	 mov	 rcx, QWORD PTR [rsi+56]
  004a6	45 8b cc	 mov	 r9d, r12d
  004a9	ff 56 08	 call	 QWORD PTR [rsi+8]
  004ac	41 3b c4	 cmp	 eax, r12d
  004af	74 05		 je	 SHORT $LN4@unz64local@7

; 1101 :                 err=UNZ_ERRNO;

  004b1	41 8b fd	 mov	 edi, r13d

; 1102 :         lSeek+=file_info.size_file_comment - uSizeRead;
; 1103 :     }
; 1104 :     else
; 1105 :         lSeek+=file_info.size_file_comment;
; 1106 : 
; 1107 : 
; 1108 :     if ((err==UNZ_OK) && (pfile_info!=NULL))

  004b4	eb 4d		 jmp	 SHORT $LN1@unz64local@7
$LN4@unz64local@7:
  004b6	85 ff		 test	 edi, edi
  004b8	75 49		 jne	 SHORT $LN1@unz64local@7
$LN73@unz64local@7:
  004ba	4d 85 ff	 test	 r15, r15
  004bd	74 38		 je	 SHORT $LN74@unz64local@7

; 1109 :         *pfile_info=file_info;

  004bf	0f 28 44 24 30	 movaps	 xmm0, XMMWORD PTR file_info$[rsp]
  004c4	0f 28 4d 8f	 movaps	 xmm1, XMMWORD PTR file_info$[rbp-161]
  004c8	41 0f 11 07	 movups	 XMMWORD PTR [r15], xmm0
  004cc	41 0f 11 4f 10	 movups	 XMMWORD PTR [r15+16], xmm1
  004d1	0f 28 45 9f	 movaps	 xmm0, XMMWORD PTR file_info$[rbp-145]
  004d5	0f 28 4d af	 movaps	 xmm1, XMMWORD PTR file_info$[rbp-129]
  004d9	41 0f 11 47 20	 movups	 XMMWORD PTR [r15+32], xmm0
  004de	41 0f 11 4f 30	 movups	 XMMWORD PTR [r15+48], xmm1
  004e3	f2 0f 10 4d cf	 movsdx	 xmm1, QWORD PTR file_info$[rbp-97]
  004e8	0f 28 45 bf	 movaps	 xmm0, XMMWORD PTR file_info$[rbp-113]
  004ec	41 0f 11 47 40	 movups	 XMMWORD PTR [r15+64], xmm0
  004f1	f2 41 0f 11 4f
	50		 movsdx	 QWORD PTR [r15+80], xmm1
$LN74@unz64local@7:

; 1110 : 
; 1111 :     if ((err==UNZ_OK) && (pfile_info_internal!=NULL))

  004f7	48 8b 45 4f	 mov	 rax, QWORD PTR pfile_info_internal$[rbp-177]
  004fb	48 85 c0	 test	 rax, rax
  004fe	74 03		 je	 SHORT $LN1@unz64local@7

; 1112 :         *pfile_info_internal=file_info_internal;

  00500	48 89 18	 mov	 QWORD PTR [rax], rbx
$LN1@unz64local@7:
  00503	4c 8b ac 24 a8
	00 00 00	 mov	 r13, QWORD PTR [rsp+168]
  0050b	48 8b 9c 24 b8
	00 00 00	 mov	 rbx, QWORD PTR [rsp+184]

; 1113 : 
; 1114 :     return err;

  00513	8b c7		 mov	 eax, edi
  00515	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR [rsp+176]

; 1115 : }

  0051d	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  00524	41 5f		 pop	 r15
  00526	41 5e		 pop	 r14
  00528	41 5c		 pop	 r12
  0052a	5e		 pop	 rsi
  0052b	5d		 pop	 rbp
  0052c	c3		 ret	 0
unz64local_GetCurrentFileInfoInternal ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_SearchCentralDir64 DD imagerel unz64local_SearchCentralDir64
	DD	imagerel unz64local_SearchCentralDir64+120
	DD	imagerel $unwind$unz64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$unz64local_SearchCentralDir64 DD imagerel unz64local_SearchCentralDir64+120
	DD	imagerel unz64local_SearchCentralDir64+328
	DD	imagerel $chain$2$unz64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$unz64local_SearchCentralDir64 DD imagerel unz64local_SearchCentralDir64+328
	DD	imagerel unz64local_SearchCentralDir64+534
	DD	imagerel $chain$3$unz64local_SearchCentralDir64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$unz64local_SearchCentralDir64 DD 021H
	DD	imagerel unz64local_SearchCentralDir64
	DD	imagerel unz64local_SearchCentralDir64+120
	DD	imagerel $unwind$unz64local_SearchCentralDir64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$unz64local_SearchCentralDir64 DD 020521H
	DD	04c405H
	DD	imagerel unz64local_SearchCentralDir64
	DD	imagerel unz64local_SearchCentralDir64+120
	DD	imagerel $unwind$unz64local_SearchCentralDir64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_SearchCentralDir64 DD 0a4d01H
	DD	05744dH
	DD	0c3448H
	DD	0f009520dH
	DD	0d005e007H
	DD	050026003H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unz64local_SearchCentralDir64
_TEXT	SEGMENT
pzlib_filefunc_def$ = 96
filestream$ = 104
uSizeFile$1$ = 112
uL$ = 112
relativeOffset$ = 120
unz64local_SearchCentralDir64 PROC			; COMDAT

; 480  : {

  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	41 55		 push	 r13
  00005	41 56		 push	 r14
  00007	41 57		 push	 r15
  00009	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 481  :     unsigned char* buf;
; 482  :     ZPOS64_T uSizeFile;
; 483  :     ZPOS64_T uBackRead;
; 484  :     ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */
; 485  :     ZPOS64_T uPosFound=0;

  0000d	33 f6		 xor	 esi, esi

; 486  :     uLong uL;
; 487  :                 ZPOS64_T relativeOffset;
; 488  : 
; 489  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  0000f	45 33 c0	 xor	 r8d, r8d
  00012	4c 8b f2	 mov	 r14, rdx
  00015	44 8d 4e 02	 lea	 r9d, QWORD PTR [rsi+2]
  00019	48 8b e9	 mov	 rbp, rcx
  0001c	41 bf ff ff 00
	00		 mov	 r15d, 65535		; 0000ffffH
  00022	44 8b ee	 mov	 r13d, esi
  00025	e8 00 00 00 00	 call	 call_zseek64
  0002a	85 c0		 test	 eax, eax
  0002c	74 0f		 je	 SHORT $LN25@unz64local@8

; 490  :         return 0;

  0002e	33 c0		 xor	 eax, eax

; 570  :         return 0;
; 571  : 
; 572  :     return relativeOffset;
; 573  : }

  00030	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00034	41 5f		 pop	 r15
  00036	41 5e		 pop	 r14
  00038	41 5d		 pop	 r13
  0003a	5e		 pop	 rsi
  0003b	5d		 pop	 rbp
  0003c	c3		 ret	 0
$LN25@unz64local@8:

; 491  : 
; 492  : 
; 493  :     uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  0003d	49 8b d6	 mov	 rdx, r14
  00040	48 8b cd	 mov	 rcx, rbp
  00043	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  00048	48 89 7c 24 28	 mov	 QWORD PTR [rsp+40], rdi
  0004d	e8 00 00 00 00	 call	 call_ztell64

; 494  : 
; 495  :     if (uMaxBack>uSizeFile)
; 496  :         uMaxBack = uSizeFile;
; 497  : 
; 498  :     buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00052	b9 04 04 00 00	 mov	 ecx, 1028		; 00000404H
  00057	49 3b c7	 cmp	 rax, r15
  0005a	48 8b f8	 mov	 rdi, rax
  0005d	48 89 44 24 70	 mov	 QWORD PTR uSizeFile$1$[rsp], rax
  00062	4c 0f 42 f8	 cmovb	 r15, rax
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0006c	48 8b d8	 mov	 rbx, rax

; 499  :     if (buf==NULL)

  0006f	48 85 c0	 test	 rax, rax

; 500  :         return 0;

  00072	0f 84 74 01 00
	00		 je	 $LN42@unz64local@8

; 501  : 
; 502  :     uBackRead = 4;

  00078	4c 89 64 24 20	 mov	 QWORD PTR [rsp+32], r12
  0007d	41 bc 04 00 00
	00		 mov	 r12d, 4

; 503  :     while (uBackRead<uMaxBack)

  00083	4d 3b e7	 cmp	 r12, r15
  00086	0f 83 a5 00 00
	00		 jae	 $LN33@unz64local@8
  0008c	0f 1f 40 00	 npad	 4
$LL22@unz64local@8:

; 504  :     {
; 505  :         uLong uReadSize;
; 506  :         ZPOS64_T uReadPos;
; 507  :         int i;
; 508  :         if (uBackRead+BUFREADCOMMENT>uMaxBack)

  00090	49 8d 84 24 00
	04 00 00	 lea	 rax, QWORD PTR [r12+1024]

; 509  :             uBackRead = uMaxBack;
; 510  :         else
; 511  :             uBackRead+=BUFREADCOMMENT;
; 512  :         uReadPos = uSizeFile-uBackRead ;

  00098	48 8b f7	 mov	 rsi, rdi
  0009b	49 3b c7	 cmp	 rax, r15
  0009e	4c 8b e0	 mov	 r12, rax

; 513  : 
; 514  :         uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?
; 515  :                      (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);

  000a1	48 8b c7	 mov	 rax, rdi
  000a4	4d 0f 47 e7	 cmova	 r12, r15
  000a8	49 2b f4	 sub	 rsi, r12
  000ab	48 2b c6	 sub	 rax, rsi
  000ae	48 3d 04 04 00
	00		 cmp	 rax, 1028		; 00000404H
  000b4	76 07		 jbe	 SHORT $LN28@unz64local@8
  000b6	bf 04 04 00 00	 mov	 edi, 1028		; 00000404H
  000bb	eb 02		 jmp	 SHORT $LN29@unz64local@8
$LN28@unz64local@8:
  000bd	2b fe		 sub	 edi, esi
$LN29@unz64local@8:

; 516  :         if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  000bf	45 33 c9	 xor	 r9d, r9d
  000c2	4c 8b c6	 mov	 r8, rsi
  000c5	49 8b d6	 mov	 rdx, r14
  000c8	48 8b cd	 mov	 rcx, rbp
  000cb	e8 00 00 00 00	 call	 call_zseek64
  000d0	85 c0		 test	 eax, eax
  000d2	75 5b		 jne	 SHORT $LN39@unz64local@8

; 517  :             break;
; 518  : 
; 519  :         if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  000d4	48 8b 4d 38	 mov	 rcx, QWORD PTR [rbp+56]
  000d8	44 8b cf	 mov	 r9d, edi
  000db	4c 8b c3	 mov	 r8, rbx
  000de	49 8b d6	 mov	 rdx, r14
  000e1	ff 55 08	 call	 QWORD PTR [rbp+8]
  000e4	3b c7		 cmp	 eax, edi
  000e6	75 47		 jne	 SHORT $LN39@unz64local@8

; 520  :             break;
; 521  : 
; 522  :         for (i=(int)uReadSize-3; (i--)>0;)

  000e8	8d 4f fd	 lea	 ecx, DWORD PTR [rdi-3]
  000eb	48 63 c1	 movsxd	 rax, ecx
  000ee	85 c9		 test	 ecx, ecx
  000f0	7e 2f		 jle	 SHORT $LN38@unz64local@8
$LL16@unz64local@8:
  000f2	48 ff c8	 dec	 rax
  000f5	ff c9		 dec	 ecx

; 523  :             if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 524  :                 ((*(buf+i+2))==0x06) && ((*(buf+i+3))==0x07))

  000f7	80 3c 18 50	 cmp	 BYTE PTR [rax+rbx], 80	; 00000050H
  000fb	75 15		 jne	 SHORT $LN14@unz64local@8
  000fd	80 7c 18 01 4b	 cmp	 BYTE PTR [rax+rbx+1], 75 ; 0000004bH
  00102	75 0e		 jne	 SHORT $LN14@unz64local@8
  00104	80 7c 18 02 06	 cmp	 BYTE PTR [rax+rbx+2], 6
  00109	75 07		 jne	 SHORT $LN14@unz64local@8
  0010b	80 7c 18 03 07	 cmp	 BYTE PTR [rax+rbx+3], 7
  00110	74 07		 je	 SHORT $LN32@unz64local@8
$LN14@unz64local@8:

; 520  :             break;
; 521  : 
; 522  :         for (i=(int)uReadSize-3; (i--)>0;)

  00112	48 85 c0	 test	 rax, rax
  00115	7f db		 jg	 SHORT $LL16@unz64local@8
  00117	eb 08		 jmp	 SHORT $LN38@unz64local@8
$LN32@unz64local@8:

; 525  :             {
; 526  :                 uPosFound = uReadPos+i;

  00119	4c 63 e9	 movsxd	 r13, ecx
  0011c	4c 03 ee	 add	 r13, rsi

; 527  :                 break;
; 528  :             }
; 529  : 
; 530  :         if (uPosFound!=0)

  0011f	75 0e		 jne	 SHORT $LN39@unz64local@8
$LN38@unz64local@8:

; 503  :     while (uBackRead<uMaxBack)

  00121	48 8b 7c 24 70	 mov	 rdi, QWORD PTR uSizeFile$1$[rsp]
  00126	4d 3b e7	 cmp	 r12, r15
  00129	0f 82 61 ff ff
	ff		 jb	 $LL22@unz64local@8
$LN39@unz64local@8:
  0012f	33 f6		 xor	 esi, esi
$LN33@unz64local@8:

; 531  :             break;
; 532  :     }
; 533  :     TRYFREE(buf);

  00131	48 8b cb	 mov	 rcx, rbx
  00134	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  0013a	4c 8b 64 24 20	 mov	 r12, QWORD PTR [rsp+32]

; 534  :     if (uPosFound == 0)

  0013f	4d 85 ed	 test	 r13, r13

; 535  :         return 0;

  00142	0f 84 a4 00 00
	00		 je	 $LN42@unz64local@8

; 536  : 
; 537  :     /* Zip64 end of central directory locator */
; 538  :     if (ZSEEK64(*pzlib_filefunc_def,filestream, uPosFound,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00148	45 33 c9	 xor	 r9d, r9d
  0014b	4d 8b c5	 mov	 r8, r13
  0014e	49 8b d6	 mov	 rdx, r14
  00151	48 8b cd	 mov	 rcx, rbp
  00154	e8 00 00 00 00	 call	 call_zseek64
  00159	85 c0		 test	 eax, eax

; 539  :         return 0;

  0015b	0f 85 8b 00 00
	00		 jne	 $LN42@unz64local@8

; 540  : 
; 541  :     /* the signature, already checked */
; 542  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  00161	4c 8d 44 24 70	 lea	 r8, QWORD PTR uL$[rsp]
  00166	49 8b d6	 mov	 rdx, r14
  00169	48 8b cd	 mov	 rcx, rbp
  0016c	e8 00 00 00 00	 call	 unz64local_getLong
  00171	85 c0		 test	 eax, eax

; 543  :         return 0;

  00173	75 77		 jne	 SHORT $LN42@unz64local@8

; 544  : 
; 545  :     /* number of the disk with the start of the zip64 end of  central directory */
; 546  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  00175	4c 8d 44 24 70	 lea	 r8, QWORD PTR uL$[rsp]
  0017a	49 8b d6	 mov	 rdx, r14
  0017d	48 8b cd	 mov	 rcx, rbp
  00180	e8 00 00 00 00	 call	 unz64local_getLong
  00185	85 c0		 test	 eax, eax

; 547  :         return 0;

  00187	75 63		 jne	 SHORT $LN42@unz64local@8

; 548  :     if (uL != 0)

  00189	39 44 24 70	 cmp	 DWORD PTR uL$[rsp], eax

; 549  :         return 0;

  0018d	75 5d		 jne	 SHORT $LN42@unz64local@8

; 550  : 
; 551  :     /* relative offset of the zip64 end of central directory record */
; 552  :     if (unz64local_getLong64(pzlib_filefunc_def,filestream,&relativeOffset)!=UNZ_OK)

  0018f	4c 8d 44 24 78	 lea	 r8, QWORD PTR relativeOffset$[rsp]
  00194	49 8b d6	 mov	 rdx, r14
  00197	48 8b cd	 mov	 rcx, rbp
  0019a	e8 00 00 00 00	 call	 unz64local_getLong64
  0019f	85 c0		 test	 eax, eax

; 553  :         return 0;

  001a1	75 49		 jne	 SHORT $LN42@unz64local@8

; 554  : 
; 555  :     /* total number of disks */
; 556  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  001a3	4c 8d 44 24 70	 lea	 r8, QWORD PTR uL$[rsp]
  001a8	49 8b d6	 mov	 rdx, r14
  001ab	48 8b cd	 mov	 rcx, rbp
  001ae	e8 00 00 00 00	 call	 unz64local_getLong
  001b3	85 c0		 test	 eax, eax

; 557  :         return 0;

  001b5	75 35		 jne	 SHORT $LN42@unz64local@8

; 558  :     if (uL != 1)

  001b7	83 7c 24 70 01	 cmp	 DWORD PTR uL$[rsp], 1

; 559  :         return 0;

  001bc	75 2e		 jne	 SHORT $LN42@unz64local@8

; 560  : 
; 561  :     /* Goto end of central directory record */
; 562  :     if (ZSEEK64(*pzlib_filefunc_def,filestream, relativeOffset,ZLIB_FILEFUNC_SEEK_SET)!=0)

  001be	48 8b 5c 24 78	 mov	 rbx, QWORD PTR relativeOffset$[rsp]
  001c3	45 33 c9	 xor	 r9d, r9d
  001c6	49 8b d6	 mov	 rdx, r14
  001c9	4c 8b c3	 mov	 r8, rbx
  001cc	48 8b cd	 mov	 rcx, rbp
  001cf	e8 00 00 00 00	 call	 call_zseek64
  001d4	85 c0		 test	 eax, eax

; 563  :         return 0;

  001d6	75 14		 jne	 SHORT $LN42@unz64local@8

; 564  : 
; 565  :      /* the signature */
; 566  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  001d8	4c 8d 44 24 70	 lea	 r8, QWORD PTR uL$[rsp]
  001dd	49 8b d6	 mov	 rdx, r14
  001e0	48 8b cd	 mov	 rcx, rbp
  001e3	e8 00 00 00 00	 call	 unz64local_getLong
  001e8	85 c0		 test	 eax, eax
  001ea	74 04		 je	 SHORT $LN2@unz64local@8
$LN42@unz64local@8:

; 567  :         return 0;

  001ec	33 c0		 xor	 eax, eax
  001ee	eb 0f		 jmp	 SHORT $LN41@unz64local@8
$LN2@unz64local@8:

; 568  : 
; 569  :     if (uL != 0x06064b50)

  001f0	81 7c 24 70 50
	4b 06 06	 cmp	 DWORD PTR uL$[rsp], 101075792 ; 06064b50H
  001f8	48 0f 45 de	 cmovne	 rbx, rsi
  001fc	48 8b c3	 mov	 rax, rbx
$LN41@unz64local@8:
  001ff	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00204	48 8b 7c 24 28	 mov	 rdi, QWORD PTR [rsp+40]

; 570  :         return 0;
; 571  : 
; 572  :     return relativeOffset;
; 573  : }

  00209	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0020d	41 5f		 pop	 r15
  0020f	41 5e		 pop	 r14
  00211	41 5d		 pop	 r13
  00213	5e		 pop	 rsi
  00214	5d		 pop	 rbp
  00215	c3		 ret	 0
unz64local_SearchCentralDir64 ENDP
PUBLIC	unzGoToFilePos64
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGoToFilePos64 DD imagerel $LN5
	DD	imagerel $LN5+22
	DD	imagerel $unwind$unzGoToFilePos64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$unzGoToFilePos64 DD imagerel $LN5+22
	DD	imagerel $LN5+114
	DD	imagerel $chain$0$unzGoToFilePos64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$unzGoToFilePos64 DD imagerel $LN5+114
	DD	imagerel $LN5+125
	DD	imagerel $chain$1$unzGoToFilePos64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$unzGoToFilePos64 DD 021H
	DD	imagerel $LN5
	DD	imagerel $LN5+22
	DD	imagerel $unwind$unzGoToFilePos64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$unzGoToFilePos64 DD 020521H
	DD	0c3405H
	DD	imagerel $LN5
	DD	imagerel $LN5+22
	DD	imagerel $unwind$unzGoToFilePos64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGoToFilePos64 DD 020601H
	DD	070029206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unzGoToFilePos64
_TEXT	SEGMENT
file$ = 96
file_pos$ = 104
unzGoToFilePos64 PROC					; COMDAT

; 1339 : {

$LN5:
  00000	40 57		 push	 rdi
  00002	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00006	48 8b f9	 mov	 rdi, rcx

; 1340 :     unz64_s* s;
; 1341 :     int err;
; 1342 : 
; 1343 :     if (file==NULL || file_pos==NULL)

  00009	48 85 c9	 test	 rcx, rcx
  0000c	74 64		 je	 SHORT $LN1@unzGoToFil
  0000e	48 85 d2	 test	 rdx, rdx
  00011	74 5f		 je	 SHORT $LN1@unzGoToFil

; 1345 :     s=(unz64_s*)file;
; 1346 : 
; 1347 :     /* jump to the right spot */
; 1348 :     s->pos_in_central_dir = file_pos->pos_in_zip_directory;

  00013	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00016	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx

; 1349 :     s->num_file           = file_pos->num_of_file;
; 1350 : 
; 1351 :     /* set the current file */
; 1352 :     err = unz64local_GetCurrentFileInfoInternal(file,&s->cur_file_info,
; 1353 :                                                &s->cur_file_info_internal,
; 1354 :                                                NULL,0,NULL,0,NULL,0);

  0001b	33 db		 xor	 ebx, ebx
  0001d	89 5c 24 40	 mov	 DWORD PTR [rsp+64], ebx
  00021	48 89 5c 24 38	 mov	 QWORD PTR [rsp+56], rbx
  00026	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax
  0002d	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  00031	89 5c 24 30	 mov	 DWORD PTR [rsp+48], ebx
  00035	4c 8d 81 08 01
	00 00		 lea	 r8, QWORD PTR [rcx+264]
  0003c	48 8d 91 b0 00
	00 00		 lea	 rdx, QWORD PTR [rcx+176]
  00043	45 33 c9	 xor	 r9d, r9d
  00046	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  0004b	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax
  00052	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  00056	e8 00 00 00 00	 call	 unz64local_GetCurrentFileInfoInternal

; 1355 :     /* return results */
; 1356 :     s->current_file_ok = (err == UNZ_OK);

  0005b	85 c0		 test	 eax, eax
  0005d	0f 94 c3	 sete	 bl
  00060	48 89 9f 90 00
	00 00		 mov	 QWORD PTR [rdi+144], rbx
  00067	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]

; 1357 :     return err;
; 1358 : }

  0006c	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00070	5f		 pop	 rdi
  00071	c3		 ret	 0
$LN1@unzGoToFil:

; 1344 :         return UNZ_PARAMERROR;

  00072	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 1357 :     return err;
; 1358 : }

  00077	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0007b	5f		 pop	 rdi
  0007c	c3		 ret	 0
unzGoToFilePos64 ENDP
_TEXT	ENDS
PUBLIC	unzGoToNextFile
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGoToNextFile DD imagerel $LN8
	DD	imagerel $LN8+185
	DD	imagerel $unwind$unzGoToNextFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGoToNextFile DD 046601H
	DD	0c3466H
	DD	070029206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unzGoToNextFile
_TEXT	SEGMENT
file$ = 96
unzGoToNextFile PROC					; COMDAT

; 1200 : {

$LN8:
  00000	40 57		 push	 rdi
  00002	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00006	48 8b f9	 mov	 rdi, rcx

; 1201 :     unz64_s* s;
; 1202 :     int err;
; 1203 : 
; 1204 :     if (file==NULL)

  00009	48 85 c9	 test	 rcx, rcx
  0000c	75 09		 jne	 SHORT $LN4@unzGoToNex

; 1205 :         return UNZ_PARAMERROR;

  0000e	8d 41 9a	 lea	 eax, QWORD PTR [rcx-102]

; 1220 :     return err;
; 1221 : }

  00011	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00015	5f		 pop	 rdi
  00016	c3		 ret	 0
$LN4@unzGoToNex:

; 1206 :     s=(unz64_s*)file;
; 1207 :     if (!s->current_file_ok)

  00017	48 83 b9 90 00
	00 00 00	 cmp	 QWORD PTR [rcx+144], 0
  0001f	75 0b		 jne	 SHORT $LN3@unzGoToNex
$LN7@unzGoToNex:

; 1208 :         return UNZ_END_OF_LIST_OF_FILE;

  00021	b8 9c ff ff ff	 mov	 eax, -100		; ffffffffffffff9cH

; 1220 :     return err;
; 1221 : }

  00026	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0002a	5f		 pop	 rdi
  0002b	c3		 ret	 0
$LN3@unzGoToNex:

; 1209 :     if (s->gi.number_entry != 0xffff)    /* 2^16 files overflow hack */

  0002c	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00030	48 81 f9 ff ff
	00 00		 cmp	 rcx, 65535		; 0000ffffH
  00037	74 0f		 je	 SHORT $LN1@unzGoToNex

; 1210 :       if (s->num_file+1==s->gi.number_entry)

  00039	48 8b 87 80 00
	00 00		 mov	 rax, QWORD PTR [rdi+128]
  00040	48 ff c0	 inc	 rax
  00043	48 3b c1	 cmp	 rax, rcx

; 1211 :         return UNZ_END_OF_LIST_OF_FILE;

  00046	74 d9		 je	 SHORT $LN7@unzGoToNex
$LN1@unzGoToNex:

; 1212 : 
; 1213 :     s->pos_in_central_dir += SIZECENTRALDIRITEM + s->cur_file_info.size_filename +
; 1214 :             s->cur_file_info.size_file_extra + s->cur_file_info.size_file_comment ;

  00048	8b 8f e0 00 00
	00		 mov	 ecx, DWORD PTR [rdi+224]
  0004e	8b 87 d8 00 00
	00		 mov	 eax, DWORD PTR [rdi+216]

; 1215 :     s->num_file++;

  00054	48 ff 87 80 00
	00 00		 inc	 QWORD PTR [rdi+128]
  0005b	03 8f dc 00 00
	00		 add	 ecx, DWORD PTR [rdi+220]
  00061	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx

; 1216 :     err = unz64local_GetCurrentFileInfoInternal(file,&s->cur_file_info,
; 1217 :                                                &s->cur_file_info_internal,
; 1218 :                                                NULL,0,NULL,0,NULL,0);

  00066	33 db		 xor	 ebx, ebx
  00068	89 5c 24 40	 mov	 DWORD PTR [rsp+64], ebx
  0006c	8d 44 01 2e	 lea	 eax, DWORD PTR [rcx+rax+46]
  00070	48 89 5c 24 38	 mov	 QWORD PTR [rsp+56], rbx
  00075	48 01 87 88 00
	00 00		 add	 QWORD PTR [rdi+136], rax
  0007c	89 5c 24 30	 mov	 DWORD PTR [rsp+48], ebx
  00080	4c 8d 87 08 01
	00 00		 lea	 r8, QWORD PTR [rdi+264]
  00087	48 8d 97 b0 00
	00 00		 lea	 rdx, QWORD PTR [rdi+176]
  0008e	45 33 c9	 xor	 r9d, r9d
  00091	48 8b cf	 mov	 rcx, rdi
  00094	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  00099	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  0009d	e8 00 00 00 00	 call	 unz64local_GetCurrentFileInfoInternal

; 1219 :     s->current_file_ok = (err == UNZ_OK);

  000a2	85 c0		 test	 eax, eax
  000a4	0f 94 c3	 sete	 bl
  000a7	48 89 9f 90 00
	00 00		 mov	 QWORD PTR [rdi+144], rbx
  000ae	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]

; 1220 :     return err;
; 1221 : }

  000b3	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000b7	5f		 pop	 rdi
  000b8	c3		 ret	 0
unzGoToNextFile ENDP
_TEXT	ENDS
PUBLIC	unzGoToFirstFile
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGoToFirstFile DD imagerel $LN4
	DD	imagerel $LN4+118
	DD	imagerel $unwind$unzGoToFirstFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGoToFirstFile DD 042301H
	DD	0c3423H
	DD	070029206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unzGoToFirstFile
_TEXT	SEGMENT
file$ = 96
unzGoToFirstFile PROC					; COMDAT

; 1179 : {

$LN4:
  00000	40 57		 push	 rdi
  00002	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00006	48 8b f9	 mov	 rdi, rcx

; 1180 :     int err=UNZ_OK;
; 1181 :     unz64_s* s;
; 1182 :     if (file==NULL)

  00009	48 85 c9	 test	 rcx, rcx
  0000c	75 09		 jne	 SHORT $LN1@unzGoToFir

; 1183 :         return UNZ_PARAMERROR;

  0000e	8d 41 9a	 lea	 eax, QWORD PTR [rcx-102]

; 1191 :     return err;
; 1192 : }

  00011	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00015	5f		 pop	 rdi
  00016	c3		 ret	 0
$LN1@unzGoToFir:

; 1184 :     s=(unz64_s*)file;
; 1185 :     s->pos_in_central_dir=s->offset_central_dir;

  00017	48 8b 81 a8 00
	00 00		 mov	 rax, QWORD PTR [rcx+168]
  0001e	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx

; 1186 :     s->num_file=0;

  00023	33 db		 xor	 ebx, ebx

; 1187 :     err=unz64local_GetCurrentFileInfoInternal(file,&s->cur_file_info,
; 1188 :                                              &s->cur_file_info_internal,
; 1189 :                                              NULL,0,NULL,0,NULL,0);

  00025	89 5c 24 40	 mov	 DWORD PTR [rsp+64], ebx
  00029	48 89 5c 24 38	 mov	 QWORD PTR [rsp+56], rbx
  0002e	89 5c 24 30	 mov	 DWORD PTR [rsp+48], ebx
  00032	4c 8d 81 08 01
	00 00		 lea	 r8, QWORD PTR [rcx+264]
  00039	48 8d 91 b0 00
	00 00		 lea	 rdx, QWORD PTR [rcx+176]
  00040	45 33 c9	 xor	 r9d, r9d
  00043	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  00048	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax
  0004f	48 89 99 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rbx
  00056	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  0005a	e8 00 00 00 00	 call	 unz64local_GetCurrentFileInfoInternal

; 1190 :     s->current_file_ok = (err == UNZ_OK);

  0005f	85 c0		 test	 eax, eax
  00061	0f 94 c3	 sete	 bl
  00064	48 89 9f 90 00
	00 00		 mov	 QWORD PTR [rdi+144], rbx
  0006b	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]

; 1191 :     return err;
; 1192 : }

  00070	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00074	5f		 pop	 rdi
  00075	c3		 ret	 0
unzGoToFirstFile ENDP
_TEXT	ENDS
PUBLIC	unzGetCurrentFileInfo
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetCurrentFileInfo DD imagerel $LN6
	DD	imagerel $LN6+248
	DD	imagerel $unwind$unzGetCurrentFileInfo
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetCurrentFileInfo DD 030901H
	DD	0160109H
	DD	03002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unzGetCurrentFileInfo
_TEXT	SEGMENT
file_info64$ = 80
file$ = 192
pfile_info$ = 200
szFileName$ = 208
fileNameBufferSize$ = 216
extraField$ = 224
extraFieldBufferSize$ = 232
szComment$ = 240
commentBufferSize$ = 248
unzGetCurrentFileInfo PROC				; COMDAT

; 1141 : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H

; 1142 :     int err;
; 1143 :     unz_file_info64 file_info64;
; 1144 :     err = unz64local_GetCurrentFileInfoInternal(file,&file_info64,NULL,
; 1145 :                                                 szFileName,fileNameBufferSize,
; 1146 :                                                 extraField,extraFieldBufferSize,
; 1147 :                                                 szComment,commentBufferSize);

  00009	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR commentBufferSize$[rsp]
  00010	48 8b da	 mov	 rbx, rdx
  00013	48 8d 54 24 50	 lea	 rdx, QWORD PTR file_info64$[rsp]
  00018	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  0001c	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR szComment$[rsp]
  00024	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00029	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR extraFieldBufferSize$[rsp]
  00030	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00034	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR extraField$[rsp]
  0003c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00041	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00046	4d 8b c8	 mov	 r9, r8
  00049	45 33 c0	 xor	 r8d, r8d
  0004c	e8 00 00 00 00	 call	 unz64local_GetCurrentFileInfoInternal
  00051	44 8b d8	 mov	 r11d, eax

; 1148 :     if ((err==UNZ_OK) && (pfile_info != NULL))

  00054	85 c0		 test	 eax, eax
  00056	0f 85 93 00 00
	00		 jne	 $LN1@unzGetCurr@2
  0005c	48 85 db	 test	 rbx, rbx
  0005f	0f 84 8a 00 00
	00		 je	 $LN1@unzGetCurr@2

; 1149 :     {
; 1150 :         pfile_info->version = file_info64.version;
; 1151 :         pfile_info->version_needed = file_info64.version_needed;
; 1152 :         pfile_info->flag = file_info64.flag;
; 1153 :         pfile_info->compression_method = file_info64.compression_method;
; 1154 :         pfile_info->dosDate = file_info64.dosDate;

  00065	8b 44 24 60	 mov	 eax, DWORD PTR file_info64$[rsp+16]
  00069	8b 4c 24 50	 mov	 ecx, DWORD PTR file_info64$[rsp]

; 1155 :         pfile_info->crc = file_info64.crc;
; 1156 : 
; 1157 :         pfile_info->size_filename = file_info64.size_filename;
; 1158 :         pfile_info->size_file_extra = file_info64.size_file_extra;
; 1159 :         pfile_info->size_file_comment = file_info64.size_file_comment;
; 1160 : 
; 1161 :         pfile_info->disk_num_start = file_info64.disk_num_start;
; 1162 :         pfile_info->internal_fa = file_info64.internal_fa;
; 1163 :         pfile_info->external_fa = file_info64.external_fa;
; 1164 : 
; 1165 :         pfile_info->tmu_date = file_info64.tmu_date,
; 1166 : 
; 1167 : 
; 1168 :         pfile_info->compressed_size = (uLong)file_info64.compressed_size;

  0006d	0f 28 84 24 90
	00 00 00	 movaps	 xmm0, XMMWORD PTR file_info64$[rsp+64]
  00075	f2 0f 10 8c 24
	a0 00 00 00	 movsdx	 xmm1, QWORD PTR file_info64$[rsp+80]
  0007e	89 43 10	 mov	 DWORD PTR [rbx+16], eax
  00081	8b 44 24 64	 mov	 eax, DWORD PTR file_info64$[rsp+20]
  00085	0f 11 43 38	 movups	 XMMWORD PTR [rbx+56], xmm0
  00089	f2 0f 11 4b 48	 movsdx	 QWORD PTR [rbx+72], xmm1
  0008e	89 43 14	 mov	 DWORD PTR [rbx+20], eax
  00091	8b 44 24 78	 mov	 eax, DWORD PTR file_info64$[rsp+40]
  00095	89 0b		 mov	 DWORD PTR [rbx], ecx
  00097	8b 4c 24 54	 mov	 ecx, DWORD PTR file_info64$[rsp+4]
  0009b	89 43 20	 mov	 DWORD PTR [rbx+32], eax
  0009e	8b 44 24 7c	 mov	 eax, DWORD PTR file_info64$[rsp+44]
  000a2	89 43 24	 mov	 DWORD PTR [rbx+36], eax
  000a5	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR file_info64$[rsp+48]
  000ac	89 4b 04	 mov	 DWORD PTR [rbx+4], ecx
  000af	8b 4c 24 58	 mov	 ecx, DWORD PTR file_info64$[rsp+8]
  000b3	89 43 28	 mov	 DWORD PTR [rbx+40], eax
  000b6	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR file_info64$[rsp+52]
  000bd	89 43 2c	 mov	 DWORD PTR [rbx+44], eax
  000c0	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR file_info64$[rsp+56]
  000c7	89 4b 08	 mov	 DWORD PTR [rbx+8], ecx
  000ca	8b 4c 24 5c	 mov	 ecx, DWORD PTR file_info64$[rsp+12]
  000ce	89 43 30	 mov	 DWORD PTR [rbx+48], eax
  000d1	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR file_info64$[rsp+60]
  000d8	89 43 34	 mov	 DWORD PTR [rbx+52], eax
  000db	8b 44 24 68	 mov	 eax, DWORD PTR file_info64$[rsp+24]
  000df	89 4b 0c	 mov	 DWORD PTR [rbx+12], ecx
  000e2	89 43 18	 mov	 DWORD PTR [rbx+24], eax

; 1169 :         pfile_info->uncompressed_size = (uLong)file_info64.uncompressed_size;

  000e5	8b 44 24 70	 mov	 eax, DWORD PTR file_info64$[rsp+32]
  000e9	89 43 1c	 mov	 DWORD PTR [rbx+28], eax

; 1170 : 
; 1171 :     }
; 1172 :     return err;

  000ec	41 8b c3	 mov	 eax, r11d
$LN1@unzGetCurr@2:

; 1173 : }

  000ef	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  000f6	5b		 pop	 rbx
  000f7	c3		 ret	 0
unzGetCurrentFileInfo ENDP
_TEXT	ENDS
PUBLIC	unzGetCurrentFileInfo64
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetCurrentFileInfo64 DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$unzGetCurrentFileInfo64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetCurrentFileInfo64 DD 010401H
	DD	0a204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unzGetCurrentFileInfo64
_TEXT	SEGMENT
file$ = 96
pfile_info$ = 104
szFileName$ = 112
fileNameBufferSize$ = 120
extraField$ = 128
extraFieldBufferSize$ = 136
szComment$ = 144
commentBufferSize$ = 152
unzGetCurrentFileInfo64 PROC				; COMDAT

; 1129 : {

$LN3:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1130 :     return unz64local_GetCurrentFileInfoInternal(file,pfile_info,NULL,
; 1131 :                                                 szFileName,fileNameBufferSize,
; 1132 :                                                 extraField,extraFieldBufferSize,
; 1133 :                                                 szComment,commentBufferSize);

  00004	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR commentBufferSize$[rsp]
  0000b	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  0000f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR szComment$[rsp]
  00017	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0001c	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR extraFieldBufferSize$[rsp]
  00023	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00027	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR extraField$[rsp]
  0002f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00034	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00039	4d 8b c8	 mov	 r9, r8
  0003c	45 33 c0	 xor	 r8d, r8d
  0003f	e8 00 00 00 00	 call	 unz64local_GetCurrentFileInfoInternal

; 1134 : }

  00044	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00048	c3		 ret	 0
unzGetCurrentFileInfo64 ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpenInternal DD imagerel unzOpenInternal
	DD	imagerel unzOpenInternal+153
	DD	imagerel $unwind$unzOpenInternal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$unzOpenInternal DD imagerel unzOpenInternal+153
	DD	imagerel unzOpenInternal+525
	DD	imagerel $chain$3$unzOpenInternal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$unzOpenInternal DD imagerel unzOpenInternal+525
	DD	imagerel unzOpenInternal+841
	DD	imagerel $chain$4$unzOpenInternal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$unzOpenInternal DD imagerel unzOpenInternal+841
	DD	imagerel unzOpenInternal+871
	DD	imagerel $chain$5$unzOpenInternal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$unzOpenInternal DD imagerel unzOpenInternal+871
	DD	imagerel unzOpenInternal+1001
	DD	imagerel $chain$6$unzOpenInternal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$unzOpenInternal DD 040021H
	DD	02bc400H
	DD	02c7400H
	DD	imagerel unzOpenInternal
	DD	imagerel unzOpenInternal+153
	DD	imagerel $unwind$unzOpenInternal
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$unzOpenInternal DD 021H
	DD	imagerel unzOpenInternal+153
	DD	imagerel unzOpenInternal+525
	DD	imagerel $chain$3$unzOpenInternal
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$unzOpenInternal DD 020821H
	DD	02ad408H
	DD	imagerel unzOpenInternal+153
	DD	imagerel unzOpenInternal+525
	DD	imagerel $chain$3$unzOpenInternal
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$unzOpenInternal DD 062021H
	DD	02bc420H
	DD	02c7418H
	DD	0316408H
	DD	imagerel unzOpenInternal
	DD	imagerel unzOpenInternal+153
	DD	imagerel $unwind$unzOpenInternal
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpenInternal DD 069901H
	DD	0303499H
	DD	02d0110H
	DD	05002e004H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unzOpenInternal
_TEXT	SEGMENT
number_disk$ = 32
number_disk_with_CD$ = 36
us$ = 48
path$ = 384
pzlib_filefunc64_32_def$ = 392
is64bitOpenFunction$ = 400
number_entry_CD$ = 408
uS$83157 = 408
uL64$83158 = 408
uL$ = 408
unzOpenInternal PROC					; COMDAT

; 587  : {

  00000	40 55		 push	 rbp
  00002	41 56		 push	 r14
  00004	48 8d 6c 24 98	 lea	 rbp, QWORD PTR [rsp-104]
  00009	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H

; 588  :     unz64_s us;
; 589  :     unz64_s *s;
; 590  :     ZPOS64_T central_pos;
; 591  :     uLong   uL;
; 592  : 
; 593  :     uLong number_disk;          /* number of the current dist, used for
; 594  :                                    spaning ZIP, unsupported, always 0*/
; 595  :     uLong number_disk_with_CD;  /* number the the disk with central dir, used
; 596  :                                    for spaning ZIP, unsupported, always 0*/
; 597  :     ZPOS64_T number_entry_CD;      /* total number of entries in
; 598  :                                    the central dir
; 599  :                                    (same than number_entry on nospan) */
; 600  : 
; 601  :     int err=UNZ_OK;

  00010	45 33 f6	 xor	 r14d, r14d
  00013	4c 8b c9	 mov	 r9, rcx

; 602  : 
; 603  :     if (unz_copyright[0]!=' ')
; 604  :         return NULL;
; 605  : 
; 606  :     us.z_filefunc.zseek32_file = NULL;

  00016	4c 89 75 80	 mov	 QWORD PTR us$[rbp-176], r14

; 607  :     us.z_filefunc.ztell32_file = NULL;

  0001a	4c 89 74 24 78	 mov	 QWORD PTR us$[rsp+72], r14

; 608  :     if (pzlib_filefunc64_32_def==NULL)

  0001f	48 85 d2	 test	 rdx, rdx
  00022	75 0c		 jne	 SHORT $LN33@unzOpenInt

; 609  :         fill_fopen64_filefunc(&us.z_filefunc.zfile_func64);

  00024	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00029	e8 00 00 00 00	 call	 fill_fopen64_filefunc

; 610  :     else

  0002e	eb 36		 jmp	 SHORT $LN32@unzOpenInt
$LN33@unzOpenInt:

; 611  :         us.z_filefunc = *pzlib_filefunc64_32_def;

  00030	0f 10 02	 movups	 xmm0, XMMWORD PTR [rdx]
  00033	0f 10 4a 10	 movups	 xmm1, XMMWORD PTR [rdx+16]
  00037	0f 29 44 24 30	 movaps	 XMMWORD PTR us$[rsp], xmm0
  0003c	0f 29 4c 24 40	 movaps	 XMMWORD PTR us$[rsp+16], xmm1
  00041	0f 10 42 20	 movups	 xmm0, XMMWORD PTR [rdx+32]
  00045	0f 10 4a 30	 movups	 xmm1, XMMWORD PTR [rdx+48]
  00049	0f 29 44 24 50	 movaps	 XMMWORD PTR us$[rsp+32], xmm0
  0004e	0f 29 4c 24 60	 movaps	 XMMWORD PTR us$[rsp+48], xmm1
  00053	0f 10 42 40	 movups	 xmm0, XMMWORD PTR [rdx+64]
  00057	f2 0f 10 4a 50	 movsdx	 xmm1, QWORD PTR [rdx+80]
  0005c	0f 29 44 24 70	 movaps	 XMMWORD PTR us$[rsp+64], xmm0
  00061	f2 0f 11 4d 80	 movsdx	 QWORD PTR us$[rbp-176], xmm1
$LN32@unzOpenInt:

; 612  :     us.is64bitOpenFunction = is64bitOpenFunction;

  00066	44 89 45 88	 mov	 DWORD PTR us$[rbp-168], r8d

; 613  : 
; 614  : 
; 615  : 
; 616  :     us.filestream = ZOPEN64(us.z_filefunc,
; 617  :                                                  path,
; 618  :                                                  ZLIB_FILEFUNC_MODE_READ |
; 619  :                                                  ZLIB_FILEFUNC_MODE_EXISTING);

  0006a	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  0006f	49 8b d1	 mov	 rdx, r9
  00072	41 b8 05 00 00
	00		 mov	 r8d, 5
  00078	e8 00 00 00 00	 call	 call_zopen64
  0007d	48 89 45 90	 mov	 QWORD PTR us$[rbp-160], rax

; 620  :     if (us.filestream==NULL)

  00081	48 85 c0	 test	 rax, rax
  00084	75 0b		 jne	 SHORT $LN31@unzOpenInt

; 762  : }

  00086	48 81 c4 68 01
	00 00		 add	 rsp, 360		; 00000168H
  0008d	41 5e		 pop	 r14
  0008f	5d		 pop	 rbp
  00090	c3		 ret	 0
$LN31@unzOpenInt:
  00091	48 89 9c 24 80
	01 00 00	 mov	 QWORD PTR [rsp+384], rbx
  00099	48 89 b4 24 88
	01 00 00	 mov	 QWORD PTR [rsp+392], rsi

; 621  :         return NULL;
; 622  : 
; 623  :     central_pos = unz64local_SearchCentralDir64(&us.z_filefunc,us.filestream);

  000a1	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  000a6	48 8b d0	 mov	 rdx, rax
  000a9	48 89 bc 24 60
	01 00 00	 mov	 QWORD PTR [rsp+352], rdi
  000b1	4c 89 a4 24 58
	01 00 00	 mov	 QWORD PTR [rsp+344], r12
  000b9	e8 00 00 00 00	 call	 unz64local_SearchCentralDir64

; 624  :     if (central_pos)
; 625  :     {
; 626  :         uLong uS;
; 627  :         ZPOS64_T uL64;
; 628  : 
; 629  :         us.isZip64 = 1;
; 630  : 
; 631  :         if (ZSEEK64(us.z_filefunc, us.filestream,
; 632  :                                       central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  000be	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  000c3	4c 8b e0	 mov	 r12, rax
  000c6	48 85 c0	 test	 rax, rax
  000c9	0f 84 3a 01 00
	00		 je	 $LN30@unzOpenInt
  000cf	48 8b 5d 90	 mov	 rbx, QWORD PTR us$[rbp-160]
  000d3	45 33 c9	 xor	 r9d, r9d
  000d6	4c 8b c0	 mov	 r8, rax
  000d9	48 8b d3	 mov	 rdx, rbx
  000dc	c7 45 4c 01 00
	00 00		 mov	 DWORD PTR us$[rbp+28], 1
  000e3	e8 00 00 00 00	 call	 call_zseek64
  000e8	83 ce ff	 or	 esi, -1

; 633  :         err=UNZ_ERRNO;
; 634  : 
; 635  :         /* the signature, already checked */
; 636  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  000eb	4c 8d 85 98 00
	00 00		 lea	 r8, QWORD PTR uL$[rbp-256]
  000f2	85 c0		 test	 eax, eax
  000f4	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  000f9	41 8b fe	 mov	 edi, r14d
  000fc	48 8b d3	 mov	 rdx, rbx
  000ff	0f 45 fe	 cmovne	 edi, esi
  00102	e8 00 00 00 00	 call	 unz64local_getLong

; 637  :             err=UNZ_ERRNO;
; 638  : 
; 639  :         /* size of zip64 end of central directory record */
; 640  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&uL64)!=UNZ_OK)

  00107	4c 8d 85 98 00
	00 00		 lea	 r8, QWORD PTR uL64$83158[rbp-256]
  0010e	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00113	85 c0		 test	 eax, eax
  00115	48 8b d3	 mov	 rdx, rbx
  00118	0f 45 fe	 cmovne	 edi, esi
  0011b	e8 00 00 00 00	 call	 unz64local_getLong64

; 641  :             err=UNZ_ERRNO;
; 642  : 
; 643  :         /* version made by */
; 644  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uS)!=UNZ_OK)

  00120	4c 8d 85 98 00
	00 00		 lea	 r8, QWORD PTR uS$83157[rbp-256]
  00127	85 c0		 test	 eax, eax
  00129	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  0012e	48 8b d3	 mov	 rdx, rbx
  00131	0f 45 fe	 cmovne	 edi, esi
  00134	e8 00 00 00 00	 call	 unz64local_getShort

; 645  :             err=UNZ_ERRNO;
; 646  : 
; 647  :         /* version needed to extract */
; 648  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uS)!=UNZ_OK)

  00139	4c 8d 85 98 00
	00 00		 lea	 r8, QWORD PTR uS$83157[rbp-256]
  00140	85 c0		 test	 eax, eax
  00142	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00147	48 8b d3	 mov	 rdx, rbx
  0014a	0f 45 fe	 cmovne	 edi, esi
  0014d	e8 00 00 00 00	 call	 unz64local_getShort

; 649  :             err=UNZ_ERRNO;
; 650  : 
; 651  :         /* number of this disk */
; 652  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&number_disk)!=UNZ_OK)

  00152	4c 8d 44 24 20	 lea	 r8, QWORD PTR number_disk$[rsp]
  00157	85 c0		 test	 eax, eax
  00159	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  0015e	48 8b d3	 mov	 rdx, rbx
  00161	0f 45 fe	 cmovne	 edi, esi
  00164	e8 00 00 00 00	 call	 unz64local_getLong

; 653  :             err=UNZ_ERRNO;
; 654  : 
; 655  :         /* number of the disk with the start of the central directory */
; 656  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&number_disk_with_CD)!=UNZ_OK)

  00169	4c 8d 44 24 24	 lea	 r8, QWORD PTR number_disk_with_CD$[rsp]
  0016e	85 c0		 test	 eax, eax
  00170	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00175	48 8b d3	 mov	 rdx, rbx
  00178	0f 45 fe	 cmovne	 edi, esi
  0017b	e8 00 00 00 00	 call	 unz64local_getLong

; 657  :             err=UNZ_ERRNO;
; 658  : 
; 659  :         /* total number of entries in the central directory on this disk */
; 660  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&us.gi.number_entry)!=UNZ_OK)

  00180	4c 8d 45 98	 lea	 r8, QWORD PTR us$[rbp-152]
  00184	85 c0		 test	 eax, eax
  00186	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  0018b	48 8b d3	 mov	 rdx, rbx
  0018e	0f 45 fe	 cmovne	 edi, esi
  00191	e8 00 00 00 00	 call	 unz64local_getLong64

; 661  :             err=UNZ_ERRNO;
; 662  : 
; 663  :         /* total number of entries in the central directory */
; 664  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&number_entry_CD)!=UNZ_OK)

  00196	48 8b 5d 90	 mov	 rbx, QWORD PTR us$[rbp-160]
  0019a	85 c0		 test	 eax, eax
  0019c	4c 8d 85 98 00
	00 00		 lea	 r8, QWORD PTR number_entry_CD$[rbp-256]
  001a3	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  001a8	48 8b d3	 mov	 rdx, rbx
  001ab	0f 45 fe	 cmovne	 edi, esi
  001ae	e8 00 00 00 00	 call	 unz64local_getLong64
  001b3	85 c0		 test	 eax, eax

; 665  :             err=UNZ_ERRNO;
; 666  : 
; 667  :         if ((number_entry_CD!=us.gi.number_entry) ||
; 668  :             (number_disk_with_CD!=0) ||
; 669  :             (number_disk!=0))

  001b5	48 8b 45 98	 mov	 rax, QWORD PTR us$[rbp-152]
  001b9	0f 45 fe	 cmovne	 edi, esi
  001bc	48 39 85 98 00
	00 00		 cmp	 QWORD PTR number_entry_CD$[rbp-256], rax
  001c3	75 0e		 jne	 SHORT $LN19@unzOpenInt
  001c5	44 39 74 24 24	 cmp	 DWORD PTR number_disk_with_CD$[rsp], r14d
  001ca	75 07		 jne	 SHORT $LN19@unzOpenInt
  001cc	44 39 74 24 20	 cmp	 DWORD PTR number_disk$[rsp], r14d
  001d1	74 05		 je	 SHORT $LN20@unzOpenInt
$LN19@unzOpenInt:

; 670  :             err=UNZ_BADZIPFILE;

  001d3	bf 99 ff ff ff	 mov	 edi, -103		; ffffffffffffff99H
$LN20@unzOpenInt:

; 671  : 
; 672  :         /* size of the central directory */
; 673  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&us.size_central_dir)!=UNZ_OK)

  001d8	4c 8d 45 d0	 lea	 r8, QWORD PTR us$[rbp-96]
  001dc	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  001e1	48 8b d3	 mov	 rdx, rbx
  001e4	e8 00 00 00 00	 call	 unz64local_getLong64

; 674  :             err=UNZ_ERRNO;
; 675  : 
; 676  :         /* offset of start of central directory with respect to the
; 677  :           starting disk number */
; 678  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&us.offset_central_dir)!=UNZ_OK)

  001e9	48 8b 55 90	 mov	 rdx, QWORD PTR us$[rbp-160]
  001ed	4c 8d 45 d8	 lea	 r8, QWORD PTR us$[rbp-88]
  001f1	85 c0		 test	 eax, eax
  001f3	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  001f8	0f 45 fe	 cmovne	 edi, esi
  001fb	e8 00 00 00 00	 call	 unz64local_getLong64

; 679  :             err=UNZ_ERRNO;
; 680  : 
; 681  :         us.gi.size_comment = 0;

  00200	44 89 75 a0	 mov	 DWORD PTR us$[rbp-144], r14d

; 682  :     }
; 683  :     else

  00204	e9 40 01 00 00	 jmp	 $LN41@unzOpenInt
$LN30@unzOpenInt:

; 684  :     {
; 685  :         central_pos = unz64local_SearchCentralDir(&us.z_filefunc,us.filestream);

  00209	48 8b 55 90	 mov	 rdx, QWORD PTR us$[rbp-160]
  0020d	4c 89 ac 24 50
	01 00 00	 mov	 QWORD PTR [rsp+336], r13
  00215	e8 00 00 00 00	 call	 unz64local_SearchCentralDir

; 686  :         if (central_pos==0)
; 687  :             err=UNZ_ERRNO;
; 688  : 
; 689  :         us.isZip64 = 0;
; 690  : 
; 691  :         if (ZSEEK64(us.z_filefunc, us.filestream,
; 692  :                                         central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0021a	4c 8b 6d 90	 mov	 r13, QWORD PTR us$[rbp-160]
  0021e	83 ce ff	 or	 esi, -1
  00221	48 85 c0	 test	 rax, rax
  00224	41 8b fe	 mov	 edi, r14d
  00227	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  0022c	0f 44 fe	 cmove	 edi, esi
  0022f	4c 8b c0	 mov	 r8, rax
  00232	49 8b d5	 mov	 rdx, r13
  00235	45 33 c9	 xor	 r9d, r9d
  00238	4c 8b e0	 mov	 r12, rax
  0023b	44 89 75 4c	 mov	 DWORD PTR us$[rbp+28], r14d
  0023f	e8 00 00 00 00	 call	 call_zseek64

; 693  :             err=UNZ_ERRNO;
; 694  : 
; 695  :         /* the signature, already checked */
; 696  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  00244	4c 8d 85 98 00
	00 00		 lea	 r8, QWORD PTR uL$[rbp-256]
  0024b	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00250	85 c0		 test	 eax, eax
  00252	49 8b d5	 mov	 rdx, r13
  00255	0f 45 fe	 cmovne	 edi, esi
  00258	e8 00 00 00 00	 call	 unz64local_getLong

; 697  :             err=UNZ_ERRNO;
; 698  : 
; 699  :         /* number of this disk */
; 700  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&number_disk)!=UNZ_OK)

  0025d	4c 8d 44 24 20	 lea	 r8, QWORD PTR number_disk$[rsp]
  00262	85 c0		 test	 eax, eax
  00264	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00269	49 8b d5	 mov	 rdx, r13
  0026c	0f 45 fe	 cmovne	 edi, esi
  0026f	e8 00 00 00 00	 call	 unz64local_getShort

; 701  :             err=UNZ_ERRNO;
; 702  : 
; 703  :         /* number of the disk with the start of the central directory */
; 704  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&number_disk_with_CD)!=UNZ_OK)

  00274	4c 8d 44 24 24	 lea	 r8, QWORD PTR number_disk_with_CD$[rsp]
  00279	85 c0		 test	 eax, eax
  0027b	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00280	49 8b d5	 mov	 rdx, r13
  00283	0f 45 fe	 cmovne	 edi, esi
  00286	e8 00 00 00 00	 call	 unz64local_getShort

; 705  :             err=UNZ_ERRNO;
; 706  : 
; 707  :         /* total number of entries in the central dir on this disk */
; 708  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  0028b	4c 8d 85 98 00
	00 00		 lea	 r8, QWORD PTR uL$[rbp-256]
  00292	85 c0		 test	 eax, eax
  00294	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00299	49 8b d5	 mov	 rdx, r13
  0029c	0f 45 fe	 cmovne	 edi, esi
  0029f	e8 00 00 00 00	 call	 unz64local_getShort

; 709  :             err=UNZ_ERRNO;
; 710  :         us.gi.number_entry = uL;

  002a4	8b 9d 98 00 00
	00		 mov	 ebx, DWORD PTR uL$[rbp-256]
  002aa	85 c0		 test	 eax, eax

; 711  : 
; 712  :         /* total number of entries in the central dir */
; 713  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  002ac	4c 8d 85 98 00
	00 00		 lea	 r8, QWORD PTR uL$[rbp-256]
  002b3	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  002b8	49 8b d5	 mov	 rdx, r13
  002bb	48 89 5d 98	 mov	 QWORD PTR us$[rbp-152], rbx
  002bf	0f 45 fe	 cmovne	 edi, esi
  002c2	e8 00 00 00 00	 call	 unz64local_getShort
  002c7	85 c0		 test	 eax, eax

; 714  :             err=UNZ_ERRNO;
; 715  :         number_entry_CD = uL;

  002c9	8b 85 98 00 00
	00		 mov	 eax, DWORD PTR uL$[rbp-256]
  002cf	0f 45 fe	 cmovne	 edi, esi

; 716  : 
; 717  :         if ((number_entry_CD!=us.gi.number_entry) ||
; 718  :             (number_disk_with_CD!=0) ||
; 719  :             (number_disk!=0))

  002d2	48 3b c3	 cmp	 rax, rbx
  002d5	75 0e		 jne	 SHORT $LN7@unzOpenInt
  002d7	44 39 74 24 24	 cmp	 DWORD PTR number_disk_with_CD$[rsp], r14d
  002dc	75 07		 jne	 SHORT $LN7@unzOpenInt
  002de	44 39 74 24 20	 cmp	 DWORD PTR number_disk$[rsp], r14d
  002e3	74 05		 je	 SHORT $LN8@unzOpenInt
$LN7@unzOpenInt:

; 720  :             err=UNZ_BADZIPFILE;

  002e5	bf 99 ff ff ff	 mov	 edi, -103		; ffffffffffffff99H
$LN8@unzOpenInt:

; 721  : 
; 722  :         /* size of the central directory */
; 723  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  002ea	4c 8d 85 98 00
	00 00		 lea	 r8, QWORD PTR uL$[rbp-256]
  002f1	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  002f6	49 8b d5	 mov	 rdx, r13
  002f9	e8 00 00 00 00	 call	 unz64local_getLong

; 724  :             err=UNZ_ERRNO;
; 725  :         us.size_central_dir = uL;
; 726  : 
; 727  :         /* offset of start of central directory with respect to the
; 728  :             starting disk number */
; 729  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  002fe	4c 8d 85 98 00
	00 00		 lea	 r8, QWORD PTR uL$[rbp-256]
  00305	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  0030a	85 c0		 test	 eax, eax
  0030c	8b 85 98 00 00
	00		 mov	 eax, DWORD PTR uL$[rbp-256]
  00312	49 8b d5	 mov	 rdx, r13
  00315	48 89 45 d0	 mov	 QWORD PTR us$[rbp-96], rax
  00319	0f 45 fe	 cmovne	 edi, esi
  0031c	e8 00 00 00 00	 call	 unz64local_getLong
  00321	85 c0		 test	 eax, eax

; 730  :             err=UNZ_ERRNO;
; 731  :         us.offset_central_dir = uL;

  00323	8b 85 98 00 00
	00		 mov	 eax, DWORD PTR uL$[rbp-256]

; 732  : 
; 733  :         /* zipfile comment length */
; 734  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&us.gi.size_comment)!=UNZ_OK)

  00329	4c 8d 45 a0	 lea	 r8, QWORD PTR us$[rbp-144]
  0032d	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00332	49 8b d5	 mov	 rdx, r13
  00335	0f 45 fe	 cmovne	 edi, esi
  00338	48 89 45 d8	 mov	 QWORD PTR us$[rbp-88], rax
  0033c	e8 00 00 00 00	 call	 unz64local_getShort
  00341	4c 8b ac 24 50
	01 00 00	 mov	 r13, QWORD PTR [rsp+336]
$LN41@unzOpenInt:

; 735  :             err=UNZ_ERRNO;
; 736  :     }
; 737  : 
; 738  :     if ((central_pos<us.offset_central_dir+us.size_central_dir) &&
; 739  :         (err==UNZ_OK))

  00349	48 8b 4d d8	 mov	 rcx, QWORD PTR us$[rbp-88]
  0034d	48 8b 55 d0	 mov	 rdx, QWORD PTR us$[rbp-96]
  00351	85 c0		 test	 eax, eax
  00353	0f 45 fe	 cmovne	 edi, esi
  00356	48 8b b4 24 88
	01 00 00	 mov	 rsi, QWORD PTR [rsp+392]
  0035e	48 8d 04 11	 lea	 rax, QWORD PTR [rcx+rdx]
  00362	4c 3b e0	 cmp	 r12, rax

; 740  :         err=UNZ_BADZIPFILE;
; 741  : 
; 742  :     if (err!=UNZ_OK)

  00365	72 50		 jb	 SHORT $LN37@unzOpenInt
  00367	85 ff		 test	 edi, edi
  00369	75 4c		 jne	 SHORT $LN37@unzOpenInt

; 746  :     }
; 747  : 
; 748  :     us.byte_before_the_zipfile = central_pos -
; 749  :                             (us.offset_central_dir+us.size_central_dir);

  0036b	49 8b c4	 mov	 rax, r12

; 750  :     us.central_pos = central_pos;

  0036e	4c 89 65 c8	 mov	 QWORD PTR us$[rbp-104], r12

; 751  :     us.pfile_in_zip_read = NULL;

  00372	4c 89 75 40	 mov	 QWORD PTR us$[rbp+16], r14
  00376	48 2b c1	 sub	 rax, rcx

; 752  :     us.encrypted = 0;
; 753  : 
; 754  : 
; 755  :     s=(unz64_s*)ALLOC(sizeof(unz64_s));

  00379	b9 20 01 00 00	 mov	 ecx, 288		; 00000120H
  0037e	44 89 75 48	 mov	 DWORD PTR us$[rbp+24], r14d
  00382	48 2b c2	 sub	 rax, rdx
  00385	48 89 45 a8	 mov	 QWORD PTR us$[rbp-136], rax
  00389	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0038f	48 8b d8	 mov	 rbx, rax

; 756  :     if( s != NULL)

  00392	48 85 c0	 test	 rax, rax
  00395	74 1b		 je	 SHORT $LN1@unzOpenInt

; 757  :     {
; 758  :         *s=us;

  00397	48 8d 54 24 30	 lea	 rdx, QWORD PTR us$[rsp]
  0039c	48 8b c8	 mov	 rcx, rax
  0039f	41 b8 20 01 00
	00		 mov	 r8d, 288		; 00000120H
  003a5	e8 00 00 00 00	 call	 memcpy

; 759  :         unzGoToFirstFile((unzFile)s);

  003aa	48 8b cb	 mov	 rcx, rbx
  003ad	e8 00 00 00 00	 call	 unzGoToFirstFile
$LN1@unzOpenInt:

; 760  :     }
; 761  :     return (unzFile)s;

  003b2	48 8b c3	 mov	 rax, rbx
  003b5	eb 0f		 jmp	 SHORT $LN40@unzOpenInt
$LN37@unzOpenInt:

; 743  :     {
; 744  :         ZCLOSE64(us.z_filefunc, us.filestream);

  003b7	48 8b 55 90	 mov	 rdx, QWORD PTR us$[rbp-160]
  003bb	48 8b 4c 24 68	 mov	 rcx, QWORD PTR us$[rsp+56]
  003c0	ff 54 24 58	 call	 QWORD PTR us$[rsp+40]

; 745  :         return NULL;

  003c4	33 c0		 xor	 eax, eax
$LN40@unzOpenInt:
  003c6	48 8b bc 24 60
	01 00 00	 mov	 rdi, QWORD PTR [rsp+352]
  003ce	48 8b 9c 24 80
	01 00 00	 mov	 rbx, QWORD PTR [rsp+384]
  003d6	4c 8b a4 24 58
	01 00 00	 mov	 r12, QWORD PTR [rsp+344]

; 762  : }

  003de	48 81 c4 68 01
	00 00		 add	 rsp, 360		; 00000168H
  003e5	41 5e		 pop	 r14
  003e7	5d		 pop	 rbp
  003e8	c3		 ret	 0
unzOpenInternal ENDP
PUBLIC	unzOpenCurrentFile3
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpenCurrentFile3 DD imagerel $LN28
	DD	imagerel $LN28+133
	DD	imagerel $unwind$unzOpenCurrentFile3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$unzOpenCurrentFile3 DD imagerel $LN28+133
	DD	imagerel $LN28+165
	DD	imagerel $chain$0$unzOpenCurrentFile3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$unzOpenCurrentFile3 DD imagerel $LN28+165
	DD	imagerel $LN28+494
	DD	imagerel $chain$1$unzOpenCurrentFile3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$unzOpenCurrentFile3 DD imagerel $LN28+494
	DD	imagerel $LN28+513
	DD	imagerel $chain$2$unzOpenCurrentFile3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$unzOpenCurrentFile3 DD imagerel $LN28+513
	DD	imagerel $LN28+596
	DD	imagerel $chain$4$unzOpenCurrentFile3
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$unzOpenCurrentFile3 DD 040021H
	DD	0bd400H
	DD	0a3400H
	DD	imagerel $LN28
	DD	imagerel $LN28+133
	DD	imagerel $unwind$unzOpenCurrentFile3
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$unzOpenCurrentFile3 DD 021H
	DD	imagerel $LN28+133
	DD	imagerel $LN28+165
	DD	imagerel $chain$0$unzOpenCurrentFile3
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$unzOpenCurrentFile3 DD 020521H
	DD	0bd405H
	DD	imagerel $LN28+133
	DD	imagerel $LN28+165
	DD	imagerel $chain$0$unzOpenCurrentFile3
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$unzOpenCurrentFile3 DD 020521H
	DD	0a3405H
	DD	imagerel $LN28
	DD	imagerel $LN28+133
	DD	imagerel $unwind$unzOpenCurrentFile3
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpenCurrentFile3 DD 060d01H
	DD	0c540dH
	DD	0c009520dH
	DD	060067007H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unzOpenCurrentFile3
_TEXT	SEGMENT
iSizeVar$ = 32
offset_local_extrafield$ = 40
file$ = 80
method$ = 88
level$ = 96
raw$ = 104
size_local_extrafield$ = 112
password$ = 112
unzOpenCurrentFile3 PROC				; COMDAT

; 1474 : {

$LN28:
  00000	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	41 54		 push	 r12
  00009	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1475 :     int err=UNZ_OK;
; 1476 :     uInt iSizeVar;
; 1477 :     unz64_s* s;
; 1478 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1479 :     ZPOS64_T offset_local_extrafield;  /* offset of the local extra field */
; 1480 :     uInt  size_local_extrafield;    /* size of the local extra field */
; 1481 : #    ifndef NOUNCRYPT
; 1482 :     char source[12];
; 1483 : #    else
; 1484 :     if (password != NULL)

  0000d	48 83 7c 24 70
	00		 cmp	 QWORD PTR password$[rsp], 0
  00013	45 8b e1	 mov	 r12d, r9d
  00016	49 8b f0	 mov	 rsi, r8
  00019	48 8b ea	 mov	 rbp, rdx
  0001c	48 8b f9	 mov	 rdi, rcx
  0001f	74 13		 je	 SHORT $LN22@unzOpenCur
$LN27@unzOpenCur:

; 1485 :         return UNZ_PARAMERROR;

  00021	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 1639 : }

  00026	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  0002b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0002f	41 5c		 pop	 r12
  00031	5f		 pop	 rdi
  00032	5e		 pop	 rsi
  00033	c3		 ret	 0
$LN22@unzOpenCur:

; 1486 : #    endif
; 1487 : 
; 1488 :     if (file==NULL)

  00034	48 85 c9	 test	 rcx, rcx

; 1489 :         return UNZ_PARAMERROR;

  00037	74 e8		 je	 SHORT $LN27@unzOpenCur

; 1490 :     s=(unz64_s*)file;
; 1491 :     if (!s->current_file_ok)

  00039	48 83 b9 90 00
	00 00 00	 cmp	 QWORD PTR [rcx+144], 0

; 1492 :         return UNZ_PARAMERROR;

  00041	74 de		 je	 SHORT $LN27@unzOpenCur

; 1493 : 
; 1494 :     if (s->pfile_in_zip_read != NULL)

  00043	48 83 b9 10 01
	00 00 00	 cmp	 QWORD PTR [rcx+272], 0
  0004b	74 05		 je	 SHORT $LN19@unzOpenCur

; 1495 :         unzCloseCurrentFile(file);

  0004d	e8 00 00 00 00	 call	 unzCloseCurrentFile
$LN19@unzOpenCur:

; 1496 : 
; 1497 :     if (unz64local_CheckCurrentFileCoherencyHeader(s,&iSizeVar, &offset_local_extrafield,&size_local_extrafield)!=UNZ_OK)

  00052	4c 8d 4c 24 70	 lea	 r9, QWORD PTR size_local_extrafield$[rsp]
  00057	4c 8d 44 24 28	 lea	 r8, QWORD PTR offset_local_extrafield$[rsp]
  0005c	48 8d 54 24 20	 lea	 rdx, QWORD PTR iSizeVar$[rsp]
  00061	48 8b cf	 mov	 rcx, rdi
  00064	e8 00 00 00 00	 call	 unz64local_CheckCurrentFileCoherencyHeader
  00069	85 c0		 test	 eax, eax
  0006b	74 13		 je	 SHORT $LN18@unzOpenCur

; 1498 :         return UNZ_BADZIPFILE;

  0006d	b8 99 ff ff ff	 mov	 eax, -103		; ffffffffffffff99H

; 1639 : }

  00072	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  00077	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007b	41 5c		 pop	 r12
  0007d	5f		 pop	 rdi
  0007e	5e		 pop	 rsi
  0007f	c3		 ret	 0
$LN18@unzOpenCur:

; 1499 : 
; 1500 :     pfile_in_zip_read_info = (file_in_zip64_read_info_s*)ALLOC(sizeof(file_in_zip64_read_info_s));

  00080	b9 20 01 00 00	 mov	 ecx, 288		; 00000120H
  00085	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  0008a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00090	48 8b d8	 mov	 rbx, rax

; 1501 :     if (pfile_in_zip_read_info==NULL)

  00093	48 85 c0	 test	 rax, rax
  00096	75 08		 jne	 SHORT $LN17@unzOpenCur

; 1502 :         return UNZ_INTERNALERROR;

  00098	8d 43 98	 lea	 eax, QWORD PTR [rbx-104]
  0009b	e9 4e 01 00 00	 jmp	 $LN25@unzOpenCur
$LN17@unzOpenCur:

; 1503 : 
; 1504 :     pfile_in_zip_read_info->read_buffer=(char*)ALLOC(UNZ_BUFSIZE);

  000a0	b9 00 40 00 00	 mov	 ecx, 16384		; 00004000H
  000a5	4c 89 6c 24 58	 mov	 QWORD PTR [rsp+88], r13
  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc

; 1505 :     pfile_in_zip_read_info->offset_local_extrafield = offset_local_extrafield;

  000b0	48 8b 4c 24 28	 mov	 rcx, QWORD PTR offset_local_extrafield$[rsp]

; 1506 :     pfile_in_zip_read_info->size_local_extrafield = size_local_extrafield;
; 1507 :     pfile_in_zip_read_info->pos_local_extrafield=0;

  000b5	45 33 ed	 xor	 r13d, r13d
  000b8	48 89 4b 70	 mov	 QWORD PTR [rbx+112], rcx
  000bc	8b 4c 24 70	 mov	 ecx, DWORD PTR size_local_extrafield$[rsp]
  000c0	4c 89 ab 80 00
	00 00		 mov	 QWORD PTR [rbx+128], r13
  000c7	48 89 03	 mov	 QWORD PTR [rbx], rax

; 1508 :     pfile_in_zip_read_info->raw=raw;

  000ca	44 89 a3 18 01
	00 00		 mov	 DWORD PTR [rbx+280], r12d
  000d1	89 4b 78	 mov	 DWORD PTR [rbx+120], ecx

; 1509 : 
; 1510 :     if (pfile_in_zip_read_info->read_buffer==NULL)

  000d4	48 85 c0	 test	 rax, rax
  000d7	75 12		 jne	 SHORT $LN16@unzOpenCur

; 1511 :     {
; 1512 :         TRYFREE(pfile_in_zip_read_info);

  000d9	48 8b cb	 mov	 rcx, rbx
  000dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1513 :         return UNZ_INTERNALERROR;

  000e2	41 8d 45 98	 lea	 eax, QWORD PTR [r13-104]
  000e6	e9 fe 00 00 00	 jmp	 $LN26@unzOpenCur
$LN16@unzOpenCur:

; 1514 :     }
; 1515 : 
; 1516 :     pfile_in_zip_read_info->stream_initialised=0;

  000eb	44 89 6b 68	 mov	 DWORD PTR [rbx+104], r13d

; 1517 : 
; 1518 :     if (method!=NULL)

  000ef	48 85 ed	 test	 rbp, rbp
  000f2	74 09		 je	 SHORT $LN14@unzOpenCur

; 1519 :         *method = (int)s->cur_file_info.compression_method;

  000f4	8b 87 bc 00 00
	00		 mov	 eax, DWORD PTR [rdi+188]
  000fa	89 45 00	 mov	 DWORD PTR [rbp], eax
$LN14@unzOpenCur:

; 1520 : 
; 1521 :     if (level!=NULL)

  000fd	48 85 f6	 test	 rsi, rsi
  00100	74 34		 je	 SHORT $LN11@unzOpenCur

; 1522 :     {
; 1523 :         *level = 6;

  00102	c7 06 06 00 00
	00		 mov	 DWORD PTR [rsi], 6

; 1524 :         switch (s->cur_file_info.flag & 0x06)

  00108	8b 87 b8 00 00
	00		 mov	 eax, DWORD PTR [rdi+184]
  0010e	83 e0 06	 and	 eax, 6
  00111	83 f8 02	 cmp	 eax, 2
  00114	74 1a		 je	 SHORT $LN8@unzOpenCur
  00116	83 f8 04	 cmp	 eax, 4
  00119	74 0d		 je	 SHORT $LN9@unzOpenCur
  0011b	83 f8 06	 cmp	 eax, 6
  0011e	75 16		 jne	 SHORT $LN11@unzOpenCur

; 1525 :         {
; 1526 :           case 6 : *level = 1; break;

  00120	c7 06 01 00 00
	00		 mov	 DWORD PTR [rsi], 1
  00126	eb 0e		 jmp	 SHORT $LN11@unzOpenCur
$LN9@unzOpenCur:

; 1527 :           case 4 : *level = 2; break;

  00128	c7 06 02 00 00
	00		 mov	 DWORD PTR [rsi], 2
  0012e	eb 06		 jmp	 SHORT $LN11@unzOpenCur
$LN8@unzOpenCur:

; 1528 :           case 2 : *level = 9; break;

  00130	c7 06 09 00 00
	00		 mov	 DWORD PTR [rsi], 9
$LN11@unzOpenCur:

; 1529 :         }
; 1530 :     }
; 1531 : 
; 1532 :     if ((s->cur_file_info.compression_method!=0) &&
; 1533 : /* #ifdef HAVE_BZIP2 */
; 1534 :         (s->cur_file_info.compression_method!=Z_BZIP2ED) &&
; 1535 : /* #endif */
; 1536 :         (s->cur_file_info.compression_method!=Z_DEFLATED))
; 1537 : 
; 1538 :         err=UNZ_BADZIPFILE;
; 1539 : 
; 1540 :     pfile_in_zip_read_info->crc32_wait=s->cur_file_info.crc;

  00136	8b 87 c4 00 00
	00		 mov	 eax, DWORD PTR [rdi+196]

; 1541 :     pfile_in_zip_read_info->crc32=0;

  0013c	44 89 ab 90 00
	00 00		 mov	 DWORD PTR [rbx+144], r13d

; 1542 :     pfile_in_zip_read_info->total_out_64=0;

  00143	4c 89 ab 88 00
	00 00		 mov	 QWORD PTR [rbx+136], r13
  0014a	89 83 94 00 00
	00		 mov	 DWORD PTR [rbx+148], eax

; 1543 :     pfile_in_zip_read_info->compression_method = s->cur_file_info.compression_method;

  00150	8b 87 bc 00 00
	00		 mov	 eax, DWORD PTR [rdi+188]

; 1544 :     pfile_in_zip_read_info->filestream=s->filestream;
; 1545 :     pfile_in_zip_read_info->z_filefunc=s->z_filefunc;

  00156	48 8d 8b a8 00
	00 00		 lea	 rcx, QWORD PTR [rbx+168]
  0015d	89 83 08 01 00
	00		 mov	 DWORD PTR [rbx+264], eax
  00163	48 8b 47 60	 mov	 rax, QWORD PTR [rdi+96]
  00167	48 8b d7	 mov	 rdx, rdi
  0016a	41 b8 58 00 00
	00		 mov	 r8d, 88			; 00000058H
  00170	48 89 83 00 01
	00 00		 mov	 QWORD PTR [rbx+256], rax
  00177	e8 00 00 00 00	 call	 memcpy

; 1546 :     pfile_in_zip_read_info->byte_before_the_zipfile=s->byte_before_the_zipfile;

  0017c	4c 8b 5f 78	 mov	 r11, QWORD PTR [rdi+120]

; 1547 : 
; 1548 :     pfile_in_zip_read_info->stream.total_out = 0;

  00180	44 89 6b 24	 mov	 DWORD PTR [rbx+36], r13d
  00184	4c 89 9b 10 01
	00 00		 mov	 QWORD PTR [rbx+272], r11

; 1549 : 
; 1550 :     if ((s->cur_file_info.compression_method==Z_BZIP2ED) && (!raw))

  0018b	8b 87 bc 00 00
	00		 mov	 eax, DWORD PTR [rdi+188]
  00191	83 f8 0c	 cmp	 eax, 12
  00194	75 6b		 jne	 SHORT $LN6@unzOpenCur
  00196	45 85 e4	 test	 r12d, r12d
  00199	75 66		 jne	 SHORT $LN6@unzOpenCur

; 1551 :     {
; 1552 : #ifdef HAVE_BZIP2
; 1553 :       pfile_in_zip_read_info->bstream.bzalloc = (void *(*) (void *, int, int))0;
; 1554 :       pfile_in_zip_read_info->bstream.bzfree = (free_func)0;
; 1555 :       pfile_in_zip_read_info->bstream.opaque = (voidpf)0;
; 1556 :       pfile_in_zip_read_info->bstream.state = (voidpf)0;
; 1557 : 
; 1558 :       pfile_in_zip_read_info->stream.zalloc = (alloc_func)0;
; 1559 :       pfile_in_zip_read_info->stream.zfree = (free_func)0;
; 1560 :       pfile_in_zip_read_info->stream.opaque = (voidpf)0;
; 1561 :       pfile_in_zip_read_info->stream.next_in = (voidpf)0;
; 1562 :       pfile_in_zip_read_info->stream.avail_in = 0;
; 1563 : 
; 1564 :       err=BZ2_bzDecompressInit(&pfile_in_zip_read_info->bstream, 0, 0);
; 1565 :       if (err == Z_OK)
; 1566 :         pfile_in_zip_read_info->stream_initialised=Z_BZIP2ED;
; 1567 :       else
; 1568 :       {
; 1569 :         TRYFREE(pfile_in_zip_read_info);
; 1570 :         return err;
; 1571 :       }
; 1572 : #else
; 1573 :       pfile_in_zip_read_info->raw=1;

  0019b	c7 83 18 01 00
	00 01 00 00 00	 mov	 DWORD PTR [rbx+280], 1
$LN2@unzOpenCur:

; 1591 :       }
; 1592 :         /* windowBits is passed < 0 to tell that there is no zlib header.
; 1593 :          * Note that in this case inflate *requires* an extra "dummy" byte
; 1594 :          * after the compressed stream in order to complete decompression and
; 1595 :          * return Z_STREAM_END.
; 1596 :          * In unzip, i don't wait absolutely Z_STREAM_END because I known the
; 1597 :          * size of both compressed and uncompressed data
; 1598 :          */
; 1599 :     }
; 1600 :     pfile_in_zip_read_info->rest_read_compressed =
; 1601 :             s->cur_file_info.compressed_size ;

  001a5	48 8b 87 c8 00
	00 00		 mov	 rax, QWORD PTR [rdi+200]

; 1602 :     pfile_in_zip_read_info->rest_read_uncompressed =
; 1603 :             s->cur_file_info.uncompressed_size ;
; 1604 : 
; 1605 : 
; 1606 :     pfile_in_zip_read_info->pos_in_zipfile =
; 1607 :             s->cur_file_info_internal.offset_curfile + SIZEZIPLOCALHEADER +
; 1608 :               iSizeVar;

  001ac	8b 4c 24 20	 mov	 ecx, DWORD PTR iSizeVar$[rsp]
  001b0	48 89 83 98 00
	00 00		 mov	 QWORD PTR [rbx+152], rax
  001b7	48 8b 87 d0 00
	00 00		 mov	 rax, QWORD PTR [rdi+208]
  001be	48 89 83 a0 00
	00 00		 mov	 QWORD PTR [rbx+160], rax
  001c5	48 8b 87 08 01
	00 00		 mov	 rax, QWORD PTR [rdi+264]

; 1609 : 
; 1610 :     pfile_in_zip_read_info->stream.avail_in = (uInt)0;

  001cc	44 89 6b 10	 mov	 DWORD PTR [rbx+16], r13d
  001d0	48 8d 4c 08 1e	 lea	 rcx, QWORD PTR [rax+rcx+30]

; 1611 : 
; 1612 :     s->pfile_in_zip_read = pfile_in_zip_read_info;
; 1613 :                 s->encrypted = 0;
; 1614 : 
; 1615 : #    ifndef NOUNCRYPT
; 1616 :     if (password != NULL)
; 1617 :     {
; 1618 :         int i;
; 1619 :         s->pcrc_32_tab = get_crc_table();
; 1620 :         init_keys(password,s->keys,s->pcrc_32_tab);
; 1621 :         if (ZSEEK64(s->z_filefunc, s->filestream,
; 1622 :                   s->pfile_in_zip_read->pos_in_zipfile +
; 1623 :                      s->pfile_in_zip_read->byte_before_the_zipfile,
; 1624 :                   SEEK_SET)!=0)
; 1625 :             return UNZ_INTERNALERROR;
; 1626 :         if(ZREAD64(s->z_filefunc, s->filestream,source, 12)<12)
; 1627 :             return UNZ_INTERNALERROR;
; 1628 : 
; 1629 :         for (i = 0; i<12; i++)
; 1630 :             zdecode(s->keys,s->pcrc_32_tab,source[i]);
; 1631 : 
; 1632 :         s->pfile_in_zip_read->pos_in_zipfile+=12;
; 1633 :         s->encrypted=1;
; 1634 :     }
; 1635 : #    endif
; 1636 : 
; 1637 : 
; 1638 :     return UNZ_OK;

  001d5	33 c0		 xor	 eax, eax
  001d7	48 89 4b 60	 mov	 QWORD PTR [rbx+96], rcx
  001db	48 89 9f 10 01
	00 00		 mov	 QWORD PTR [rdi+272], rbx
  001e2	44 89 af 18 01
	00 00		 mov	 DWORD PTR [rdi+280], r13d
$LN26@unzOpenCur:
  001e9	4c 8b 6c 24 58	 mov	 r13, QWORD PTR [rsp+88]
$LN25@unzOpenCur:
  001ee	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 1639 : }

  001f3	48 8b 6c 24 60	 mov	 rbp, QWORD PTR [rsp+96]
  001f8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001fc	41 5c		 pop	 r12
  001fe	5f		 pop	 rdi
  001ff	5e		 pop	 rsi
  00200	c3		 ret	 0
$LN6@unzOpenCur:

; 1574 : #endif
; 1575 :     }
; 1576 :     else if ((s->cur_file_info.compression_method==Z_DEFLATED) && (!raw))

  00201	83 f8 08	 cmp	 eax, 8
  00204	75 9f		 jne	 SHORT $LN2@unzOpenCur
  00206	45 85 e4	 test	 r12d, r12d
  00209	75 9a		 jne	 SHORT $LN2@unzOpenCur

; 1577 :     {
; 1578 :       pfile_in_zip_read_info->stream.zalloc = (alloc_func)0;
; 1579 :       pfile_in_zip_read_info->stream.zfree = (free_func)0;
; 1580 :       pfile_in_zip_read_info->stream.opaque = (voidpf)0;
; 1581 :       pfile_in_zip_read_info->stream.next_in = 0;

  0020b	48 8d 4b 08	 lea	 rcx, QWORD PTR [rbx+8]

; 1582 :       pfile_in_zip_read_info->stream.avail_in = 0;
; 1583 : 
; 1584 :       err=inflateInit2(&pfile_in_zip_read_info->stream, -MAX_WBITS);

  0020f	44 8d 48 50	 lea	 r9d, QWORD PTR [rax+80]
  00213	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05HBMOAMF@1?42?47?$AA@
  0021a	8d 50 e9	 lea	 edx, QWORD PTR [rax-23]
  0021d	4c 89 6b 38	 mov	 QWORD PTR [rbx+56], r13
  00221	4c 89 6b 40	 mov	 QWORD PTR [rbx+64], r13
  00225	4c 89 29	 mov	 QWORD PTR [rcx], r13
  00228	4c 89 6b 48	 mov	 QWORD PTR [rbx+72], r13
  0022c	44 89 6b 10	 mov	 DWORD PTR [rbx+16], r13d
  00230	e8 00 00 00 00	 call	 inflateInit2_
  00235	8b f0		 mov	 esi, eax

; 1585 :       if (err == Z_OK)

  00237	85 c0		 test	 eax, eax
  00239	75 0c		 jne	 SHORT $LN3@unzOpenCur

; 1586 :         pfile_in_zip_read_info->stream_initialised=Z_DEFLATED;

  0023b	c7 43 68 08 00
	00 00		 mov	 DWORD PTR [rbx+104], 8

; 1587 :       else

  00242	e9 5e ff ff ff	 jmp	 $LN2@unzOpenCur
$LN3@unzOpenCur:

; 1588 :       {
; 1589 :         TRYFREE(pfile_in_zip_read_info);

  00247	48 8b cb	 mov	 rcx, rbx
  0024a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1590 :         return err;

  00250	8b c6		 mov	 eax, esi
  00252	eb 95		 jmp	 SHORT $LN26@unzOpenCur
unzOpenCurrentFile3 ENDP
_TEXT	ENDS
PUBLIC	unzGoToFilePos
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGoToFilePos DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$unzGoToFilePos
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGoToFilePos DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unzGoToFilePos
_TEXT	SEGMENT
file_pos64$ = 32
file$ = 64
file_pos$ = 72
unzGoToFilePos PROC					; COMDAT

; 1363 : {

$LN4:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1364 :     unz64_file_pos file_pos64;
; 1365 :     if (file_pos == NULL)

  00004	48 85 d2	 test	 rdx, rdx
  00007	75 0a		 jne	 SHORT $LN1@unzGoToFil@2

; 1366 :         return UNZ_PARAMERROR;

  00009	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 1371 : }

  0000e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00012	c3		 ret	 0
$LN1@unzGoToFil@2:

; 1367 : 
; 1368 :     file_pos64.pos_in_zip_directory = file_pos->pos_in_zip_directory;

  00013	8b 02		 mov	 eax, DWORD PTR [rdx]
  00015	48 89 44 24 20	 mov	 QWORD PTR file_pos64$[rsp], rax

; 1369 :     file_pos64.num_of_file = file_pos->num_of_file;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [rdx+4]

; 1370 :     return unzGoToFilePos64(file,&file_pos64);

  0001d	48 8d 54 24 20	 lea	 rdx, QWORD PTR file_pos64$[rsp]
  00022	48 89 44 24 28	 mov	 QWORD PTR file_pos64$[rsp+8], rax
  00027	e8 00 00 00 00	 call	 unzGoToFilePos64

; 1371 : }

  0002c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00030	c3		 ret	 0
unzGoToFilePos ENDP
_TEXT	ENDS
PUBLIC	unzLocateFile
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzLocateFile DD imagerel $LN17
	DD	imagerel $LN17+43
	DD	imagerel $unwind$unzLocateFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$unzLocateFile DD imagerel $LN17+43
	DD	imagerel $LN17+116
	DD	imagerel $chain$0$unzLocateFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$unzLocateFile DD imagerel $LN17+116
	DD	imagerel $LN17+454
	DD	imagerel $chain$3$unzLocateFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$unzLocateFile DD imagerel $LN17+454
	DD	imagerel $LN17+473
	DD	imagerel $chain$4$unzLocateFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$unzLocateFile DD imagerel $LN17+473
	DD	imagerel $LN17+477
	DD	imagerel $chain$6$unzLocateFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$unzLocateFile DD 080021H
	DD	034e400H
	DD	035d400H
	DD	03cc400H
	DD	03b7400H
	DD	imagerel $LN17
	DD	imagerel $LN17+43
	DD	imagerel $unwind$unzLocateFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$unzLocateFile DD 021H
	DD	imagerel $LN17+43
	DD	imagerel $LN17+116
	DD	imagerel $chain$0$unzLocateFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$unzLocateFile DD 063821H
	DD	034e438H
	DD	035d417H
	DD	03cc408H
	DD	imagerel $LN17+43
	DD	imagerel $LN17+116
	DD	imagerel $chain$0$unzLocateFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$unzLocateFile DD 020821H
	DD	03b7408H
	DD	imagerel $LN17
	DD	imagerel $LN17+43
	DD	imagerel $unwind$unzLocateFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzLocateFile DD 050b01H
	DD	036010bH
	DD	050036004H
	DD	03002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unzLocateFile
_TEXT	SEGMENT
cur_file_infoSaved$3$ = 64
cur_file_infoSaved$4$ = 80
cur_file_infoSaved$2$ = 96
cur_file_infoSaved$5$ = 112
cur_file_infoSaved$1$ = 128
szCurrentFileName$83483 = 144
cur_file_infoSaved$6$ = 464
file$ = 464
szFileName$ = 472
iCaseSensitivity$ = 480
unzLocateFile PROC					; COMDAT

; 1233 : {

$LN17:
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	56		 push	 rsi
  00004	48 81 ec b0 01
	00 00		 sub	 rsp, 432		; 000001b0H
  0000b	41 8b e8	 mov	 ebp, r8d
  0000e	48 8b f2	 mov	 rsi, rdx
  00011	48 8b d9	 mov	 rbx, rcx

; 1234 :     unz64_s* s;
; 1235 :     int err;
; 1236 : 
; 1237 :     /* We remember the 'current' position in the file so that we can jump
; 1238 :      * back there if we fail.
; 1239 :      */
; 1240 :     unz_file_info64 cur_file_infoSaved;
; 1241 :     unz_file_info64_internal cur_file_info_internalSaved;
; 1242 :     ZPOS64_T num_fileSaved;
; 1243 :     ZPOS64_T pos_in_central_dirSaved;
; 1244 : 
; 1245 : 
; 1246 :     if (file==NULL)

  00014	48 85 c9	 test	 rcx, rcx
  00017	75 0e		 jne	 SHORT $LN7@unzLocateF

; 1247 :         return UNZ_PARAMERROR;

  00019	8d 41 9a	 lea	 eax, QWORD PTR [rcx-102]

; 1286 :     return err;
; 1287 : }

  0001c	48 81 c4 b0 01
	00 00		 add	 rsp, 432		; 000001b0H
  00023	5e		 pop	 rsi
  00024	5d		 pop	 rbp
  00025	5b		 pop	 rbx
  00026	c3		 ret	 0
$LN7@unzLocateF:

; 1248 : 
; 1249 :     if (strlen(szFileName)>=UNZ_MAXFILENAMEINZIP)

  00027	48 83 c9 ff	 or	 rcx, -1
  0002b	48 89 bc 24 d8
	01 00 00	 mov	 QWORD PTR [rsp+472], rdi
  00033	33 c0		 xor	 eax, eax
  00035	48 8b fa	 mov	 rdi, rdx
  00038	f2 ae		 repne scasb
  0003a	48 f7 d1	 not	 rcx
  0003d	48 ff c9	 dec	 rcx
  00040	48 81 f9 00 01
	00 00		 cmp	 rcx, 256		; 00000100H
  00047	72 0a		 jb	 SHORT $LN6@unzLocateF

; 1250 :         return UNZ_PARAMERROR;

  00049	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0004e	e9 73 01 00 00	 jmp	 $LN13@unzLocateF
$LN6@unzLocateF:

; 1251 : 
; 1252 :     s=(unz64_s*)file;
; 1253 :     if (!s->current_file_ok)

  00053	48 39 83 90 00
	00 00		 cmp	 QWORD PTR [rbx+144], rax
  0005a	75 0a		 jne	 SHORT $LN5@unzLocateF

; 1254 :         return UNZ_END_OF_LIST_OF_FILE;

  0005c	b8 9c ff ff ff	 mov	 eax, -100		; ffffffffffffff9cH
  00061	e9 60 01 00 00	 jmp	 $LN13@unzLocateF
$LN5@unzLocateF:

; 1255 : 
; 1256 :     /* Save the current state */
; 1257 :     num_fileSaved = s->num_file;
; 1258 :     pos_in_central_dirSaved = s->pos_in_central_dir;
; 1259 :     cur_file_infoSaved = s->cur_file_info;

  00066	0f 10 83 b0 00
	00 00		 movups	 xmm0, XMMWORD PTR [rbx+176]

; 1260 :     cur_file_info_internalSaved = s->cur_file_info_internal;

  0006d	48 8b bb 08 01
	00 00		 mov	 rdi, QWORD PTR [rbx+264]
  00074	4c 89 a4 24 e0
	01 00 00	 mov	 QWORD PTR [rsp+480], r12
  0007c	4c 8b a3 80 00
	00 00		 mov	 r12, QWORD PTR [rbx+128]
  00083	4c 89 ac 24 a8
	01 00 00	 mov	 QWORD PTR [rsp+424], r13
  0008b	4c 8b ab 88 00
	00 00		 mov	 r13, QWORD PTR [rbx+136]
  00092	0f 11 84 24 80
	00 00 00	 movups	 XMMWORD PTR cur_file_infoSaved$1$[rsp], xmm0
  0009a	0f 10 83 c0 00
	00 00		 movups	 xmm0, XMMWORD PTR [rbx+192]

; 1261 : 
; 1262 :     err = unzGoToFirstFile(file);

  000a1	48 8b cb	 mov	 rcx, rbx
  000a4	4c 89 b4 24 a0
	01 00 00	 mov	 QWORD PTR [rsp+416], r14
  000ac	0f 11 44 24 60	 movups	 XMMWORD PTR cur_file_infoSaved$2$[rsp], xmm0
  000b1	0f 10 83 d0 00
	00 00		 movups	 xmm0, XMMWORD PTR [rbx+208]
  000b8	0f 11 44 24 40	 movups	 XMMWORD PTR cur_file_infoSaved$3$[rsp], xmm0
  000bd	0f 10 83 e0 00
	00 00		 movups	 xmm0, XMMWORD PTR [rbx+224]
  000c4	0f 11 44 24 50	 movups	 XMMWORD PTR cur_file_infoSaved$4$[rsp], xmm0
  000c9	0f 10 83 f0 00
	00 00		 movups	 xmm0, XMMWORD PTR [rbx+240]
  000d0	0f 11 44 24 70	 movups	 XMMWORD PTR cur_file_infoSaved$5$[rsp], xmm0
  000d5	f2 0f 10 83 00
	01 00 00	 movsdx	 xmm0, QWORD PTR [rbx+256]
  000dd	f2 0f 11 84 24
	d0 01 00 00	 movsdx	 QWORD PTR cur_file_infoSaved$6$[rsp], xmm0
  000e6	e8 00 00 00 00	 call	 unzGoToFirstFile

; 1263 : 
; 1264 :     while (err == UNZ_OK)

  000eb	85 c0		 test	 eax, eax
  000ed	75 5a		 jne	 SHORT $LN3@unzLocateF
  000ef	45 33 f6	 xor	 r14d, r14d
$LL4@unzLocateF:

; 1265 :     {
; 1266 :         char szCurrentFileName[UNZ_MAXFILENAMEINZIP+1];
; 1267 :         err = unzGetCurrentFileInfo64(file,NULL,
; 1268 :                                     szCurrentFileName,sizeof(szCurrentFileName)-1,
; 1269 :                                     NULL,0,NULL,0);

  000f2	44 89 74 24 38	 mov	 DWORD PTR [rsp+56], r14d
  000f7	4c 89 74 24 30	 mov	 QWORD PTR [rsp+48], r14
  000fc	4c 8d 84 24 90
	00 00 00	 lea	 r8, QWORD PTR szCurrentFileName$83483[rsp]
  00104	41 b9 00 01 00
	00		 mov	 r9d, 256		; 00000100H
  0010a	33 d2		 xor	 edx, edx
  0010c	48 8b cb	 mov	 rcx, rbx
  0010f	44 89 74 24 28	 mov	 DWORD PTR [rsp+40], r14d
  00114	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  00119	e8 00 00 00 00	 call	 unzGetCurrentFileInfo64

; 1270 :         if (err == UNZ_OK)

  0011e	85 c0		 test	 eax, eax
  00120	75 27		 jne	 SHORT $LN3@unzLocateF

; 1271 :         {
; 1272 :             if (unzStringFileNameCompare(szCurrentFileName,
; 1273 :                                             szFileName,iCaseSensitivity)==0)

  00122	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR szCurrentFileName$83483[rsp]
  0012a	44 8b c5	 mov	 r8d, ebp
  0012d	48 8b d6	 mov	 rdx, rsi
  00130	e8 00 00 00 00	 call	 unzStringFileNameCompare
  00135	85 c0		 test	 eax, eax
  00137	0f 84 9c 00 00
	00		 je	 $LN11@unzLocateF

; 1275 :             err = unzGoToNextFile(file);

  0013d	48 8b cb	 mov	 rcx, rbx
  00140	e8 00 00 00 00	 call	 unzGoToNextFile
  00145	85 c0		 test	 eax, eax
  00147	74 a9		 je	 SHORT $LL4@unzLocateF
$LN3@unzLocateF:

; 1276 :         }
; 1277 :     }
; 1278 : 
; 1279 :     /* We failed, so restore the state of the 'current file' to where we
; 1280 :      * were.
; 1281 :      */
; 1282 :     s->num_file = num_fileSaved ;
; 1283 :     s->pos_in_central_dir = pos_in_central_dirSaved ;
; 1284 :     s->cur_file_info = cur_file_infoSaved;

  00149	0f 10 84 24 80
	00 00 00	 movups	 xmm0, XMMWORD PTR cur_file_infoSaved$1$[rsp]
  00151	0f 10 4c 24 60	 movups	 xmm1, XMMWORD PTR cur_file_infoSaved$2$[rsp]
  00156	4c 89 a3 80 00
	00 00		 mov	 QWORD PTR [rbx+128], r12
  0015d	4c 89 ab 88 00
	00 00		 mov	 QWORD PTR [rbx+136], r13

; 1285 :     s->cur_file_info_internal = cur_file_info_internalSaved;

  00164	48 89 bb 08 01
	00 00		 mov	 QWORD PTR [rbx+264], rdi
  0016b	0f 11 83 b0 00
	00 00		 movups	 XMMWORD PTR [rbx+176], xmm0
  00172	0f 10 44 24 40	 movups	 xmm0, XMMWORD PTR cur_file_infoSaved$3$[rsp]
  00177	0f 11 8b c0 00
	00 00		 movups	 XMMWORD PTR [rbx+192], xmm1
  0017e	0f 10 4c 24 50	 movups	 xmm1, XMMWORD PTR cur_file_infoSaved$4$[rsp]
  00183	0f 11 83 d0 00
	00 00		 movups	 XMMWORD PTR [rbx+208], xmm0
  0018a	0f 10 44 24 70	 movups	 xmm0, XMMWORD PTR cur_file_infoSaved$5$[rsp]
  0018f	0f 11 8b e0 00
	00 00		 movups	 XMMWORD PTR [rbx+224], xmm1
  00196	0f 11 83 f0 00
	00 00		 movups	 XMMWORD PTR [rbx+240], xmm0
  0019d	f2 0f 10 84 24
	d0 01 00 00	 movsdx	 xmm0, QWORD PTR cur_file_infoSaved$6$[rsp]
  001a6	f2 0f 11 83 00
	01 00 00	 movsdx	 QWORD PTR [rbx+256], xmm0
$LN16@unzLocateF:
  001ae	4c 8b ac 24 a8
	01 00 00	 mov	 r13, QWORD PTR [rsp+424]
  001b6	4c 8b a4 24 e0
	01 00 00	 mov	 r12, QWORD PTR [rsp+480]
  001be	4c 8b b4 24 a0
	01 00 00	 mov	 r14, QWORD PTR [rsp+416]
$LN13@unzLocateF:
  001c6	48 8b bc 24 d8
	01 00 00	 mov	 rdi, QWORD PTR [rsp+472]

; 1286 :     return err;
; 1287 : }

  001ce	48 81 c4 b0 01
	00 00		 add	 rsp, 432		; 000001b0H
  001d5	5e		 pop	 rsi
  001d6	5d		 pop	 rbp
  001d7	5b		 pop	 rbx
  001d8	c3		 ret	 0
$LN11@unzLocateF:

; 1274 :                 return UNZ_OK;

  001d9	33 c0		 xor	 eax, eax
  001db	eb d1		 jmp	 SHORT $LN16@unzLocateF
unzLocateFile ENDP
_TEXT	ENDS
PUBLIC	unzOpen64
; Function compile flags: /Ogtpy
;	COMDAT unzOpen64
_TEXT	SEGMENT
path$ = 8
unzOpen64 PROC						; COMDAT

; 800  :     return unzOpenInternal(path, NULL, 1);

  00000	33 d2		 xor	 edx, edx
  00002	44 8d 42 01	 lea	 r8d, QWORD PTR [rdx+1]

; 801  : }

  00006	e9 00 00 00 00	 jmp	 unzOpenInternal
unzOpen64 ENDP
_TEXT	ENDS
PUBLIC	unzOpen
; Function compile flags: /Ogtpy
;	COMDAT unzOpen
_TEXT	SEGMENT
path$ = 8
unzOpen	PROC						; COMDAT

; 795  :     return unzOpenInternal(path, NULL, 0);

  00000	45 33 c0	 xor	 r8d, r8d
  00003	33 d2		 xor	 edx, edx

; 796  : }

  00005	e9 00 00 00 00	 jmp	 unzOpenInternal
unzOpen	ENDP
_TEXT	ENDS
PUBLIC	unzOpen2_64
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpen2_64 DD imagerel $LN6
	DD	imagerel $LN6+96
	DD	imagerel $unwind$unzOpen2_64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpen2_64 DD 020701H
	DD	0110107H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unzOpen2_64
_TEXT	SEGMENT
zlib_filefunc64_32_def_fill$83212 = 32
path$ = 144
pzlib_filefunc_def$ = 152
unzOpen2_64 PROC					; COMDAT

; 780  : {

$LN6:
  00000	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 787  :         return unzOpenInternal(path, &zlib_filefunc64_32_def_fill, 1);

  00007	41 b8 01 00 00
	00		 mov	 r8d, 1
  0000d	48 85 d2	 test	 rdx, rdx
  00010	74 41		 je	 SHORT $LN2@unzOpen2_6

; 781  :     if (pzlib_filefunc_def != NULL)
; 782  :     {
; 783  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 784  :         zlib_filefunc64_32_def_fill.zfile_func64 = *pzlib_filefunc_def;

  00012	0f 10 02	 movups	 xmm0, XMMWORD PTR [rdx]
  00015	0f 10 4a 10	 movups	 xmm1, XMMWORD PTR [rdx+16]

; 785  :         zlib_filefunc64_32_def_fill.ztell32_file = NULL;

  00019	33 c0		 xor	 eax, eax
  0001b	48 89 44 24 68	 mov	 QWORD PTR zlib_filefunc64_32_def_fill$83212[rsp+72], rax

; 786  :         zlib_filefunc64_32_def_fill.zseek32_file = NULL;

  00020	48 89 44 24 70	 mov	 QWORD PTR zlib_filefunc64_32_def_fill$83212[rsp+80], rax
  00025	0f 29 44 24 20	 movaps	 XMMWORD PTR zlib_filefunc64_32_def_fill$83212[rsp], xmm0
  0002a	0f 29 4c 24 30	 movaps	 XMMWORD PTR zlib_filefunc64_32_def_fill$83212[rsp+16], xmm1
  0002f	0f 10 42 20	 movups	 xmm0, XMMWORD PTR [rdx+32]
  00033	0f 10 4a 30	 movups	 xmm1, XMMWORD PTR [rdx+48]

; 787  :         return unzOpenInternal(path, &zlib_filefunc64_32_def_fill, 1);

  00037	48 8d 54 24 20	 lea	 rdx, QWORD PTR zlib_filefunc64_32_def_fill$83212[rsp]
  0003c	0f 29 44 24 40	 movaps	 XMMWORD PTR zlib_filefunc64_32_def_fill$83212[rsp+32], xmm0
  00041	0f 29 4c 24 50	 movaps	 XMMWORD PTR zlib_filefunc64_32_def_fill$83212[rsp+48], xmm1

; 788  :     }
; 789  :     else
; 790  :         return unzOpenInternal(path, NULL, 1);

  00046	e8 00 00 00 00	 call	 unzOpenInternal

; 791  : }

  0004b	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00052	c3		 ret	 0
$LN2@unzOpen2_6:

; 788  :     }
; 789  :     else
; 790  :         return unzOpenInternal(path, NULL, 1);

  00053	e8 00 00 00 00	 call	 unzOpenInternal

; 791  : }

  00058	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0005f	c3		 ret	 0
unzOpen2_64 ENDP
_TEXT	ENDS
PUBLIC	unzOpen2
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpen2 DD imagerel $LN6
	DD	imagerel $LN6+65
	DD	imagerel $unwind$unzOpen2
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpen2 DD 020701H
	DD	0110107H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unzOpen2
_TEXT	SEGMENT
zlib_filefunc64_32_def_fill$83202 = 32
path$ = 144
pzlib_filefunc32_def$ = 152
unzOpen2 PROC						; COMDAT

; 767  : {

$LN6:
  00000	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
  00007	4c 8b c9	 mov	 r9, rcx

; 768  :     if (pzlib_filefunc32_def != NULL)

  0000a	48 85 d2	 test	 rdx, rdx
  0000d	74 22		 je	 SHORT $LN2@unzOpen2

; 769  :     {
; 770  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 771  :         fill_zlib_filefunc64_32_def_from_filefunc32(&zlib_filefunc64_32_def_fill,pzlib_filefunc32_def);

  0000f	48 8d 4c 24 20	 lea	 rcx, QWORD PTR zlib_filefunc64_32_def_fill$83202[rsp]
  00014	e8 00 00 00 00	 call	 fill_zlib_filefunc64_32_def_from_filefunc32

; 772  :         return unzOpenInternal(path, &zlib_filefunc64_32_def_fill, 0);

  00019	48 8d 54 24 20	 lea	 rdx, QWORD PTR zlib_filefunc64_32_def_fill$83202[rsp]
  0001e	49 8b c9	 mov	 rcx, r9

; 773  :     }
; 774  :     else
; 775  :         return unzOpenInternal(path, NULL, 0);

  00021	45 33 c0	 xor	 r8d, r8d
  00024	e8 00 00 00 00	 call	 unzOpenInternal

; 776  : }

  00029	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00030	c3		 ret	 0
$LN2@unzOpen2:

; 773  :     }
; 774  :     else
; 775  :         return unzOpenInternal(path, NULL, 0);

  00031	45 33 c0	 xor	 r8d, r8d
  00034	e8 00 00 00 00	 call	 unzOpenInternal

; 776  : }

  00039	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00040	c3		 ret	 0
unzOpen2 ENDP
PUBLIC	unzOpenCurrentFile2
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpenCurrentFile2 DD imagerel $LN3
	DD	imagerel $LN3+23
	DD	imagerel $unwind$unzOpenCurrentFile2
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpenCurrentFile2 DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unzOpenCurrentFile2
_TEXT	SEGMENT
file$ = 64
method$ = 72
level$ = 80
raw$ = 88
unzOpenCurrentFile2 PROC				; COMDAT

; 1652 : {

$LN3:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1653 :     return unzOpenCurrentFile3(file, method, level, raw, NULL);

  00004	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0000d	e8 00 00 00 00	 call	 unzOpenCurrentFile3

; 1654 : }

  00012	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00016	c3		 ret	 0
unzOpenCurrentFile2 ENDP
_TEXT	ENDS
PUBLIC	unzOpenCurrentFilePassword
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpenCurrentFilePassword DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$unzOpenCurrentFilePassword
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpenCurrentFilePassword DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unzOpenCurrentFilePassword
_TEXT	SEGMENT
file$ = 64
password$ = 72
unzOpenCurrentFilePassword PROC				; COMDAT

; 1647 : {

$LN3:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1648 :     return unzOpenCurrentFile3(file, NULL, NULL, 0, password);

  00004	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  00009	45 33 c9	 xor	 r9d, r9d
  0000c	45 33 c0	 xor	 r8d, r8d
  0000f	33 d2		 xor	 edx, edx
  00011	e8 00 00 00 00	 call	 unzOpenCurrentFile3

; 1649 : }

  00016	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0001a	c3		 ret	 0
unzOpenCurrentFilePassword ENDP
_TEXT	ENDS
PUBLIC	unzOpenCurrentFile
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpenCurrentFile DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$unzOpenCurrentFile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpenCurrentFile DD 010401H
	DD	06204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT unzOpenCurrentFile
_TEXT	SEGMENT
file$ = 64
unzOpenCurrentFile PROC					; COMDAT

; 1642 : {

$LN3:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1643 :     return unzOpenCurrentFile3(file, NULL, NULL, 0, NULL);

  00004	45 33 c9	 xor	 r9d, r9d
  00007	45 33 c0	 xor	 r8d, r8d
  0000a	33 d2		 xor	 edx, edx
  0000c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00015	e8 00 00 00 00	 call	 unzOpenCurrentFile3

; 1644 : }

  0001a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0001e	c3		 ret	 0
unzOpenCurrentFile ENDP
END

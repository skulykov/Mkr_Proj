; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	_dist_code
PUBLIC	_length_code
static_l_desc DQ FLAT:static_ltree
	DQ	FLAT:extra_lbits
	DD	0101H
	DD	011eH
	DD	0fH
	ORG $+4
static_d_desc DQ FLAT:static_dtree
	DQ	FLAT:extra_dbits
	DD	00H
	DD	01eH
	DD	0fH
	ORG $+4
static_bl_desc DQ 0000000000000000H
	DQ	FLAT:extra_blbits
	DD	00H
	DD	013H
	DD	07H
	ORG $+4
	ORG $+7
bl_order DB	010H
	DB	011H
	DB	012H
	DB	00H
	DB	08H
	DB	07H
	DB	09H
	DB	06H
	DB	0aH
	DB	05H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	0dH
	DB	02H
	DB	0eH
	DB	01H
	DB	0fH
	ORG $+5
extra_lbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	00H
	ORG $+6
extra_dbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
	ORG $+2
extra_blbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	03H
	DD	07H
	ORG $+4
static_ltree DW	0cH
	DW	08H
	DW	08cH
	DW	08H
	DW	04cH
	DW	08H
	DW	0ccH
	DW	08H
	DW	02cH
	DW	08H
	DW	0acH
	DW	08H
	DW	06cH
	DW	08H
	DW	0ecH
	DW	08H
	DW	01cH
	DW	08H
	DW	09cH
	DW	08H
	DW	05cH
	DW	08H
	DW	0dcH
	DW	08H
	DW	03cH
	DW	08H
	DW	0bcH
	DW	08H
	DW	07cH
	DW	08H
	DW	0fcH
	DW	08H
	DW	02H
	DW	08H
	DW	082H
	DW	08H
	DW	042H
	DW	08H
	DW	0c2H
	DW	08H
	DW	022H
	DW	08H
	DW	0a2H
	DW	08H
	DW	062H
	DW	08H
	DW	0e2H
	DW	08H
	DW	012H
	DW	08H
	DW	092H
	DW	08H
	DW	052H
	DW	08H
	DW	0d2H
	DW	08H
	DW	032H
	DW	08H
	DW	0b2H
	DW	08H
	DW	072H
	DW	08H
	DW	0f2H
	DW	08H
	DW	0aH
	DW	08H
	DW	08aH
	DW	08H
	DW	04aH
	DW	08H
	DW	0caH
	DW	08H
	DW	02aH
	DW	08H
	DW	0aaH
	DW	08H
	DW	06aH
	DW	08H
	DW	0eaH
	DW	08H
	DW	01aH
	DW	08H
	DW	09aH
	DW	08H
	DW	05aH
	DW	08H
	DW	0daH
	DW	08H
	DW	03aH
	DW	08H
	DW	0baH
	DW	08H
	DW	07aH
	DW	08H
	DW	0faH
	DW	08H
	DW	06H
	DW	08H
	DW	086H
	DW	08H
	DW	046H
	DW	08H
	DW	0c6H
	DW	08H
	DW	026H
	DW	08H
	DW	0a6H
	DW	08H
	DW	066H
	DW	08H
	DW	0e6H
	DW	08H
	DW	016H
	DW	08H
	DW	096H
	DW	08H
	DW	056H
	DW	08H
	DW	0d6H
	DW	08H
	DW	036H
	DW	08H
	DW	0b6H
	DW	08H
	DW	076H
	DW	08H
	DW	0f6H
	DW	08H
	DW	0eH
	DW	08H
	DW	08eH
	DW	08H
	DW	04eH
	DW	08H
	DW	0ceH
	DW	08H
	DW	02eH
	DW	08H
	DW	0aeH
	DW	08H
	DW	06eH
	DW	08H
	DW	0eeH
	DW	08H
	DW	01eH
	DW	08H
	DW	09eH
	DW	08H
	DW	05eH
	DW	08H
	DW	0deH
	DW	08H
	DW	03eH
	DW	08H
	DW	0beH
	DW	08H
	DW	07eH
	DW	08H
	DW	0feH
	DW	08H
	DW	01H
	DW	08H
	DW	081H
	DW	08H
	DW	041H
	DW	08H
	DW	0c1H
	DW	08H
	DW	021H
	DW	08H
	DW	0a1H
	DW	08H
	DW	061H
	DW	08H
	DW	0e1H
	DW	08H
	DW	011H
	DW	08H
	DW	091H
	DW	08H
	DW	051H
	DW	08H
	DW	0d1H
	DW	08H
	DW	031H
	DW	08H
	DW	0b1H
	DW	08H
	DW	071H
	DW	08H
	DW	0f1H
	DW	08H
	DW	09H
	DW	08H
	DW	089H
	DW	08H
	DW	049H
	DW	08H
	DW	0c9H
	DW	08H
	DW	029H
	DW	08H
	DW	0a9H
	DW	08H
	DW	069H
	DW	08H
	DW	0e9H
	DW	08H
	DW	019H
	DW	08H
	DW	099H
	DW	08H
	DW	059H
	DW	08H
	DW	0d9H
	DW	08H
	DW	039H
	DW	08H
	DW	0b9H
	DW	08H
	DW	079H
	DW	08H
	DW	0f9H
	DW	08H
	DW	05H
	DW	08H
	DW	085H
	DW	08H
	DW	045H
	DW	08H
	DW	0c5H
	DW	08H
	DW	025H
	DW	08H
	DW	0a5H
	DW	08H
	DW	065H
	DW	08H
	DW	0e5H
	DW	08H
	DW	015H
	DW	08H
	DW	095H
	DW	08H
	DW	055H
	DW	08H
	DW	0d5H
	DW	08H
	DW	035H
	DW	08H
	DW	0b5H
	DW	08H
	DW	075H
	DW	08H
	DW	0f5H
	DW	08H
	DW	0dH
	DW	08H
	DW	08dH
	DW	08H
	DW	04dH
	DW	08H
	DW	0cdH
	DW	08H
	DW	02dH
	DW	08H
	DW	0adH
	DW	08H
	DW	06dH
	DW	08H
	DW	0edH
	DW	08H
	DW	01dH
	DW	08H
	DW	09dH
	DW	08H
	DW	05dH
	DW	08H
	DW	0ddH
	DW	08H
	DW	03dH
	DW	08H
	DW	0bdH
	DW	08H
	DW	07dH
	DW	08H
	DW	0fdH
	DW	08H
	DW	013H
	DW	09H
	DW	0113H
	DW	09H
	DW	093H
	DW	09H
	DW	0193H
	DW	09H
	DW	053H
	DW	09H
	DW	0153H
	DW	09H
	DW	0d3H
	DW	09H
	DW	01d3H
	DW	09H
	DW	033H
	DW	09H
	DW	0133H
	DW	09H
	DW	0b3H
	DW	09H
	DW	01b3H
	DW	09H
	DW	073H
	DW	09H
	DW	0173H
	DW	09H
	DW	0f3H
	DW	09H
	DW	01f3H
	DW	09H
	DW	0bH
	DW	09H
	DW	010bH
	DW	09H
	DW	08bH
	DW	09H
	DW	018bH
	DW	09H
	DW	04bH
	DW	09H
	DW	014bH
	DW	09H
	DW	0cbH
	DW	09H
	DW	01cbH
	DW	09H
	DW	02bH
	DW	09H
	DW	012bH
	DW	09H
	DW	0abH
	DW	09H
	DW	01abH
	DW	09H
	DW	06bH
	DW	09H
	DW	016bH
	DW	09H
	DW	0ebH
	DW	09H
	DW	01ebH
	DW	09H
	DW	01bH
	DW	09H
	DW	011bH
	DW	09H
	DW	09bH
	DW	09H
	DW	019bH
	DW	09H
	DW	05bH
	DW	09H
	DW	015bH
	DW	09H
	DW	0dbH
	DW	09H
	DW	01dbH
	DW	09H
	DW	03bH
	DW	09H
	DW	013bH
	DW	09H
	DW	0bbH
	DW	09H
	DW	01bbH
	DW	09H
	DW	07bH
	DW	09H
	DW	017bH
	DW	09H
	DW	0fbH
	DW	09H
	DW	01fbH
	DW	09H
	DW	07H
	DW	09H
	DW	0107H
	DW	09H
	DW	087H
	DW	09H
	DW	0187H
	DW	09H
	DW	047H
	DW	09H
	DW	0147H
	DW	09H
	DW	0c7H
	DW	09H
	DW	01c7H
	DW	09H
	DW	027H
	DW	09H
	DW	0127H
	DW	09H
	DW	0a7H
	DW	09H
	DW	01a7H
	DW	09H
	DW	067H
	DW	09H
	DW	0167H
	DW	09H
	DW	0e7H
	DW	09H
	DW	01e7H
	DW	09H
	DW	017H
	DW	09H
	DW	0117H
	DW	09H
	DW	097H
	DW	09H
	DW	0197H
	DW	09H
	DW	057H
	DW	09H
	DW	0157H
	DW	09H
	DW	0d7H
	DW	09H
	DW	01d7H
	DW	09H
	DW	037H
	DW	09H
	DW	0137H
	DW	09H
	DW	0b7H
	DW	09H
	DW	01b7H
	DW	09H
	DW	077H
	DW	09H
	DW	0177H
	DW	09H
	DW	0f7H
	DW	09H
	DW	01f7H
	DW	09H
	DW	0fH
	DW	09H
	DW	010fH
	DW	09H
	DW	08fH
	DW	09H
	DW	018fH
	DW	09H
	DW	04fH
	DW	09H
	DW	014fH
	DW	09H
	DW	0cfH
	DW	09H
	DW	01cfH
	DW	09H
	DW	02fH
	DW	09H
	DW	012fH
	DW	09H
	DW	0afH
	DW	09H
	DW	01afH
	DW	09H
	DW	06fH
	DW	09H
	DW	016fH
	DW	09H
	DW	0efH
	DW	09H
	DW	01efH
	DW	09H
	DW	01fH
	DW	09H
	DW	011fH
	DW	09H
	DW	09fH
	DW	09H
	DW	019fH
	DW	09H
	DW	05fH
	DW	09H
	DW	015fH
	DW	09H
	DW	0dfH
	DW	09H
	DW	01dfH
	DW	09H
	DW	03fH
	DW	09H
	DW	013fH
	DW	09H
	DW	0bfH
	DW	09H
	DW	01bfH
	DW	09H
	DW	07fH
	DW	09H
	DW	017fH
	DW	09H
	DW	0ffH
	DW	09H
	DW	01ffH
	DW	09H
	DW	00H
	DW	07H
	DW	040H
	DW	07H
	DW	020H
	DW	07H
	DW	060H
	DW	07H
	DW	010H
	DW	07H
	DW	050H
	DW	07H
	DW	030H
	DW	07H
	DW	070H
	DW	07H
	DW	08H
	DW	07H
	DW	048H
	DW	07H
	DW	028H
	DW	07H
	DW	068H
	DW	07H
	DW	018H
	DW	07H
	DW	058H
	DW	07H
	DW	038H
	DW	07H
	DW	078H
	DW	07H
	DW	04H
	DW	07H
	DW	044H
	DW	07H
	DW	024H
	DW	07H
	DW	064H
	DW	07H
	DW	014H
	DW	07H
	DW	054H
	DW	07H
	DW	034H
	DW	07H
	DW	074H
	DW	07H
	DW	03H
	DW	08H
	DW	083H
	DW	08H
	DW	043H
	DW	08H
	DW	0c3H
	DW	08H
	DW	023H
	DW	08H
	DW	0a3H
	DW	08H
	DW	063H
	DW	08H
	DW	0e3H
	DW	08H
static_dtree DW	00H
	DW	05H
	DW	010H
	DW	05H
	DW	08H
	DW	05H
	DW	018H
	DW	05H
	DW	04H
	DW	05H
	DW	014H
	DW	05H
	DW	0cH
	DW	05H
	DW	01cH
	DW	05H
	DW	02H
	DW	05H
	DW	012H
	DW	05H
	DW	0aH
	DW	05H
	DW	01aH
	DW	05H
	DW	06H
	DW	05H
	DW	016H
	DW	05H
	DW	0eH
	DW	05H
	DW	01eH
	DW	05H
	DW	01H
	DW	05H
	DW	011H
	DW	05H
	DW	09H
	DW	05H
	DW	019H
	DW	05H
	DW	05H
	DW	05H
	DW	015H
	DW	05H
	DW	0dH
	DW	05H
	DW	01dH
	DW	05H
	DW	03H
	DW	05H
	DW	013H
	DW	05H
	DW	0bH
	DW	05H
	DW	01bH
	DW	05H
	DW	07H
	DW	05H
	DW	017H
	DW	05H
	ORG $+2
_dist_code DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	00H
	DB	00H
	DB	010H
	DB	011H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
_length_code DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
base_length DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	0aH
	DD	0cH
	DD	0eH
	DD	010H
	DD	014H
	DD	018H
	DD	01cH
	DD	020H
	DD	028H
	DD	030H
	DD	038H
	DD	040H
	DD	050H
	DD	060H
	DD	070H
	DD	080H
	DD	0a0H
	DD	0c0H
	DD	0e0H
	DD	00H
	ORG $+12
base_dist DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	06H
	DD	08H
	DD	0cH
	DD	010H
	DD	018H
	DD	020H
	DD	030H
	DD	040H
	DD	060H
	DD	080H
	DD	0c0H
	DD	0100H
	DD	0180H
	DD	0200H
	DD	0300H
	DD	0400H
	DD	0600H
	DD	0800H
	DD	0c00H
	DD	01000H
	DD	01800H
	DD	02000H
	DD	03000H
	DD	04000H
	DD	06000H
; Function compile flags: /Ogtpy
; File c:\my\gis\extlibs\zlib\trees.c
;	COMDAT bi_windup
_TEXT	SEGMENT
s$ = 8
bi_windup PROC						; COMDAT

; 1187 :     if (s->bi_valid > 8) {

  00000	8b 81 14 17 00
	00		 mov	 eax, DWORD PTR [rcx+5908]
  00006	4c 8b c9	 mov	 r9, rcx
  00009	83 f8 08	 cmp	 eax, 8
  0000c	7e 1f		 jle	 SHORT $LN3@bi_windup

; 1188 :         put_short(s, s->bi_buf);

  0000e	44 8b 41 28	 mov	 r8d, DWORD PTR [rcx+40]
  00012	0f b6 81 10 17
	00 00		 movzx	 eax, BYTE PTR [rcx+5904]
  00019	48 8b 51 10	 mov	 rdx, QWORD PTR [rcx+16]
  0001d	41 88 04 10	 mov	 BYTE PTR [r8+rdx], al
  00021	ff 41 28	 inc	 DWORD PTR [rcx+40]
  00024	0f b6 81 11 17
	00 00		 movzx	 eax, BYTE PTR [rcx+5905]
  0002b	eb 0c		 jmp	 SHORT $LN6@bi_windup
$LN3@bi_windup:

; 1189 :     } else if (s->bi_valid > 0) {

  0002d	85 c0		 test	 eax, eax
  0002f	7e 16		 jle	 SHORT $LN1@bi_windup

; 1190 :         put_byte(s, (Byte)s->bi_buf);

  00031	41 0f b6 81 10
	17 00 00	 movzx	 eax, BYTE PTR [r9+5904]
$LN6@bi_windup:
  00039	8b 51 28	 mov	 edx, DWORD PTR [rcx+40]
  0003c	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00040	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00043	41 ff 41 28	 inc	 DWORD PTR [r9+40]
$LN1@bi_windup:

; 1191 :     }
; 1192 :     s->bi_buf = 0;

  00047	33 c0		 xor	 eax, eax
  00049	66 41 89 81 10
	17 00 00	 mov	 WORD PTR [r9+5904], ax

; 1193 :     s->bi_valid = 0;

  00051	41 89 81 14 17
	00 00		 mov	 DWORD PTR [r9+5908], eax

; 1194 : #ifdef DEBUG
; 1195 :     s->bits_sent = (s->bits_sent+7) & ~7;
; 1196 : #endif
; 1197 : }

  00058	c3		 ret	 0
bi_windup ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT bi_flush
_TEXT	SEGMENT
s$ = 8
bi_flush PROC						; COMDAT

; 1170 :     if (s->bi_valid == 16) {

  00000	8b 81 14 17 00
	00		 mov	 eax, DWORD PTR [rcx+5908]
  00006	4c 8b c9	 mov	 r9, rcx
  00009	83 f8 10	 cmp	 eax, 16
  0000c	75 3e		 jne	 SHORT $LN3@bi_flush

; 1171 :         put_short(s, s->bi_buf);

  0000e	0f b6 81 10 17
	00 00		 movzx	 eax, BYTE PTR [rcx+5904]
  00015	44 8b 41 28	 mov	 r8d, DWORD PTR [rcx+40]
  00019	48 8b 51 10	 mov	 rdx, QWORD PTR [rcx+16]
  0001d	41 88 04 10	 mov	 BYTE PTR [r8+rdx], al
  00021	ff 41 28	 inc	 DWORD PTR [rcx+40]
  00024	8b 51 28	 mov	 edx, DWORD PTR [rcx+40]
  00027	41 0f b6 81 11
	17 00 00	 movzx	 eax, BYTE PTR [r9+5905]
  0002f	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00033	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00036	41 ff 41 28	 inc	 DWORD PTR [r9+40]

; 1172 :         s->bi_buf = 0;

  0003a	33 c0		 xor	 eax, eax

; 1173 :         s->bi_valid = 0;

  0003c	41 89 81 14 17
	00 00		 mov	 DWORD PTR [r9+5908], eax

; 1176 :         s->bi_buf >>= 8;

  00043	66 41 89 81 10
	17 00 00	 mov	 WORD PTR [r9+5904], ax

; 1178 :     }
; 1179 : }

  0004b	c3		 ret	 0
$LN3@bi_flush:

; 1174 :     } else if (s->bi_valid >= 8) {

  0004c	83 f8 08	 cmp	 eax, 8
  0004f	7c 2e		 jl	 SHORT $LN1@bi_flush

; 1175 :         put_byte(s, (Byte)s->bi_buf);

  00051	8b 51 28	 mov	 edx, DWORD PTR [rcx+40]
  00054	41 0f b6 81 10
	17 00 00	 movzx	 eax, BYTE PTR [r9+5904]
  0005c	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00060	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 1176 :         s->bi_buf >>= 8;

  00063	41 0f b6 81 11
	17 00 00	 movzx	 eax, BYTE PTR [r9+5905]
  0006b	41 ff 41 28	 inc	 DWORD PTR [r9+40]

; 1177 :         s->bi_valid -= 8;

  0006f	41 83 81 14 17
	00 00 f8	 add	 DWORD PTR [r9+5908], -8
  00077	66 41 89 81 10
	17 00 00	 mov	 WORD PTR [r9+5904], ax
$LN1@bi_flush:

; 1178 :     }
; 1179 : }

  0007f	f3 c3		 fatret	 0
bi_flush ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT bi_reverse
_TEXT	SEGMENT
code$ = 8
len$ = 16
bi_reverse PROC						; COMDAT

; 1156 :     register unsigned res = 0;

  00000	33 c0		 xor	 eax, eax
$LL3@bi_reverse:

; 1157 :     do {
; 1158 :         res |= code & 1;

  00002	44 8b c1	 mov	 r8d, ecx

; 1159 :         code >>= 1, res <<= 1;
; 1160 :     } while (--len > 0);

  00005	ff ca		 dec	 edx
  00007	d1 e9		 shr	 ecx, 1
  00009	41 83 e0 01	 and	 r8d, 1
  0000d	41 0b c0	 or	 eax, r8d
  00010	03 c0		 add	 eax, eax
  00012	85 d2		 test	 edx, edx
  00014	7f ec		 jg	 SHORT $LL3@bi_reverse

; 1161 :     return res >> 1;

  00016	d1 e8		 shr	 eax, 1

; 1162 : }

  00018	c3		 ret	 0
bi_reverse ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT detect_data_type
_TEXT	SEGMENT
s$ = 8
detect_data_type PROC					; COMDAT

; 1120 : {

  00000	4c 8b c9	 mov	 r9, rcx
  00003	33 d2		 xor	 edx, edx

; 1121 :     /* black_mask is the bit mask of black-listed bytes
; 1122 :      * set bits 0..6, 14..25, and 28..31
; 1123 :      * 0xf3ffc07f = binary 11110011111111111100000001111111
; 1124 :      */
; 1125 :     unsigned long black_mask = 0xf3ffc07fUL;

  00005	41 b8 7f c0 ff
	f3		 mov	 r8d, -201342849		; f3ffc07fH
  0000b	48 8d 81 bc 00
	00 00		 lea	 rax, QWORD PTR [rcx+188]
$LL10@detect_dat:

; 1130 :         if ((black_mask & 1) && (s->dyn_ltree[n].Freq != 0))

  00012	41 f6 c0 01	 test	 r8b, 1
  00016	74 06		 je	 SHORT $LN9@detect_dat
  00018	66 83 38 00	 cmp	 WORD PTR [rax], 0
  0001c	75 50		 jne	 SHORT $LN15@detect_dat
$LN9@detect_dat:

; 1126 :     int n;
; 1127 : 
; 1128 :     /* Check for non-textual ("black-listed") bytes. */
; 1129 :     for (n = 0; n <= 31; n++, black_mask >>= 1)

  0001e	48 ff c2	 inc	 rdx
  00021	48 83 c0 04	 add	 rax, 4
  00025	41 d1 e8	 shr	 r8d, 1
  00028	48 83 fa 1f	 cmp	 rdx, 31
  0002c	7e e4		 jle	 SHORT $LL10@detect_dat

; 1131 :             return Z_BINARY;
; 1132 : 
; 1133 :     /* Check for textual ("white-listed") bytes. */
; 1134 :     if (s->dyn_ltree[9].Freq != 0 || s->dyn_ltree[10].Freq != 0
; 1135 :             || s->dyn_ltree[13].Freq != 0)

  0002e	66 83 b9 e0 00
	00 00 00	 cmp	 WORD PTR [rcx+224], 0
  00036	75 39		 jne	 SHORT $LN5@detect_dat
  00038	66 83 b9 e4 00
	00 00 00	 cmp	 WORD PTR [rcx+228], 0
  00040	75 2f		 jne	 SHORT $LN5@detect_dat
  00042	66 83 b9 f0 00
	00 00 00	 cmp	 WORD PTR [rcx+240], 0
  0004a	75 25		 jne	 SHORT $LN5@detect_dat
  0004c	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00051	49 8d 81 3c 01
	00 00		 lea	 rax, QWORD PTR [r9+316]
$LL4@detect_dat:

; 1138 :         if (s->dyn_ltree[n].Freq != 0)

  00058	66 83 38 00	 cmp	 WORD PTR [rax], 0
  0005c	75 13		 jne	 SHORT $LN5@detect_dat

; 1137 :     for (n = 32; n < LITERALS; n++)

  0005e	48 ff c1	 inc	 rcx
  00061	48 83 c0 04	 add	 rax, 4
  00065	48 81 f9 00 01
	00 00		 cmp	 rcx, 256		; 00000100H
  0006c	7c ea		 jl	 SHORT $LL4@detect_dat
$LN15@detect_dat:

; 1139 :             return Z_TEXT;
; 1140 : 
; 1141 :     /* There are no "black-listed" or "white-listed" bytes:
; 1142 :      * this stream either is empty or has tolerated ("gray-listed") bytes only.
; 1143 :      */
; 1144 :     return Z_BINARY;

  0006e	33 c0		 xor	 eax, eax

; 1145 : }

  00070	c3		 ret	 0
$LN5@detect_dat:

; 1136 :         return Z_TEXT;

  00071	b8 01 00 00 00	 mov	 eax, 1

; 1145 : }

  00076	c3		 ret	 0
detect_data_type ENDP
_TEXT	ENDS
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$compress_block DD imagerel compress_block
	DD	imagerel compress_block+7
	DD	imagerel $unwind$compress_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$compress_block DD imagerel compress_block+7
	DD	imagerel compress_block+47
	DD	imagerel $chain$1$compress_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$compress_block DD imagerel compress_block+47
	DD	imagerel compress_block+942
	DD	imagerel $chain$5$compress_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$compress_block DD imagerel compress_block+942
	DD	imagerel compress_block+976
	DD	imagerel $chain$6$compress_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$compress_block DD imagerel compress_block+976
	DD	imagerel compress_block+1126
	DD	imagerel $chain$7$compress_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$compress_block DD 021H
	DD	imagerel compress_block
	DD	imagerel compress_block+7
	DD	imagerel $unwind$compress_block
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$compress_block DD 021H
	DD	imagerel compress_block+7
	DD	imagerel compress_block+47
	DD	imagerel $chain$1$compress_block
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$compress_block DD 081321H
	DD	077413H
	DD	06540eH
	DD	0f409H
	DD	02d405H
	DD	imagerel compress_block+7
	DD	imagerel compress_block+47
	DD	imagerel $chain$1$compress_block
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$compress_block DD 040d21H
	DD	01e40dH
	DD	08c405H
	DD	imagerel compress_block
	DD	imagerel compress_block+7
	DD	imagerel $unwind$compress_block
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compress_block DD 030701H
	DD	060032207H
	DD	03002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT compress_block
_TEXT	SEGMENT
s$ = 48
ltree$ = 56
dtree$ = 64
compress_block PROC					; COMDAT

; 1062 : {

  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	48 83 ec 18	 sub	 rsp, 24
  00007	4c 89 64 24 40	 mov	 QWORD PTR [rsp+64], r12

; 1063 :     unsigned dist;      /* distance of matched string */
; 1064 :     int lc;             /* match length or unmatched char (if dist == 0) */
; 1065 :     unsigned lx = 0;    /* running index in l_buf */

  0000c	45 33 e4	 xor	 r12d, r12d
  0000f	4c 89 74 24 08	 mov	 QWORD PTR [rsp+8], r14
  00014	4d 8b f0	 mov	 r14, r8
  00017	48 8b f2	 mov	 rsi, rdx
  0001a	4c 8b d1	 mov	 r10, rcx

; 1066 :     unsigned code;      /* the code to send */
; 1067 :     int extra;          /* number of extra bits to send */
; 1068 : 
; 1069 :     if (s->last_lit != 0) do {

  0001d	41 8d 5c 24 10	 lea	 ebx, QWORD PTR [r12+16]
  00022	44 39 a1 f4 16
	00 00		 cmp	 DWORD PTR [rcx+5876], r12d
  00029	0f 84 7f 03 00
	00		 je	 $LN17@compress_b

; 1063 :     unsigned dist;      /* distance of matched string */
; 1064 :     int lc;             /* match length or unmatched char (if dist == 0) */
; 1065 :     unsigned lx = 0;    /* running index in l_buf */

  0002f	4c 89 6c 24 10	 mov	 QWORD PTR [rsp+16], r13
  00034	4c 89 3c 24	 mov	 QWORD PTR [rsp], r15
  00038	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  0003d	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  00042	45 8b ec	 mov	 r13d, r12d
  00045	4c 8d 3d 00 00
	00 00		 lea	 r15, OFFSET FLAT:__ImageBase
  0004c	0f 1f 40 00	 npad	 4
$LL19@compress_b:

; 1070 :         dist = s->d_buf[lx];

  00050	49 8b 82 f8 16
	00 00		 mov	 rax, QWORD PTR [r10+5880]

; 1071 :         lc = s->l_buf[lx++];

  00057	41 8b cc	 mov	 ecx, r12d
  0005a	49 83 c5 02	 add	 r13, 2
  0005e	45 0f b7 4c 05
	fe		 movzx	 r9d, WORD PTR [r13+rax-2]
  00064	49 8b 82 e8 16
	00 00		 mov	 rax, QWORD PTR [r10+5864]
  0006b	41 ff c4	 inc	 r12d
  0006e	44 0f b6 1c 01	 movzx	 r11d, BYTE PTR [rcx+rax]

; 1072 :         if (dist == 0) {
; 1073 :             send_code(s, lc, ltree); /* send a literal byte */

  00073	41 8b 8a 14 17
	00 00		 mov	 ecx, DWORD PTR [r10+5908]
  0007a	45 85 c9	 test	 r9d, r9d
  0007d	0f 85 8d 00 00
	00		 jne	 $LN16@compress_b
  00083	49 63 d3	 movsxd	 rdx, r11d
  00086	8b c3		 mov	 eax, ebx
  00088	44 0f b7 4c 96
	02		 movzx	 r9d, WORD PTR [rsi+rdx*4+2]
  0008e	41 2b c1	 sub	 eax, r9d
  00091	3b c8		 cmp	 ecx, eax
  00093	7e 63		 jle	 SHORT $LN15@compress_b
  00095	44 0f b7 04 96	 movzx	 r8d, WORD PTR [rsi+rdx*4]
  0009a	41 8b 52 28	 mov	 edx, DWORD PTR [r10+40]
  0009e	41 0f b7 c0	 movzx	 eax, r8w
  000a2	66 d3 e0	 shl	 ax, cl
  000a5	49 8b 4a 10	 mov	 rcx, QWORD PTR [r10+16]
  000a9	66 41 09 82 10
	17 00 00	 or	 WORD PTR [r10+5904], ax
  000b1	41 0f b6 82 10
	17 00 00	 movzx	 eax, BYTE PTR [r10+5904]
  000b9	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  000bc	41 ff 42 28	 inc	 DWORD PTR [r10+40]
  000c0	41 8b 52 28	 mov	 edx, DWORD PTR [r10+40]
  000c4	41 0f b6 82 11
	17 00 00	 movzx	 eax, BYTE PTR [r10+5905]
  000cc	49 8b 4a 10	 mov	 rcx, QWORD PTR [r10+16]
  000d0	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  000d3	41 8b 92 14 17
	00 00		 mov	 edx, DWORD PTR [r10+5908]
  000da	41 ff 42 28	 inc	 DWORD PTR [r10+40]
  000de	8b cb		 mov	 ecx, ebx
  000e0	42 8d 44 0a f0	 lea	 eax, DWORD PTR [rdx+r9-16]
  000e5	2a ca		 sub	 cl, dl
  000e7	66 41 d3 e8	 shr	 r8w, cl
  000eb	66 45 89 82 10
	17 00 00	 mov	 WORD PTR [r10+5904], r8w
  000f3	e9 8f 02 00 00	 jmp	 $LN26@compress_b
$LN15@compress_b:
  000f8	0f b7 04 96	 movzx	 eax, WORD PTR [rsi+rdx*4]
  000fc	66 d3 e0	 shl	 ax, cl
  000ff	66 41 09 82 10
	17 00 00	 or	 WORD PTR [r10+5904], ax
  00107	42 8d 04 09	 lea	 eax, DWORD PTR [rcx+r9]

; 1074 :             Tracecv(isgraph(lc), (stderr," '%c' ", lc));
; 1075 :         } else {

  0010b	e9 77 02 00 00	 jmp	 $LN26@compress_b
$LN16@compress_b:

; 1076 :             /* Here, lc is the match length - MIN_MATCH */
; 1077 :             code = _length_code[lc];

  00110	43 0f b6 ac 3b
	00 00 00 00	 movzx	 ebp, BYTE PTR _length_code[r11+r15]

; 1078 :             send_code(s, code+LITERALS+1, ltree); /* send the length code */

  00119	8d 85 01 01 00
	00		 lea	 eax, DWORD PTR [rbp+257]
  0011f	8b d0		 mov	 edx, eax
  00121	0f b7 7c 86 02	 movzx	 edi, WORD PTR [rsi+rax*4+2]
  00126	8b c3		 mov	 eax, ebx
  00128	2b c7		 sub	 eax, edi
  0012a	3b c8		 cmp	 ecx, eax
  0012c	7e 5f		 jle	 SHORT $LN12@compress_b
  0012e	44 0f b7 04 96	 movzx	 r8d, WORD PTR [rsi+rdx*4]
  00133	41 8b 52 28	 mov	 edx, DWORD PTR [r10+40]
  00137	41 0f b7 c0	 movzx	 eax, r8w
  0013b	66 d3 e0	 shl	 ax, cl
  0013e	49 8b 4a 10	 mov	 rcx, QWORD PTR [r10+16]
  00142	66 41 09 82 10
	17 00 00	 or	 WORD PTR [r10+5904], ax
  0014a	41 0f b6 82 10
	17 00 00	 movzx	 eax, BYTE PTR [r10+5904]
  00152	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00155	41 ff 42 28	 inc	 DWORD PTR [r10+40]
  00159	41 8b 52 28	 mov	 edx, DWORD PTR [r10+40]
  0015d	41 0f b6 82 11
	17 00 00	 movzx	 eax, BYTE PTR [r10+5905]
  00165	49 8b 4a 10	 mov	 rcx, QWORD PTR [r10+16]
  00169	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0016c	41 8b 92 14 17
	00 00		 mov	 edx, DWORD PTR [r10+5908]
  00173	41 ff 42 28	 inc	 DWORD PTR [r10+40]
  00177	8b cb		 mov	 ecx, ebx
  00179	8d 44 3a f0	 lea	 eax, DWORD PTR [rdx+rdi-16]
  0017d	2a ca		 sub	 cl, dl
  0017f	66 41 d3 e8	 shr	 r8w, cl
  00183	66 45 89 82 10
	17 00 00	 mov	 WORD PTR [r10+5904], r8w
  0018b	eb 12		 jmp	 SHORT $LN27@compress_b
$LN12@compress_b:
  0018d	0f b7 04 96	 movzx	 eax, WORD PTR [rsi+rdx*4]
  00191	66 d3 e0	 shl	 ax, cl
  00194	66 41 09 82 10
	17 00 00	 or	 WORD PTR [r10+5904], ax
  0019c	8d 04 39	 lea	 eax, DWORD PTR [rcx+rdi]
$LN27@compress_b:
  0019f	41 89 82 14 17
	00 00		 mov	 DWORD PTR [r10+5908], eax

; 1079 :             extra = extra_lbits[code];

  001a6	45 8b 84 af 00
	00 00 00	 mov	 r8d, DWORD PTR extra_lbits[r15+rbp*4]

; 1080 :             if (extra != 0) {

  001ae	45 85 c0	 test	 r8d, r8d
  001b1	0f 84 85 00 00
	00		 je	 $LN8@compress_b

; 1081 :                 lc -= base_length[code];

  001b7	45 2b 9c af 00
	00 00 00	 sub	 r11d, DWORD PTR base_length[r15+rbp*4]

; 1082 :                 send_bits(s, lc, extra);       /* send the extra length bits */

  001bf	8b c8		 mov	 ecx, eax
  001c1	8b c3		 mov	 eax, ebx
  001c3	41 2b c0	 sub	 eax, r8d
  001c6	3b c8		 cmp	 ecx, eax
  001c8	7e 5b		 jle	 SHORT $LN9@compress_b
  001ca	41 8b 52 28	 mov	 edx, DWORD PTR [r10+40]
  001ce	41 0f b7 c3	 movzx	 eax, r11w
  001d2	66 d3 e0	 shl	 ax, cl
  001d5	49 8b 4a 10	 mov	 rcx, QWORD PTR [r10+16]
  001d9	66 41 09 82 10
	17 00 00	 or	 WORD PTR [r10+5904], ax
  001e1	41 0f b6 82 10
	17 00 00	 movzx	 eax, BYTE PTR [r10+5904]
  001e9	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  001ec	41 ff 42 28	 inc	 DWORD PTR [r10+40]
  001f0	41 8b 52 28	 mov	 edx, DWORD PTR [r10+40]
  001f4	41 0f b6 82 11
	17 00 00	 movzx	 eax, BYTE PTR [r10+5905]
  001fc	49 8b 4a 10	 mov	 rcx, QWORD PTR [r10+16]
  00200	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00203	41 8b 92 14 17
	00 00		 mov	 edx, DWORD PTR [r10+5908]
  0020a	41 ff 42 28	 inc	 DWORD PTR [r10+40]
  0020e	8b cb		 mov	 ecx, ebx
  00210	42 8d 44 02 f0	 lea	 eax, DWORD PTR [rdx+r8-16]
  00215	2a ca		 sub	 cl, dl
  00217	66 41 d3 eb	 shr	 r11w, cl
  0021b	66 45 89 9a 10
	17 00 00	 mov	 WORD PTR [r10+5904], r11w
  00223	eb 10		 jmp	 SHORT $LN28@compress_b
$LN9@compress_b:
  00225	66 41 d3 e3	 shl	 r11w, cl
  00229	42 8d 04 01	 lea	 eax, DWORD PTR [rcx+r8]
  0022d	66 45 09 9a 10
	17 00 00	 or	 WORD PTR [r10+5904], r11w
$LN28@compress_b:
  00235	41 89 82 14 17
	00 00		 mov	 DWORD PTR [r10+5908], eax
$LN8@compress_b:

; 1083 :             }
; 1084 :             dist--; /* dist is now the match distance - 1 */

  0023c	41 ff c9	 dec	 r9d

; 1085 :             code = d_code(dist);

  0023f	41 81 f9 00 01
	00 00		 cmp	 r9d, 256		; 00000100H
  00246	73 0b		 jae	 SHORT $LN23@compress_b
  00248	43 0f b6 8c 39
	00 00 00 00	 movzx	 ecx, BYTE PTR _dist_code[r9+r15]
  00251	eb 14		 jmp	 SHORT $LN24@compress_b
$LN23@compress_b:
  00253	41 8b c1	 mov	 eax, r9d
  00256	c1 e8 07	 shr	 eax, 7
  00259	05 00 01 00 00	 add	 eax, 256		; 00000100H
  0025e	42 0f b6 8c 38
	00 00 00 00	 movzx	 ecx, BYTE PTR _dist_code[rax+r15]
$LN24@compress_b:

; 1086 :             Assert (code < D_CODES, "bad d_code");
; 1087 : 
; 1088 :             send_code(s, code, dtree);       /* send the distance code */

  00267	41 0f b7 7c 8e
	02		 movzx	 edi, WORD PTR [r14+rcx*4+2]
  0026d	44 8b d9	 mov	 r11d, ecx
  00270	41 8b 8a 14 17
	00 00		 mov	 ecx, DWORD PTR [r10+5908]
  00277	8b c3		 mov	 eax, ebx
  00279	2b c7		 sub	 eax, edi
  0027b	3b c8		 cmp	 ecx, eax
  0027d	7e 5f		 jle	 SHORT $LN7@compress_b
  0027f	47 0f b7 04 9e	 movzx	 r8d, WORD PTR [r14+r11*4]
  00284	41 8b 52 28	 mov	 edx, DWORD PTR [r10+40]
  00288	41 0f b7 c0	 movzx	 eax, r8w
  0028c	66 d3 e0	 shl	 ax, cl
  0028f	49 8b 4a 10	 mov	 rcx, QWORD PTR [r10+16]
  00293	66 41 09 82 10
	17 00 00	 or	 WORD PTR [r10+5904], ax
  0029b	41 0f b6 82 10
	17 00 00	 movzx	 eax, BYTE PTR [r10+5904]
  002a3	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002a6	41 ff 42 28	 inc	 DWORD PTR [r10+40]
  002aa	41 8b 52 28	 mov	 edx, DWORD PTR [r10+40]
  002ae	41 0f b6 82 11
	17 00 00	 movzx	 eax, BYTE PTR [r10+5905]
  002b6	49 8b 4a 10	 mov	 rcx, QWORD PTR [r10+16]
  002ba	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002bd	41 8b 92 14 17
	00 00		 mov	 edx, DWORD PTR [r10+5908]
  002c4	41 ff 42 28	 inc	 DWORD PTR [r10+40]
  002c8	8b cb		 mov	 ecx, ebx
  002ca	8d 44 3a f0	 lea	 eax, DWORD PTR [rdx+rdi-16]
  002ce	2a ca		 sub	 cl, dl
  002d0	66 41 d3 e8	 shr	 r8w, cl
  002d4	66 45 89 82 10
	17 00 00	 mov	 WORD PTR [r10+5904], r8w
  002dc	eb 13		 jmp	 SHORT $LN29@compress_b
$LN7@compress_b:
  002de	43 0f b7 04 9e	 movzx	 eax, WORD PTR [r14+r11*4]
  002e3	66 d3 e0	 shl	 ax, cl
  002e6	66 41 09 82 10
	17 00 00	 or	 WORD PTR [r10+5904], ax
  002ee	8d 04 39	 lea	 eax, DWORD PTR [rcx+rdi]
$LN29@compress_b:
  002f1	41 89 82 14 17
	00 00		 mov	 DWORD PTR [r10+5908], eax

; 1089 :             extra = extra_dbits[code];

  002f8	47 8b 84 9f 00
	00 00 00	 mov	 r8d, DWORD PTR extra_dbits[r15+r11*4]

; 1090 :             if (extra != 0) {

  00300	45 85 c0	 test	 r8d, r8d
  00303	0f 84 85 00 00
	00		 je	 $LN18@compress_b

; 1091 :                 dist -= base_dist[code];

  00309	47 2b 8c 9f 00
	00 00 00	 sub	 r9d, DWORD PTR base_dist[r15+r11*4]

; 1092 :                 send_bits(s, dist, extra);   /* send the extra distance bits */

  00311	8b c8		 mov	 ecx, eax
  00313	8b c3		 mov	 eax, ebx
  00315	41 2b c0	 sub	 eax, r8d
  00318	3b c8		 cmp	 ecx, eax
  0031a	7e 5b		 jle	 SHORT $LN4@compress_b
  0031c	41 8b 52 28	 mov	 edx, DWORD PTR [r10+40]
  00320	41 0f b7 c1	 movzx	 eax, r9w
  00324	66 d3 e0	 shl	 ax, cl
  00327	49 8b 4a 10	 mov	 rcx, QWORD PTR [r10+16]
  0032b	66 41 09 82 10
	17 00 00	 or	 WORD PTR [r10+5904], ax
  00333	41 0f b6 82 10
	17 00 00	 movzx	 eax, BYTE PTR [r10+5904]
  0033b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0033e	41 ff 42 28	 inc	 DWORD PTR [r10+40]
  00342	41 8b 52 28	 mov	 edx, DWORD PTR [r10+40]
  00346	41 0f b6 82 11
	17 00 00	 movzx	 eax, BYTE PTR [r10+5905]
  0034e	49 8b 4a 10	 mov	 rcx, QWORD PTR [r10+16]
  00352	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00355	41 8b 92 14 17
	00 00		 mov	 edx, DWORD PTR [r10+5908]
  0035c	41 ff 42 28	 inc	 DWORD PTR [r10+40]
  00360	8b cb		 mov	 ecx, ebx
  00362	42 8d 44 02 f0	 lea	 eax, DWORD PTR [rdx+r8-16]
  00367	2a ca		 sub	 cl, dl
  00369	66 41 d3 e9	 shr	 r9w, cl
  0036d	66 45 89 8a 10
	17 00 00	 mov	 WORD PTR [r10+5904], r9w
  00375	eb 10		 jmp	 SHORT $LN26@compress_b
$LN4@compress_b:
  00377	66 41 d3 e1	 shl	 r9w, cl
  0037b	42 8d 04 01	 lea	 eax, DWORD PTR [rcx+r8]
  0037f	66 45 09 8a 10
	17 00 00	 or	 WORD PTR [r10+5904], r9w
$LN26@compress_b:
  00387	41 89 82 14 17
	00 00		 mov	 DWORD PTR [r10+5908], eax
$LN18@compress_b:

; 1093 :             }
; 1094 :         } /* literal or match pair ? */
; 1095 : 
; 1096 :         /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
; 1097 :         Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
; 1098 :                "pendingBuf overflow");
; 1099 : 
; 1100 :     } while (lx < s->last_lit);

  0038e	45 3b a2 f4 16
	00 00		 cmp	 r12d, DWORD PTR [r10+5876]
  00395	0f 82 b5 fc ff
	ff		 jb	 $LL19@compress_b
  0039b	4c 8b 3c 24	 mov	 r15, QWORD PTR [rsp]
  0039f	4c 8b 6c 24 10	 mov	 r13, QWORD PTR [rsp+16]
  003a4	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  003a9	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
$LN17@compress_b:

; 1101 : 
; 1102 :     send_code(s, END_BLOCK, ltree);

  003ae	44 0f b7 9e 02
	04 00 00	 movzx	 r11d, WORD PTR [rsi+1026]
  003b6	41 8b 8a 14 17
	00 00		 mov	 ecx, DWORD PTR [r10+5908]
  003bd	4c 8b 74 24 08	 mov	 r14, QWORD PTR [rsp+8]
  003c2	4c 8b 64 24 40	 mov	 r12, QWORD PTR [rsp+64]
  003c7	8b c3		 mov	 eax, ebx
  003c9	41 2b c3	 sub	 eax, r11d
  003cc	3b c8		 cmp	 ecx, eax
  003ce	7e 72		 jle	 SHORT $LN2@compress_b
  003d0	44 0f b7 8e 00
	04 00 00	 movzx	 r9d, WORD PTR [rsi+1024]
  003d8	45 8b 42 28	 mov	 r8d, DWORD PTR [r10+40]
  003dc	49 8b 52 10	 mov	 rdx, QWORD PTR [r10+16]
  003e0	41 0f b7 c1	 movzx	 eax, r9w
  003e4	66 d3 e0	 shl	 ax, cl
  003e7	66 41 09 82 10
	17 00 00	 or	 WORD PTR [r10+5904], ax
  003ef	41 0f b6 82 10
	17 00 00	 movzx	 eax, BYTE PTR [r10+5904]
  003f7	41 88 04 10	 mov	 BYTE PTR [r8+rdx], al
  003fb	41 ff 42 28	 inc	 DWORD PTR [r10+40]
  003ff	41 0f b6 82 11
	17 00 00	 movzx	 eax, BYTE PTR [r10+5905]
  00407	45 8b 42 28	 mov	 r8d, DWORD PTR [r10+40]
  0040b	49 8b 52 10	 mov	 rdx, QWORD PTR [r10+16]
  0040f	41 88 04 10	 mov	 BYTE PTR [r8+rdx], al
  00413	41 8b 82 14 17
	00 00		 mov	 eax, DWORD PTR [r10+5908]
  0041a	41 ff 42 28	 inc	 DWORD PTR [r10+40]
  0041e	2a d8		 sub	 bl, al
  00420	42 8d 44 18 f0	 lea	 eax, DWORD PTR [rax+r11-16]
  00425	0f b6 cb	 movzx	 ecx, bl
  00428	41 89 82 14 17
	00 00		 mov	 DWORD PTR [r10+5908], eax
  0042f	66 41 d3 e9	 shr	 r9w, cl
  00433	66 45 89 8a 10
	17 00 00	 mov	 WORD PTR [r10+5904], r9w

; 1103 : }

  0043b	48 83 c4 18	 add	 rsp, 24
  0043f	5e		 pop	 rsi
  00440	5b		 pop	 rbx
  00441	c3		 ret	 0
$LN2@compress_b:

; 1101 : 
; 1102 :     send_code(s, END_BLOCK, ltree);

  00442	0f b7 86 00 04
	00 00		 movzx	 eax, WORD PTR [rsi+1024]
  00449	66 d3 e0	 shl	 ax, cl
  0044c	66 41 09 82 10
	17 00 00	 or	 WORD PTR [r10+5904], ax
  00454	42 8d 04 19	 lea	 eax, DWORD PTR [rcx+r11]
  00458	41 89 82 14 17
	00 00		 mov	 DWORD PTR [r10+5908], eax

; 1103 : }

  0045f	48 83 c4 18	 add	 rsp, 24
  00463	5e		 pop	 rsi
  00464	5b		 pop	 rbx
  00465	c3		 ret	 0
compress_block ENDP
_TEXT	ENDS
PUBLIC	_tr_align
; Function compile flags: /Ogtpy
;	COMDAT _tr_align
_TEXT	SEGMENT
s$ = 8
_tr_align PROC						; COMDAT

; 894  : {

  00000	4c 8b c9	 mov	 r9, rcx

; 895  :     send_bits(s, STATIC_TREES<<1, 3);

  00003	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00009	41 bb 10 00 00
	00		 mov	 r11d, 16
  0000f	45 8d 43 f2	 lea	 r8d, QWORD PTR [r11-14]
  00013	83 f9 0d	 cmp	 ecx, 13
  00016	7e 59		 jle	 SHORT $LN4@tr_align
  00018	41 8b 51 28	 mov	 edx, DWORD PTR [r9+40]
  0001c	41 8b c0	 mov	 eax, r8d
  0001f	66 d3 e0	 shl	 ax, cl
  00022	49 8b 49 10	 mov	 rcx, QWORD PTR [r9+16]
  00026	66 41 09 81 10
	17 00 00	 or	 WORD PTR [r9+5904], ax
  0002e	41 0f b6 81 10
	17 00 00	 movzx	 eax, BYTE PTR [r9+5904]
  00036	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00039	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  0003d	41 8b 51 28	 mov	 edx, DWORD PTR [r9+40]
  00041	41 0f b6 81 11
	17 00 00	 movzx	 eax, BYTE PTR [r9+5905]
  00049	49 8b 49 10	 mov	 rcx, QWORD PTR [r9+16]
  0004d	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00050	41 8b 91 14 17
	00 00		 mov	 edx, DWORD PTR [r9+5908]
  00057	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  0005b	41 8b cb	 mov	 ecx, r11d
  0005e	8d 42 f3	 lea	 eax, DWORD PTR [rdx-13]
  00061	2a ca		 sub	 cl, dl
  00063	66 41 d3 e8	 shr	 r8w, cl
  00067	66 45 89 81 10
	17 00 00	 mov	 WORD PTR [r9+5904], r8w
  0006f	eb 0f		 jmp	 SHORT $LN7@tr_align
$LN4@tr_align:
  00071	66 41 d3 e0	 shl	 r8w, cl
  00075	8d 41 03	 lea	 eax, DWORD PTR [rcx+3]
  00078	66 45 09 81 10
	17 00 00	 or	 WORD PTR [r9+5904], r8w
$LN7@tr_align:

; 896  :     send_code(s, END_BLOCK, static_ltree);

  00080	45 33 d2	 xor	 r10d, r10d
  00083	41 89 81 14 17
	00 00		 mov	 DWORD PTR [r9+5908], eax
  0008a	8b c8		 mov	 ecx, eax
  0008c	83 f8 09	 cmp	 eax, 9
  0008f	7e 6a		 jle	 SHORT $LN2@tr_align
  00091	45 8b 41 28	 mov	 r8d, DWORD PTR [r9+40]
  00095	49 8b 51 10	 mov	 rdx, QWORD PTR [r9+16]
  00099	41 8b c2	 mov	 eax, r10d
  0009c	66 d3 e0	 shl	 ax, cl
  0009f	66 41 09 81 10
	17 00 00	 or	 WORD PTR [r9+5904], ax
  000a7	41 0f b6 81 10
	17 00 00	 movzx	 eax, BYTE PTR [r9+5904]
  000af	41 88 04 10	 mov	 BYTE PTR [r8+rdx], al
  000b3	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  000b7	41 0f b6 81 11
	17 00 00	 movzx	 eax, BYTE PTR [r9+5905]
  000bf	45 8b 41 28	 mov	 r8d, DWORD PTR [r9+40]
  000c3	49 8b 51 10	 mov	 rdx, QWORD PTR [r9+16]
  000c7	41 88 04 10	 mov	 BYTE PTR [r8+rdx], al
  000cb	41 8b 81 14 17
	00 00		 mov	 eax, DWORD PTR [r9+5908]
  000d2	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  000d6	44 2a d8	 sub	 r11b, al
  000d9	83 c0 f7	 add	 eax, -9
  000dc	41 0f b6 cb	 movzx	 ecx, r11b
  000e0	41 89 81 14 17
	00 00		 mov	 DWORD PTR [r9+5908], eax
  000e7	66 41 d3 ea	 shr	 r10w, cl

; 897  : #ifdef DEBUG
; 898  :     s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
; 899  : #endif
; 900  :     bi_flush(s);

  000eb	49 8b c9	 mov	 rcx, r9
  000ee	66 45 89 91 10
	17 00 00	 mov	 WORD PTR [r9+5904], r10w

; 901  : }

  000f6	e9 00 00 00 00	 jmp	 bi_flush
$LN2@tr_align:

; 896  :     send_code(s, END_BLOCK, static_ltree);

  000fb	8d 41 07	 lea	 eax, DWORD PTR [rcx+7]
  000fe	66 41 d3 e2	 shl	 r10w, cl

; 897  : #ifdef DEBUG
; 898  :     s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
; 899  : #endif
; 900  :     bi_flush(s);

  00102	49 8b c9	 mov	 rcx, r9
  00105	66 45 09 91 10
	17 00 00	 or	 WORD PTR [r9+5904], r10w
  0010d	41 89 81 14 17
	00 00		 mov	 DWORD PTR [r9+5908], eax

; 901  : }

  00114	e9 00 00 00 00	 jmp	 bi_flush
_tr_align ENDP
_TEXT	ENDS
PUBLIC	_tr_flush_bits
; Function compile flags: /Ogtpy
;	COMDAT _tr_flush_bits
_TEXT	SEGMENT
s$ = 8
_tr_flush_bits PROC					; COMDAT

; 885  :     bi_flush(s);
; 886  : }

  00000	e9 00 00 00 00	 jmp	 bi_flush
_tr_flush_bits ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$send_tree DD imagerel send_tree
	DD	imagerel send_tree+51
	DD	imagerel $unwind$send_tree
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$send_tree DD imagerel send_tree+51
	DD	imagerel send_tree+1383
	DD	imagerel $chain$2$send_tree
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$send_tree DD imagerel send_tree+1383
	DD	imagerel send_tree+1390
	DD	imagerel $chain$3$send_tree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$send_tree DD 021H
	DD	imagerel send_tree
	DD	imagerel send_tree+51
	DD	imagerel $unwind$send_tree
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$send_tree DD 060f21H
	DD	04c40fH
	DD	03740aH
	DD	025405H
	DD	imagerel send_tree
	DD	imagerel send_tree+51
	DD	imagerel $unwind$send_tree
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$send_tree DD 030601H
	DD	053406H
	DD	06006H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT send_tree
_TEXT	SEGMENT
s$ = 16
tree$ = 24
max_code$ = 32
send_tree PROC						; COMDAT

; 754  : {

  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	56		 push	 rsi

; 755  :     int n;                     /* iterates over all tree elements */
; 756  :     int prevlen = -1;          /* last emitted length */
; 757  :     int curlen;                /* length of current code */
; 758  :     int nextlen = tree[0].Len; /* length of next code */

  00006	0f b7 72 02	 movzx	 esi, WORD PTR [rdx+2]
  0000a	41 83 cb ff	 or	 r11d, -1

; 759  :     int count = 0;             /* repeat count of the current code */

  0000e	45 33 d2	 xor	 r10d, r10d

; 760  :     int max_count = 7;         /* max repeat count */

  00011	41 8d 43 08	 lea	 eax, QWORD PTR [r11+8]
  00015	4c 8b c9	 mov	 r9, rcx
  00018	49 63 d8	 movsxd	 rbx, r8d

; 761  :     int min_count = 4;         /* min repeat count */

  0001b	8d 48 fd	 lea	 ecx, QWORD PTR [rax-3]

; 762  : 
; 763  :     /* tree[max_code+1].Len = -1; */  /* guard already set */
; 764  :     if (nextlen == 0) max_count = 138, min_count = 3;

  0001e	85 f6		 test	 esi, esi
  00020	75 08		 jne	 SHORT $LN36@send_tree
  00022	b8 8a 00 00 00	 mov	 eax, 138		; 0000008aH
  00027	8d 4e 03	 lea	 ecx, QWORD PTR [rsi+3]
$LN36@send_tree:

; 765  : 
; 766  :     for (n = 0; n <= max_code; n++) {

  0002a	45 85 c0	 test	 r8d, r8d
  0002d	0f 88 34 05 00
	00		 js	 $LN33@send_tree
  00033	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  00038	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0003d	4c 89 64 24 20	 mov	 QWORD PTR [rsp+32], r12
  00042	4c 8d 63 01	 lea	 r12, QWORD PTR [rbx+1]
  00046	48 8d 6a 06	 lea	 rbp, QWORD PTR [rdx+6]
  0004a	66 0f 1f 44 00
	00		 npad	 6
$LL35@send_tree:

; 767  :         curlen = nextlen; nextlen = tree[n+1].Len;
; 768  :         if (++count < max_count && curlen == nextlen) {

  00050	41 ff c2	 inc	 r10d
  00053	48 63 fe	 movsxd	 rdi, esi
  00056	0f b7 75 00	 movzx	 esi, WORD PTR [rbp]
  0005a	44 3b d0	 cmp	 r10d, eax
  0005d	7d 08		 jge	 SHORT $LN32@send_tree
  0005f	3b fe		 cmp	 edi, esi
  00061	0f 84 e4 04 00
	00		 je	 $LN34@send_tree
$LN32@send_tree:

; 769  :             continue;
; 770  :         } else if (count < min_count) {

  00067	44 3b d1	 cmp	 r10d, ecx
  0006a	0f 8d b0 00 00
	00		 jge	 $LN30@send_tree
$LL29@send_tree:

; 771  :             do { send_code(s, curlen, s->bl_tree); } while (--count != 0);

  00070	45 0f b7 9c b9
	a6 0a 00 00	 movzx	 r11d, WORD PTR [r9+rdi*4+2726]
  00079	41 8b 89 14 17
	00 00		 mov	 ecx, DWORD PTR [r9+5908]
  00080	b8 10 00 00 00	 mov	 eax, 16
  00085	41 2b c3	 sub	 eax, r11d
  00088	3b c8		 cmp	 ecx, eax
  0008a	7e 67		 jle	 SHORT $LN26@send_tree
  0008c	45 0f b7 84 b9
	a4 0a 00 00	 movzx	 r8d, WORD PTR [r9+rdi*4+2724]
  00095	41 8b 51 28	 mov	 edx, DWORD PTR [r9+40]
  00099	41 0f b7 c0	 movzx	 eax, r8w
  0009d	66 d3 e0	 shl	 ax, cl
  000a0	49 8b 49 10	 mov	 rcx, QWORD PTR [r9+16]
  000a4	66 41 09 81 10
	17 00 00	 or	 WORD PTR [r9+5904], ax
  000ac	41 0f b6 81 10
	17 00 00	 movzx	 eax, BYTE PTR [r9+5904]
  000b4	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  000b7	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  000bb	41 8b 51 28	 mov	 edx, DWORD PTR [r9+40]
  000bf	41 0f b6 81 11
	17 00 00	 movzx	 eax, BYTE PTR [r9+5905]
  000c7	49 8b 49 10	 mov	 rcx, QWORD PTR [r9+16]
  000cb	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  000ce	41 8b 91 14 17
	00 00		 mov	 edx, DWORD PTR [r9+5908]
  000d5	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  000d9	b9 10 00 00 00	 mov	 ecx, 16
  000de	42 8d 44 1a f0	 lea	 eax, DWORD PTR [rdx+r11-16]
  000e3	2a ca		 sub	 cl, dl
  000e5	66 41 d3 e8	 shr	 r8w, cl
  000e9	66 45 89 81 10
	17 00 00	 mov	 WORD PTR [r9+5904], r8w
  000f1	eb 18		 jmp	 SHORT $LN42@send_tree
$LN26@send_tree:
  000f3	41 0f b7 84 b9
	a4 0a 00 00	 movzx	 eax, WORD PTR [r9+rdi*4+2724]
  000fc	66 d3 e0	 shl	 ax, cl
  000ff	66 41 09 81 10
	17 00 00	 or	 WORD PTR [r9+5904], ax
  00107	42 8d 04 19	 lea	 eax, DWORD PTR [rcx+r11]
$LN42@send_tree:
  0010b	41 ff ca	 dec	 r10d
  0010e	41 89 81 14 17
	00 00		 mov	 DWORD PTR [r9+5908], eax
  00115	0f 85 55 ff ff
	ff		 jne	 $LL29@send_tree

; 772  : 
; 773  :         } else if (curlen != 0) {

  0011b	e9 01 04 00 00	 jmp	 $LN5@send_tree
$LN30@send_tree:
  00120	85 ff		 test	 edi, edi
  00122	0f 84 c4 01 00
	00		 je	 $LN23@send_tree

; 774  :             if (curlen != prevlen) {

  00128	41 3b fb	 cmp	 edi, r11d
  0012b	0f 84 a5 00 00
	00		 je	 $LN22@send_tree

; 775  :                 send_code(s, curlen, s->bl_tree); count--;

  00131	45 0f b7 9c b9
	a6 0a 00 00	 movzx	 r11d, WORD PTR [r9+rdi*4+2726]
  0013a	41 8b 89 14 17
	00 00		 mov	 ecx, DWORD PTR [r9+5908]
  00141	b8 10 00 00 00	 mov	 eax, 16
  00146	41 2b c3	 sub	 eax, r11d
  00149	3b c8		 cmp	 ecx, eax
  0014b	7e 67		 jle	 SHORT $LN21@send_tree
  0014d	45 0f b7 84 b9
	a4 0a 00 00	 movzx	 r8d, WORD PTR [r9+rdi*4+2724]
  00156	41 8b 51 28	 mov	 edx, DWORD PTR [r9+40]
  0015a	41 0f b7 c0	 movzx	 eax, r8w
  0015e	66 d3 e0	 shl	 ax, cl
  00161	49 8b 49 10	 mov	 rcx, QWORD PTR [r9+16]
  00165	66 41 09 81 10
	17 00 00	 or	 WORD PTR [r9+5904], ax
  0016d	41 0f b6 81 10
	17 00 00	 movzx	 eax, BYTE PTR [r9+5904]
  00175	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00178	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  0017c	41 8b 51 28	 mov	 edx, DWORD PTR [r9+40]
  00180	41 0f b6 81 11
	17 00 00	 movzx	 eax, BYTE PTR [r9+5905]
  00188	49 8b 49 10	 mov	 rcx, QWORD PTR [r9+16]
  0018c	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0018f	41 8b 91 14 17
	00 00		 mov	 edx, DWORD PTR [r9+5908]
  00196	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  0019a	b9 10 00 00 00	 mov	 ecx, 16
  0019f	42 8d 44 1a f0	 lea	 eax, DWORD PTR [rdx+r11-16]
  001a4	2a ca		 sub	 cl, dl
  001a6	66 41 d3 e8	 shr	 r8w, cl
  001aa	66 45 89 81 10
	17 00 00	 mov	 WORD PTR [r9+5904], r8w
  001b2	eb 18		 jmp	 SHORT $LN43@send_tree
$LN21@send_tree:
  001b4	41 0f b7 84 b9
	a4 0a 00 00	 movzx	 eax, WORD PTR [r9+rdi*4+2724]
  001bd	66 d3 e0	 shl	 ax, cl
  001c0	66 41 09 81 10
	17 00 00	 or	 WORD PTR [r9+5904], ax
  001c8	42 8d 04 19	 lea	 eax, DWORD PTR [rcx+r11]
$LN43@send_tree:
  001cc	41 89 81 14 17
	00 00		 mov	 DWORD PTR [r9+5908], eax
  001d3	41 ff ca	 dec	 r10d
$LN22@send_tree:

; 776  :             }
; 777  :             Assert(count >= 3 && count <= 6, " 3_6?");
; 778  :             send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);

  001d6	45 0f b7 99 e6
	0a 00 00	 movzx	 r11d, WORD PTR [r9+2790]
  001de	41 8b 89 14 17
	00 00		 mov	 ecx, DWORD PTR [r9+5908]
  001e5	b8 10 00 00 00	 mov	 eax, 16
  001ea	41 2b c3	 sub	 eax, r11d
  001ed	3b c8		 cmp	 ecx, eax
  001ef	7e 66		 jle	 SHORT $LN19@send_tree
  001f1	41 8b 51 28	 mov	 edx, DWORD PTR [r9+40]
  001f5	45 0f b7 81 e4
	0a 00 00	 movzx	 r8d, WORD PTR [r9+2788]
  001fd	41 0f b7 c0	 movzx	 eax, r8w
  00201	66 d3 e0	 shl	 ax, cl
  00204	49 8b 49 10	 mov	 rcx, QWORD PTR [r9+16]
  00208	66 41 09 81 10
	17 00 00	 or	 WORD PTR [r9+5904], ax
  00210	41 0f b6 81 10
	17 00 00	 movzx	 eax, BYTE PTR [r9+5904]
  00218	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0021b	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  0021f	41 8b 51 28	 mov	 edx, DWORD PTR [r9+40]
  00223	41 0f b6 81 11
	17 00 00	 movzx	 eax, BYTE PTR [r9+5905]
  0022b	49 8b 49 10	 mov	 rcx, QWORD PTR [r9+16]
  0022f	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00232	41 8b 91 14 17
	00 00		 mov	 edx, DWORD PTR [r9+5908]
  00239	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  0023d	b9 10 00 00 00	 mov	 ecx, 16
  00242	42 8d 44 1a f0	 lea	 eax, DWORD PTR [rdx+r11-16]
  00247	2a ca		 sub	 cl, dl
  00249	66 41 d3 e8	 shr	 r8w, cl
  0024d	66 45 89 81 10
	17 00 00	 mov	 WORD PTR [r9+5904], r8w
  00255	eb 17		 jmp	 SHORT $LN44@send_tree
$LN19@send_tree:
  00257	41 0f b7 81 e4
	0a 00 00	 movzx	 eax, WORD PTR [r9+2788]
  0025f	66 d3 e0	 shl	 ax, cl
  00262	66 41 09 81 10
	17 00 00	 or	 WORD PTR [r9+5904], ax
  0026a	42 8d 04 19	 lea	 eax, DWORD PTR [rcx+r11]
$LN44@send_tree:
  0026e	41 89 81 14 17
	00 00		 mov	 DWORD PTR [r9+5908], eax
  00275	8b c8		 mov	 ecx, eax
  00277	83 f8 0e	 cmp	 eax, 14
  0027a	7e 63		 jle	 SHORT $LN17@send_tree
  0027c	41 8b 51 28	 mov	 edx, DWORD PTR [r9+40]
  00280	45 8d 42 fd	 lea	 r8d, DWORD PTR [r10-3]
  00284	41 0f b7 c0	 movzx	 eax, r8w
  00288	66 d3 e0	 shl	 ax, cl
  0028b	49 8b 49 10	 mov	 rcx, QWORD PTR [r9+16]
  0028f	66 41 09 81 10
	17 00 00	 or	 WORD PTR [r9+5904], ax
  00297	41 0f b6 81 10
	17 00 00	 movzx	 eax, BYTE PTR [r9+5904]
  0029f	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002a2	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  002a6	41 8b 51 28	 mov	 edx, DWORD PTR [r9+40]
  002aa	41 0f b6 81 11
	17 00 00	 movzx	 eax, BYTE PTR [r9+5905]
  002b2	49 8b 49 10	 mov	 rcx, QWORD PTR [r9+16]
  002b6	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002b9	41 8b 91 14 17
	00 00		 mov	 edx, DWORD PTR [r9+5908]
  002c0	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  002c4	b9 10 00 00 00	 mov	 ecx, 16
  002c9	8d 42 f2	 lea	 eax, DWORD PTR [rdx-14]
  002cc	2a ca		 sub	 cl, dl
  002ce	66 41 d3 e8	 shr	 r8w, cl
  002d2	66 45 89 81 10
	17 00 00	 mov	 WORD PTR [r9+5904], r8w
  002da	e9 3b 02 00 00	 jmp	 $LN45@send_tree
$LN17@send_tree:
  002df	66 41 83 ea 03	 sub	 r10w, 3
  002e4	8d 41 02	 lea	 eax, DWORD PTR [rcx+2]
  002e7	e9 22 02 00 00	 jmp	 $LN46@send_tree
$LN23@send_tree:

; 779  : 
; 780  :         } else if (count <= 10) {
; 781  :             send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);

  002ec	41 8b 89 14 17
	00 00		 mov	 ecx, DWORD PTR [r9+5908]
  002f3	b8 10 00 00 00	 mov	 eax, 16
  002f8	41 83 fa 0a	 cmp	 r10d, 10
  002fc	0f 8f 0a 01 00
	00		 jg	 $LN14@send_tree
  00302	45 0f b7 99 ea
	0a 00 00	 movzx	 r11d, WORD PTR [r9+2794]
  0030a	41 2b c3	 sub	 eax, r11d
  0030d	3b c8		 cmp	 ecx, eax
  0030f	7e 66		 jle	 SHORT $LN13@send_tree
  00311	41 8b 51 28	 mov	 edx, DWORD PTR [r9+40]
  00315	45 0f b7 81 e8
	0a 00 00	 movzx	 r8d, WORD PTR [r9+2792]
  0031d	41 0f b7 c0	 movzx	 eax, r8w
  00321	66 d3 e0	 shl	 ax, cl
  00324	49 8b 49 10	 mov	 rcx, QWORD PTR [r9+16]
  00328	66 41 09 81 10
	17 00 00	 or	 WORD PTR [r9+5904], ax
  00330	41 0f b6 81 10
	17 00 00	 movzx	 eax, BYTE PTR [r9+5904]
  00338	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0033b	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  0033f	41 8b 51 28	 mov	 edx, DWORD PTR [r9+40]
  00343	41 0f b6 81 11
	17 00 00	 movzx	 eax, BYTE PTR [r9+5905]
  0034b	49 8b 49 10	 mov	 rcx, QWORD PTR [r9+16]
  0034f	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00352	41 8b 91 14 17
	00 00		 mov	 edx, DWORD PTR [r9+5908]
  00359	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  0035d	b9 10 00 00 00	 mov	 ecx, 16
  00362	42 8d 44 1a f0	 lea	 eax, DWORD PTR [rdx+r11-16]
  00367	2a ca		 sub	 cl, dl
  00369	66 41 d3 e8	 shr	 r8w, cl
  0036d	66 45 89 81 10
	17 00 00	 mov	 WORD PTR [r9+5904], r8w
  00375	eb 17		 jmp	 SHORT $LN47@send_tree
$LN13@send_tree:
  00377	41 0f b7 81 e8
	0a 00 00	 movzx	 eax, WORD PTR [r9+2792]
  0037f	66 d3 e0	 shl	 ax, cl
  00382	66 41 09 81 10
	17 00 00	 or	 WORD PTR [r9+5904], ax
  0038a	42 8d 04 19	 lea	 eax, DWORD PTR [rcx+r11]
$LN47@send_tree:
  0038e	41 89 81 14 17
	00 00		 mov	 DWORD PTR [r9+5908], eax
  00395	8b c8		 mov	 ecx, eax
  00397	83 f8 0d	 cmp	 eax, 13
  0039a	7e 63		 jle	 SHORT $LN11@send_tree
  0039c	41 8b 51 28	 mov	 edx, DWORD PTR [r9+40]
  003a0	45 8d 42 fd	 lea	 r8d, DWORD PTR [r10-3]
  003a4	41 0f b7 c0	 movzx	 eax, r8w
  003a8	66 d3 e0	 shl	 ax, cl
  003ab	49 8b 49 10	 mov	 rcx, QWORD PTR [r9+16]
  003af	66 41 09 81 10
	17 00 00	 or	 WORD PTR [r9+5904], ax
  003b7	41 0f b6 81 10
	17 00 00	 movzx	 eax, BYTE PTR [r9+5904]
  003bf	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  003c2	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  003c6	41 8b 51 28	 mov	 edx, DWORD PTR [r9+40]
  003ca	41 0f b6 81 11
	17 00 00	 movzx	 eax, BYTE PTR [r9+5905]
  003d2	49 8b 49 10	 mov	 rcx, QWORD PTR [r9+16]
  003d6	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  003d9	41 8b 91 14 17
	00 00		 mov	 edx, DWORD PTR [r9+5908]
  003e0	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  003e4	b9 10 00 00 00	 mov	 ecx, 16
  003e9	8d 42 f3	 lea	 eax, DWORD PTR [rdx-13]
  003ec	2a ca		 sub	 cl, dl
  003ee	66 41 d3 e8	 shr	 r8w, cl
  003f2	66 45 89 81 10
	17 00 00	 mov	 WORD PTR [r9+5904], r8w
  003fa	e9 1b 01 00 00	 jmp	 $LN45@send_tree
$LN11@send_tree:
  003ff	66 41 83 ea 03	 sub	 r10w, 3
  00404	8d 41 03	 lea	 eax, DWORD PTR [rcx+3]

; 782  : 
; 783  :         } else {

  00407	e9 02 01 00 00	 jmp	 $LN46@send_tree
$LN14@send_tree:

; 784  :             send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);

  0040c	45 0f b7 99 ee
	0a 00 00	 movzx	 r11d, WORD PTR [r9+2798]
  00414	41 2b c3	 sub	 eax, r11d
  00417	3b c8		 cmp	 ecx, eax
  00419	7e 66		 jle	 SHORT $LN8@send_tree
  0041b	41 8b 51 28	 mov	 edx, DWORD PTR [r9+40]
  0041f	45 0f b7 81 ec
	0a 00 00	 movzx	 r8d, WORD PTR [r9+2796]
  00427	41 0f b7 c0	 movzx	 eax, r8w
  0042b	66 d3 e0	 shl	 ax, cl
  0042e	49 8b 49 10	 mov	 rcx, QWORD PTR [r9+16]
  00432	66 41 09 81 10
	17 00 00	 or	 WORD PTR [r9+5904], ax
  0043a	41 0f b6 81 10
	17 00 00	 movzx	 eax, BYTE PTR [r9+5904]
  00442	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00445	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  00449	41 8b 51 28	 mov	 edx, DWORD PTR [r9+40]
  0044d	41 0f b6 81 11
	17 00 00	 movzx	 eax, BYTE PTR [r9+5905]
  00455	49 8b 49 10	 mov	 rcx, QWORD PTR [r9+16]
  00459	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0045c	41 8b 91 14 17
	00 00		 mov	 edx, DWORD PTR [r9+5908]
  00463	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  00467	b9 10 00 00 00	 mov	 ecx, 16
  0046c	42 8d 44 1a f0	 lea	 eax, DWORD PTR [rdx+r11-16]
  00471	2a ca		 sub	 cl, dl
  00473	66 41 d3 e8	 shr	 r8w, cl
  00477	66 45 89 81 10
	17 00 00	 mov	 WORD PTR [r9+5904], r8w
  0047f	eb 17		 jmp	 SHORT $LN48@send_tree
$LN8@send_tree:
  00481	41 0f b7 81 ec
	0a 00 00	 movzx	 eax, WORD PTR [r9+2796]
  00489	66 d3 e0	 shl	 ax, cl
  0048c	66 41 09 81 10
	17 00 00	 or	 WORD PTR [r9+5904], ax
  00494	42 8d 04 19	 lea	 eax, DWORD PTR [rcx+r11]
$LN48@send_tree:
  00498	41 89 81 14 17
	00 00		 mov	 DWORD PTR [r9+5908], eax
  0049f	8b c8		 mov	 ecx, eax
  004a1	83 f8 09	 cmp	 eax, 9
  004a4	7e 60		 jle	 SHORT $LN6@send_tree
  004a6	41 8b 51 28	 mov	 edx, DWORD PTR [r9+40]
  004aa	45 8d 42 f5	 lea	 r8d, DWORD PTR [r10-11]
  004ae	41 0f b7 c0	 movzx	 eax, r8w
  004b2	66 d3 e0	 shl	 ax, cl
  004b5	49 8b 49 10	 mov	 rcx, QWORD PTR [r9+16]
  004b9	66 41 09 81 10
	17 00 00	 or	 WORD PTR [r9+5904], ax
  004c1	41 0f b6 81 10
	17 00 00	 movzx	 eax, BYTE PTR [r9+5904]
  004c9	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  004cc	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  004d0	41 8b 51 28	 mov	 edx, DWORD PTR [r9+40]
  004d4	41 0f b6 81 11
	17 00 00	 movzx	 eax, BYTE PTR [r9+5905]
  004dc	49 8b 49 10	 mov	 rcx, QWORD PTR [r9+16]
  004e0	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  004e3	41 8b 91 14 17
	00 00		 mov	 edx, DWORD PTR [r9+5908]
  004ea	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  004ee	b9 10 00 00 00	 mov	 ecx, 16
  004f3	8d 42 f7	 lea	 eax, DWORD PTR [rdx-9]
  004f6	2a ca		 sub	 cl, dl
  004f8	66 41 d3 e8	 shr	 r8w, cl
  004fc	66 45 89 81 10
	17 00 00	 mov	 WORD PTR [r9+5904], r8w
  00504	eb 14		 jmp	 SHORT $LN45@send_tree
$LN6@send_tree:
  00506	66 41 83 ea 0b	 sub	 r10w, 11
  0050b	8d 41 07	 lea	 eax, DWORD PTR [rcx+7]
$LN46@send_tree:
  0050e	66 41 d3 e2	 shl	 r10w, cl
  00512	66 45 09 91 10
	17 00 00	 or	 WORD PTR [r9+5904], r10w
$LN45@send_tree:
  0051a	41 89 81 14 17
	00 00		 mov	 DWORD PTR [r9+5908], eax
$LN5@send_tree:

; 785  :         }
; 786  :         count = 0; prevlen = curlen;

  00521	45 33 d2	 xor	 r10d, r10d
  00524	44 8b df	 mov	 r11d, edi

; 787  :         if (nextlen == 0) {

  00527	85 f6		 test	 esi, esi
  00529	75 0a		 jne	 SHORT $LN4@send_tree

; 788  :             max_count = 138, min_count = 3;

  0052b	b8 8a 00 00 00	 mov	 eax, 138		; 0000008aH
  00530	8d 4e 03	 lea	 ecx, QWORD PTR [rsi+3]
  00533	eb 16		 jmp	 SHORT $LN34@send_tree
$LN4@send_tree:

; 789  :         } else if (curlen == nextlen) {

  00535	3b fe		 cmp	 edi, esi
  00537	75 0a		 jne	 SHORT $LN2@send_tree

; 790  :             max_count = 6, min_count = 3;

  00539	b8 06 00 00 00	 mov	 eax, 6
  0053e	8d 48 fd	 lea	 ecx, QWORD PTR [rax-3]

; 791  :         } else {

  00541	eb 08		 jmp	 SHORT $LN34@send_tree
$LN2@send_tree:

; 792  :             max_count = 7, min_count = 4;

  00543	b8 07 00 00 00	 mov	 eax, 7
  00548	8d 48 fd	 lea	 ecx, QWORD PTR [rax-3]
$LN34@send_tree:

; 765  : 
; 766  :     for (n = 0; n <= max_code; n++) {

  0054b	48 83 c5 04	 add	 rbp, 4
  0054f	49 ff cc	 dec	 r12
  00552	0f 85 f8 fa ff
	ff		 jne	 $LL35@send_tree
  00558	4c 8b 64 24 20	 mov	 r12, QWORD PTR [rsp+32]
  0055d	48 8b 7c 24 18	 mov	 rdi, QWORD PTR [rsp+24]
  00562	48 8b 6c 24 10	 mov	 rbp, QWORD PTR [rsp+16]
$LN33@send_tree:

; 793  :         }
; 794  :     }
; 795  : }

  00567	48 8b 5c 24 28	 mov	 rbx, QWORD PTR [rsp+40]
  0056c	5e		 pop	 rsi
  0056d	c3		 ret	 0
send_tree ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$scan_tree DD imagerel scan_tree
	DD	imagerel scan_tree+230
	DD	imagerel $unwind$scan_tree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$scan_tree DD 040a01H
	DD	02740aH
	DD	013405H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT scan_tree
_TEXT	SEGMENT
s$ = 8
tree$ = 16
max_code$ = 24
scan_tree PROC						; COMDAT

; 709  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 7c 24 10	 mov	 QWORD PTR [rsp+16], rdi

; 710  :     int n;                     /* iterates over all tree elements */
; 711  :     int prevlen = -1;          /* last emitted length */
; 712  :     int curlen;                /* length of current code */
; 713  :     int nextlen = tree[0].Len; /* length of next code */

  0000a	0f b7 7a 02	 movzx	 edi, WORD PTR [rdx+2]
  0000e	83 cb ff	 or	 ebx, -1

; 714  :     int count = 0;             /* repeat count of the current code */

  00011	45 33 d2	 xor	 r10d, r10d
  00014	4c 8b da	 mov	 r11, rdx

; 715  :     int max_count = 7;         /* max repeat count */

  00017	8d 43 08	 lea	 eax, QWORD PTR [rbx+8]

; 716  :     int min_count = 4;         /* min repeat count */

  0001a	44 8d 4b 05	 lea	 r9d, QWORD PTR [rbx+5]

; 717  : 
; 718  :     if (nextlen == 0) max_count = 138, min_count = 3;

  0001e	85 ff		 test	 edi, edi
  00020	75 09		 jne	 SHORT $LN17@scan_tree
  00022	b8 8a 00 00 00	 mov	 eax, 138		; 0000008aH
  00027	44 8d 4b 04	 lea	 r9d, QWORD PTR [rbx+4]
$LN17@scan_tree:

; 719  :     tree[max_code+1].Len = (ush)0xffff; /* guard */

  0002b	49 63 d0	 movsxd	 rdx, r8d
  0002e	41 b8 ff ff 00
	00		 mov	 r8d, 65535		; 0000ffffH
  00034	66 45 89 44 93
	06		 mov	 WORD PTR [r11+rdx*4+6], r8w

; 720  : 
; 721  :     for (n = 0; n <= max_code; n++) {

  0003a	48 85 d2	 test	 rdx, rdx
  0003d	0f 88 98 00 00
	00		 js	 $LN14@scan_tree

; 719  :     tree[max_code+1].Len = (ush)0xffff; /* guard */

  00043	49 83 c3 06	 add	 r11, 6
  00047	4c 8d 42 01	 lea	 r8, QWORD PTR [rdx+1]
  0004b	0f 1f 44 00 00	 npad	 5
$LL16@scan_tree:

; 722  :         curlen = nextlen; nextlen = tree[n+1].Len;
; 723  :         if (++count < max_count && curlen == nextlen) {

  00050	41 ff c2	 inc	 r10d
  00053	48 63 d7	 movsxd	 rdx, edi
  00056	41 0f b7 3b	 movzx	 edi, WORD PTR [r11]
  0005a	44 3b d0	 cmp	 r10d, eax
  0005d	7d 04		 jge	 SHORT $LN13@scan_tree
  0005f	3b d7		 cmp	 edx, edi
  00061	74 6b		 je	 SHORT $LN15@scan_tree
$LN13@scan_tree:

; 724  :             continue;
; 725  :         } else if (count < min_count) {

  00063	45 3b d1	 cmp	 r10d, r9d
  00066	7d 0b		 jge	 SHORT $LN11@scan_tree

; 726  :             s->bl_tree[curlen].Freq += count;

  00068	66 44 01 94 91
	a4 0a 00 00	 add	 WORD PTR [rcx+rdx*4+2724], r10w
  00071	eb 2f		 jmp	 SHORT $LN5@scan_tree
$LN11@scan_tree:

; 727  :         } else if (curlen != 0) {

  00073	85 d2		 test	 edx, edx
  00075	74 15		 je	 SHORT $LN9@scan_tree

; 728  :             if (curlen != prevlen) s->bl_tree[curlen].Freq++;

  00077	3b d3		 cmp	 edx, ebx
  00079	74 08		 je	 SHORT $LN8@scan_tree
  0007b	66 ff 84 91 a4
	0a 00 00	 inc	 WORD PTR [rcx+rdx*4+2724]
$LN8@scan_tree:

; 729  :             s->bl_tree[REP_3_6].Freq++;

  00083	66 ff 81 e4 0a
	00 00		 inc	 WORD PTR [rcx+2788]
  0008a	eb 16		 jmp	 SHORT $LN5@scan_tree
$LN9@scan_tree:

; 730  :         } else if (count <= 10) {

  0008c	41 83 fa 0a	 cmp	 r10d, 10
  00090	7f 09		 jg	 SHORT $LN6@scan_tree

; 731  :             s->bl_tree[REPZ_3_10].Freq++;

  00092	66 ff 81 e8 0a
	00 00		 inc	 WORD PTR [rcx+2792]

; 732  :         } else {

  00099	eb 07		 jmp	 SHORT $LN5@scan_tree
$LN6@scan_tree:

; 733  :             s->bl_tree[REPZ_11_138].Freq++;

  0009b	66 ff 81 ec 0a
	00 00		 inc	 WORD PTR [rcx+2796]
$LN5@scan_tree:

; 734  :         }
; 735  :         count = 0; prevlen = curlen;

  000a2	45 33 d2	 xor	 r10d, r10d
  000a5	8b da		 mov	 ebx, edx

; 736  :         if (nextlen == 0) {

  000a7	85 ff		 test	 edi, edi
  000a9	75 0b		 jne	 SHORT $LN4@scan_tree

; 737  :             max_count = 138, min_count = 3;

  000ab	b8 8a 00 00 00	 mov	 eax, 138		; 0000008aH
  000b0	45 8d 4a 03	 lea	 r9d, QWORD PTR [r10+3]
  000b4	eb 18		 jmp	 SHORT $LN15@scan_tree
$LN4@scan_tree:

; 738  :         } else if (curlen == nextlen) {

  000b6	3b d7		 cmp	 edx, edi
  000b8	75 0b		 jne	 SHORT $LN2@scan_tree

; 739  :             max_count = 6, min_count = 3;

  000ba	b8 06 00 00 00	 mov	 eax, 6
  000bf	44 8d 48 fd	 lea	 r9d, QWORD PTR [rax-3]

; 740  :         } else {

  000c3	eb 09		 jmp	 SHORT $LN15@scan_tree
$LN2@scan_tree:

; 741  :             max_count = 7, min_count = 4;

  000c5	b8 07 00 00 00	 mov	 eax, 7
  000ca	44 8d 48 fd	 lea	 r9d, QWORD PTR [rax-3]
$LN15@scan_tree:

; 720  : 
; 721  :     for (n = 0; n <= max_code; n++) {

  000ce	49 83 c3 04	 add	 r11, 4
  000d2	49 ff c8	 dec	 r8
  000d5	0f 85 75 ff ff
	ff		 jne	 $LL16@scan_tree
$LN14@scan_tree:

; 742  :         }
; 743  :     }
; 744  : }

  000db	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  000e0	48 8b 7c 24 10	 mov	 rdi, QWORD PTR [rsp+16]
  000e5	c3		 ret	 0
scan_tree ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_codes DD imagerel gen_codes
	DD	imagerel gen_codes+115
	DD	imagerel $unwind$gen_codes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_codes DD 020601H
	DD	030027206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT gen_codes
_TEXT	SEGMENT
next_code$ = 32
tree$ = 80
max_code$ = 88
bl_count$ = 96
gen_codes PROC						; COMDAT

; 579  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 580  :     ush next_code[MAX_BITS+1]; /* next code value for each bit length */
; 581  :     ush code = 0;              /* running code value */

  00006	45 33 c9	 xor	 r9d, r9d

; 582  :     int bits;                  /* bit index */
; 583  :     int n;                     /* code index */
; 584  : 
; 585  :     /* The distribution counts are first used to generate the code values
; 586  :      * without bit reversal.
; 587  :      */
; 588  :     for (bits = 1; bits <= MAX_BITS; bits++) {

  00009	48 8d 44 24 22	 lea	 rax, QWORD PTR next_code$[rsp+2]
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	4c 2b c0	 sub	 r8, rax
  00014	45 0f b7 d9	 movzx	 r11d, r9w
  00018	41 ba 01 00 00
	00		 mov	 r10d, 1
  0001e	66 90		 npad	 2
$LL7@gen_codes:
  00020	4b 8d 04 50	 lea	 rax, QWORD PTR [r8+r10*2]
  00024	49 ff c2	 inc	 r10

; 589  :         next_code[bits] = code = (code + bl_count[bits-1]) << 1;

  00027	66 44 03 5c 04
	20		 add	 r11w, WORD PTR next_code$[rsp+rax]
  0002d	66 45 03 db	 add	 r11w, r11w
  00031	66 46 89 5c 54
	1e		 mov	 WORD PTR next_code$[rsp+r10*2-2], r11w
  00037	49 83 fa 0f	 cmp	 r10, 15
  0003b	7e e3		 jle	 SHORT $LL7@gen_codes

; 590  :     }
; 591  :     /* Check that the bit counts in bl_count are consistent. The last code
; 592  :      * must be all ones.
; 593  :      */
; 594  :     Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
; 595  :             "inconsistent bit counts");
; 596  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 597  : 
; 598  :     for (n = 0;  n <= max_code; n++) {

  0003d	4c 63 d2	 movsxd	 r10, edx
  00040	85 d2		 test	 edx, edx
  00042	78 29		 js	 SHORT $LN2@gen_codes
$LL4@gen_codes:

; 599  :         int len = tree[n].Len;

  00044	42 0f b7 54 8b
	02		 movzx	 edx, WORD PTR [rbx+r9*4+2]

; 600  :         if (len == 0) continue;

  0004a	85 d2		 test	 edx, edx
  0004c	74 17		 je	 SHORT $LN3@gen_codes

; 601  :         /* Now reverse the bits */
; 602  :         tree[n].Code = bi_reverse(next_code[len]++, len);

  0004e	0f b7 4c 54 20	 movzx	 ecx, WORD PTR next_code$[rsp+rdx*2]
  00053	8d 41 01	 lea	 eax, DWORD PTR [rcx+1]
  00056	66 89 44 54 20	 mov	 WORD PTR next_code$[rsp+rdx*2], ax
  0005b	e8 00 00 00 00	 call	 bi_reverse
  00060	66 42 89 04 8b	 mov	 WORD PTR [rbx+r9*4], ax
$LN3@gen_codes:

; 590  :     }
; 591  :     /* Check that the bit counts in bl_count are consistent. The last code
; 592  :      * must be all ones.
; 593  :      */
; 594  :     Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
; 595  :             "inconsistent bit counts");
; 596  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 597  : 
; 598  :     for (n = 0;  n <= max_code; n++) {

  00065	49 ff c1	 inc	 r9
  00068	4d 3b ca	 cmp	 r9, r10
  0006b	7e d7		 jle	 SHORT $LL4@gen_codes
$LN2@gen_codes:

; 603  : 
; 604  :         Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
; 605  :              n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
; 606  :     }
; 607  : }

  0006d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00071	5b		 pop	 rbx
  00072	c3		 ret	 0
gen_codes ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_bitlen DD imagerel gen_bitlen
	DD	imagerel gen_bitlen+32
	DD	imagerel $unwind$gen_bitlen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$gen_bitlen DD imagerel gen_bitlen+32
	DD	imagerel gen_bitlen+129
	DD	imagerel $chain$2$gen_bitlen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$gen_bitlen DD imagerel gen_bitlen+129
	DD	imagerel gen_bitlen+307
	DD	imagerel $chain$3$gen_bitlen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$gen_bitlen DD imagerel gen_bitlen+307
	DD	imagerel gen_bitlen+329
	DD	imagerel $chain$4$gen_bitlen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$gen_bitlen DD imagerel gen_bitlen+329
	DD	imagerel gen_bitlen+539
	DD	imagerel $chain$5$gen_bitlen
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$gen_bitlen DD 021H
	DD	imagerel gen_bitlen
	DD	imagerel gen_bitlen+32
	DD	imagerel $unwind$gen_bitlen
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$gen_bitlen DD 021H
	DD	imagerel gen_bitlen+32
	DD	imagerel gen_bitlen+129
	DD	imagerel $chain$2$gen_bitlen
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$gen_bitlen DD 020521H
	DD	0ac405H
	DD	imagerel gen_bitlen+32
	DD	imagerel gen_bitlen+129
	DD	imagerel $chain$2$gen_bitlen
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$gen_bitlen DD 061a21H
	DD	0f41aH
	DD	01e411H
	DD	02d405H
	DD	imagerel gen_bitlen
	DD	imagerel gen_bitlen+32
	DD	imagerel $unwind$gen_bitlen
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_bitlen DD 050901H
	DD	070052209H
	DD	050036004H
	DD	03002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT gen_bitlen
_TEXT	SEGMENT
base$1$ = 64
s$ = 64
h$1$ = 72
desc$ = 72
gen_bitlen PROC						; COMDAT

; 491  : {

  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	48 83 ec 18	 sub	 rsp, 24

; 492  :     ct_data *tree        = desc->dyn_tree;
; 493  :     int max_code         = desc->max_code;
; 494  :     const ct_data *stree = desc->stat_desc->static_tree;

  00009	48 8b 42 10	 mov	 rax, QWORD PTR [rdx+16]
  0000d	4c 8b 1a	 mov	 r11, QWORD PTR [rdx]
  00010	8b 72 08	 mov	 esi, DWORD PTR [rdx+8]

; 495  :     const intf *extra    = desc->stat_desc->extra_bits;
; 496  :     int base             = desc->stat_desc->extra_base;

  00013	44 8b 48 10	 mov	 r9d, DWORD PTR [rax+16]

; 497  :     int max_length       = desc->stat_desc->max_length;

  00017	4c 63 50 18	 movsxd	 r10, DWORD PTR [rax+24]

; 498  :     int h;              /* heap index */
; 499  :     int n, m;           /* iterate over the tree elements */
; 500  :     int bits;           /* bit length */
; 501  :     int xbits;          /* extra bits */
; 502  :     ush f;              /* frequency */
; 503  :     int overflow = 0;   /* number of elements with bit length too large */

  0001b	33 db		 xor	 ebx, ebx
  0001d	4c 8b c1	 mov	 r8, rcx
  00020	4c 89 6c 24 10	 mov	 QWORD PTR [rsp+16], r13
  00025	48 8d b9 88 0b
	00 00		 lea	 rdi, QWORD PTR [rcx+2952]
  0002c	4c 89 74 24 08	 mov	 QWORD PTR [rsp+8], r14
  00031	4c 8b 30	 mov	 r14, QWORD PTR [rax]
  00034	8b d3		 mov	 edx, ebx
  00036	4c 89 3c 24	 mov	 QWORD PTR [rsp], r15
  0003a	4c 8b 78 08	 mov	 r15, QWORD PTR [rax+8]

; 504  : 
; 505  :     for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;

  0003e	0f b7 c3	 movzx	 eax, bx
  00041	b9 10 00 00 00	 mov	 ecx, 16

; 511  : 
; 512  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  00046	41 bd 3d 02 00
	00		 mov	 r13d, 573		; 0000023dH
  0004c	44 89 4c 24 40	 mov	 DWORD PTR base$1$[rsp], r9d
  00051	66 f3 ab	 rep stosw
  00054	49 63 80 a0 14
	00 00		 movsxd	 rax, DWORD PTR [r8+5280]
  0005b	49 63 8c 80 a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [r8+rax*4+2984]
  00063	66 41 89 5c 8b
	02		 mov	 WORD PTR [r11+rcx*4+2], bx
  00069	41 8b 98 a0 14
	00 00		 mov	 ebx, DWORD PTR [r8+5280]
  00070	ff c3		 inc	 ebx
  00072	48 63 c3	 movsxd	 rax, ebx
  00075	49 3b c5	 cmp	 rax, r13
  00078	0f 8d b5 00 00
	00		 jge	 $LN18@gen_bitlen

; 506  : 
; 507  :     /* In a first pass, compute the optimal bit lengths (which may
; 508  :      * overflow in the case of the bit length tree).
; 509  :      */
; 510  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

  0007e	4c 2b e8	 sub	 r13, rax
  00081	4c 89 64 24 50	 mov	 QWORD PTR [rsp+80], r12
  00086	4d 8d a4 80 a8
	0b 00 00	 lea	 r12, QWORD PTR [r8+rax*4+2984]

; 511  : 
; 512  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  0008e	41 03 dd	 add	 ebx, r13d
  00091	89 5c 24 48	 mov	 DWORD PTR h$1$[rsp], ebx
  00095	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL20@gen_bitlen:

; 513  :         n = s->heap[h];

  000a0	49 63 2c 24	 movsxd	 rbp, DWORD PTR [r12]

; 514  :         bits = tree[tree[n].Dad].Len + 1;

  000a4	48 8b fd	 mov	 rdi, rbp
  000a7	48 8d 1c ad 00
	00 00 00	 lea	 rbx, QWORD PTR [rbp*4]
  000af	42 0f b7 44 1b
	02		 movzx	 eax, WORD PTR [rbx+r11+2]
  000b5	41 0f b7 4c 83
	02		 movzx	 ecx, WORD PTR [r11+rax*4+2]
  000bb	ff c1		 inc	 ecx

; 515  :         if (bits > max_length) bits = max_length, overflow++;

  000bd	41 3b ca	 cmp	 ecx, r10d
  000c0	7e 05		 jle	 SHORT $LN17@gen_bitlen
  000c2	41 8b ca	 mov	 ecx, r10d
  000c5	ff c2		 inc	 edx
$LN17@gen_bitlen:

; 516  :         tree[n].Len = (ush)bits;

  000c7	66 42 89 4c 1b
	02		 mov	 WORD PTR [rbx+r11+2], cx

; 517  :         /* We overwrite tree[n].Dad which is no longer needed */
; 518  : 
; 519  :         if (n > max_code) continue; /* not a leaf node */

  000cd	3b ee		 cmp	 ebp, esi
  000cf	7f 4c		 jg	 SHORT $LN19@gen_bitlen

; 520  : 
; 521  :         s->bl_count[bits]++;

  000d1	48 63 c1	 movsxd	 rax, ecx

; 522  :         xbits = 0;

  000d4	45 33 c9	 xor	 r9d, r9d
  000d7	66 41 ff 84 40
	88 0b 00 00	 inc	 WORD PTR [r8+rax*2+2952]

; 523  :         if (n >= base) xbits = extra[n-base];

  000e0	3b 6c 24 40	 cmp	 ebp, DWORD PTR base$1$[rsp]
  000e4	7c 0c		 jl	 SHORT $LN15@gen_bitlen
  000e6	4c 63 4c 24 40	 movsxd	 r9, DWORD PTR base$1$[rsp]
  000eb	49 2b f9	 sub	 rdi, r9
  000ee	45 8b 0c bf	 mov	 r9d, DWORD PTR [r15+rdi*4]
$LN15@gen_bitlen:

; 524  :         f = tree[n].Freq;
; 525  :         s->opt_len += (ulg)f * (bits + xbits);

  000f2	42 0f b7 3c 1b	 movzx	 edi, WORD PTR [rbx+r11]
  000f7	41 8d 04 09	 lea	 eax, DWORD PTR [r9+rcx]
  000fb	0f af c7	 imul	 eax, edi
  000fe	41 01 80 00 17
	00 00		 add	 DWORD PTR [r8+5888], eax

; 526  :         if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);

  00105	4d 85 f6	 test	 r14, r14
  00108	74 13		 je	 SHORT $LN19@gen_bitlen
  0010a	42 0f b7 44 33
	02		 movzx	 eax, WORD PTR [rbx+r14+2]
  00110	41 03 c1	 add	 eax, r9d
  00113	0f af c7	 imul	 eax, edi
  00116	41 01 80 04 17
	00 00		 add	 DWORD PTR [r8+5892], eax
$LN19@gen_bitlen:

; 511  : 
; 512  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  0011d	49 83 c4 04	 add	 r12, 4
  00121	49 ff cd	 dec	 r13
  00124	0f 85 76 ff ff
	ff		 jne	 $LL20@gen_bitlen
  0012a	8b 5c 24 48	 mov	 ebx, DWORD PTR h$1$[rsp]
  0012e	4c 8b 64 24 50	 mov	 r12, QWORD PTR [rsp+80]
$LN18@gen_bitlen:
  00133	4c 8b 3c 24	 mov	 r15, QWORD PTR [rsp]
  00137	4c 8b 74 24 08	 mov	 r14, QWORD PTR [rsp+8]
  0013c	4c 8b 6c 24 10	 mov	 r13, QWORD PTR [rsp+16]

; 527  :     }
; 528  :     if (overflow == 0) return;

  00141	85 d2		 test	 edx, edx
  00143	0f 84 c9 00 00
	00		 je	 $LN5@gen_bitlen
  00149	45 8d 4a ff	 lea	 r9d, DWORD PTR [r10-1]
  0014d	bd ff ff 00 00	 mov	 ebp, 65535		; 0000ffffH
  00152	66 66 66 66 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL12@gen_bitlen:

; 529  : 
; 530  :     Trace((stderr,"\nbit length overflow\n"));
; 531  :     /* This happens for example on obj2 and pic of the Calgary corpus */
; 532  : 
; 533  :     /* Find the first bit length which could increase: */
; 534  :     do {
; 535  :         bits = max_length-1;

  00160	49 63 c9	 movsxd	 rcx, r9d

; 536  :         while (s->bl_count[bits] == 0) bits--;

  00163	66 41 83 bc 48
	88 0b 00 00 00	 cmp	 WORD PTR [r8+rcx*2+2952], 0
  0016d	75 12		 jne	 SHORT $LN8@gen_bitlen
  0016f	90		 npad	 1
$LL9@gen_bitlen:
  00170	ff c9		 dec	 ecx
  00172	48 63 c1	 movsxd	 rax, ecx
  00175	66 41 83 bc 40
	88 0b 00 00 00	 cmp	 WORD PTR [r8+rax*2+2952], 0
  0017f	74 ef		 je	 SHORT $LL9@gen_bitlen
$LN8@gen_bitlen:

; 537  :         s->bl_count[bits]--;      /* move one leaf down the tree */

  00181	48 63 c1	 movsxd	 rax, ecx

; 538  :         s->bl_count[bits+1] += 2; /* move one overflow item as its brother */
; 539  :         s->bl_count[max_length]--;
; 540  :         /* The brother of the overflow item also moves one step up,
; 541  :          * but this does not affect bl_count[max_length]
; 542  :          */
; 543  :         overflow -= 2;

  00184	83 ea 02	 sub	 edx, 2
  00187	66 41 01 ac 40
	88 0b 00 00	 add	 WORD PTR [r8+rax*2+2952], bp
  00190	66 41 83 84 40
	8a 0b 00 00 02	 add	 WORD PTR [r8+rax*2+2954], 2
  0019a	66 43 01 ac 50
	88 0b 00 00	 add	 WORD PTR [r8+r10*2+2952], bp

; 544  :     } while (overflow > 0);

  001a3	85 d2		 test	 edx, edx
  001a5	7f b9		 jg	 SHORT $LL12@gen_bitlen

; 545  : 
; 546  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 547  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 548  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 549  :      * from 'ar' written by Haruhiko Okumura.)
; 550  :      */
; 551  :     for (bits = max_length; bits != 0; bits--) {

  001a7	48 63 db	 movsxd	 rbx, ebx
  001aa	45 85 d2	 test	 r10d, r10d
  001ad	74 63		 je	 SHORT $LN5@gen_bitlen
  001af	90		 npad	 1
$LL7@gen_bitlen:

; 552  :         n = s->bl_count[bits];

  001b0	49 63 c2	 movsxd	 rax, r10d
  001b3	41 0f b7 94 40
	88 0b 00 00	 movzx	 edx, WORD PTR [r8+rax*2+2952]

; 553  :         while (n != 0) {

  001bc	85 d2		 test	 edx, edx
  001be	74 4d		 je	 SHORT $LN6@gen_bitlen

; 552  :         n = s->bl_count[bits];

  001c0	49 8d bc 98 a8
	0b 00 00	 lea	 rdi, QWORD PTR [r8+rbx*4+2984]
  001c8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@gen_bitlen:

; 554  :             m = s->heap[--h];

  001d0	48 63 47 fc	 movsxd	 rax, DWORD PTR [rdi-4]
  001d4	48 83 ef 04	 sub	 rdi, 4
  001d8	48 ff cb	 dec	 rbx

; 555  :             if (m > max_code) continue;

  001db	3b c6		 cmp	 eax, esi
  001dd	7f 2a		 jg	 SHORT $LN36@gen_bitlen

; 556  :             if ((unsigned) tree[m].Len != (unsigned) bits) {

  001df	4c 8b c8	 mov	 r9, rax
  001e2	41 0f b7 44 83
	02		 movzx	 eax, WORD PTR [r11+rax*4+2]
  001e8	41 3b c2	 cmp	 eax, r10d
  001eb	74 1a		 je	 SHORT $LN1@gen_bitlen

; 557  :                 Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
; 558  :                 s->opt_len += ((long)bits - (long)tree[m].Len)
; 559  :                               *(long)tree[m].Freq;

  001ed	41 8b ca	 mov	 ecx, r10d
  001f0	2b c8		 sub	 ecx, eax
  001f2	43 0f b7 04 8b	 movzx	 eax, WORD PTR [r11+r9*4]
  001f7	0f af c8	 imul	 ecx, eax
  001fa	41 01 88 00 17
	00 00		 add	 DWORD PTR [r8+5888], ecx

; 560  :                 tree[m].Len = (ush)bits;

  00201	66 47 89 54 8b
	02		 mov	 WORD PTR [r11+r9*4+2], r10w
$LN1@gen_bitlen:

; 561  :             }
; 562  :             n--;

  00207	ff ca		 dec	 edx
$LN36@gen_bitlen:

; 553  :         while (n != 0) {

  00209	85 d2		 test	 edx, edx
  0020b	75 c3		 jne	 SHORT $LL4@gen_bitlen
$LN6@gen_bitlen:

; 545  : 
; 546  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 547  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 548  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 549  :      * from 'ar' written by Haruhiko Okumura.)
; 550  :      */
; 551  :     for (bits = max_length; bits != 0; bits--) {

  0020d	41 ff ca	 dec	 r10d
  00210	75 9e		 jne	 SHORT $LL7@gen_bitlen
$LN5@gen_bitlen:

; 563  :         }
; 564  :     }
; 565  : }

  00212	48 83 c4 18	 add	 rsp, 24
  00216	5f		 pop	 rdi
  00217	5e		 pop	 rsi
  00218	5d		 pop	 rbp
  00219	5b		 pop	 rbx
  0021a	c3		 ret	 0
gen_bitlen ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$pqdownheap DD imagerel pqdownheap
	DD	imagerel pqdownheap+235
	DD	imagerel $unwind$pqdownheap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pqdownheap DD 060f01H
	DD	03740fH
	DD	02640aH
	DD	013405H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT pqdownheap
_TEXT	SEGMENT
s$ = 8
tree$ = 16
k$ = 24
pqdownheap PROC						; COMDAT

; 457  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi

; 458  :     int v = s->heap[k];
; 459  :     int j = k << 1;  /* left son of k */
; 460  :     while (j <= s->heap_len) {

  0000f	8b 81 9c 14 00
	00		 mov	 eax, DWORD PTR [rcx+5276]
  00015	4d 63 d0	 movsxd	 r10, r8d
  00018	48 8b fa	 mov	 rdi, rdx
  0001b	4a 63 9c 91 a8
	0b 00 00	 movsxd	 rbx, DWORD PTR [rcx+r10*4+2984]
  00023	47 8d 0c 12	 lea	 r9d, DWORD PTR [r10+r10]
  00027	44 3b c8	 cmp	 r9d, eax
  0002a	0f 8f 89 00 00
	00		 jg	 $LN14@pqdownheap
$LN16@pqdownheap:

; 461  :         /* Set j to the smallest of the two sons: */
; 462  :         if (j < s->heap_len &&
; 463  :             smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {

  00030	7d 3a		 jge	 SHORT $LN4@pqdownheap
  00032	49 63 c1	 movsxd	 rax, r9d
  00035	4c 63 9c 81 a8
	0b 00 00	 movsxd	 r11, DWORD PTR [rcx+rax*4+2984]
  0003d	4c 63 84 81 ac
	0b 00 00	 movsxd	 r8, DWORD PTR [rcx+rax*4+2988]
  00045	42 0f b7 04 87	 movzx	 eax, WORD PTR [rdi+r8*4]
  0004a	42 0f b7 14 9f	 movzx	 edx, WORD PTR [rdi+r11*4]
  0004f	66 3b c2	 cmp	 ax, dx
  00052	72 15		 jb	 SHORT $LN3@pqdownheap
  00054	75 16		 jne	 SHORT $LN4@pqdownheap
  00056	41 0f b6 84 0b
	a4 14 00 00	 movzx	 eax, BYTE PTR [r11+rcx+5284]
  0005f	41 38 84 08 a4
	14 00 00	 cmp	 BYTE PTR [r8+rcx+5284], al
  00067	77 03		 ja	 SHORT $LN4@pqdownheap
$LN3@pqdownheap:

; 464  :             j++;

  00069	41 ff c1	 inc	 r9d
$LN4@pqdownheap:

; 465  :         }
; 466  :         /* Exit if v is smaller than both sons */
; 467  :         if (smaller(tree, v, s->heap[j], s->depth)) break;

  0006c	49 63 c1	 movsxd	 rax, r9d
  0006f	4c 63 9c 81 a8
	0b 00 00	 movsxd	 r11, DWORD PTR [rcx+rax*4+2984]
  00077	0f b7 04 9f	 movzx	 eax, WORD PTR [rdi+rbx*4]
  0007b	42 0f b7 14 9f	 movzx	 edx, WORD PTR [rdi+r11*4]
  00080	66 3b c2	 cmp	 ax, dx
  00083	72 4c		 jb	 SHORT $LN13@pqdownheap
  00085	75 12		 jne	 SHORT $LN2@pqdownheap
  00087	41 0f b6 84 0b
	a4 14 00 00	 movzx	 eax, BYTE PTR [r11+rcx+5284]
  00090	38 84 0b a4 14
	00 00		 cmp	 BYTE PTR [rbx+rcx+5284], al
  00097	76 38		 jbe	 SHORT $LN13@pqdownheap
$LN2@pqdownheap:

; 468  : 
; 469  :         /* Exchange v with the smallest son */
; 470  :         s->heap[k] = s->heap[j];  k = j;

  00099	49 63 c2	 movsxd	 rax, r10d
  0009c	4d 63 d1	 movsxd	 r10, r9d

; 471  : 
; 472  :         /* And continue down the tree, setting j to the left son of k */
; 473  :         j <<= 1;

  0009f	45 03 c9	 add	 r9d, r9d
  000a2	44 89 9c 81 a8
	0b 00 00	 mov	 DWORD PTR [rcx+rax*4+2984], r11d
  000aa	8b 81 9c 14 00
	00		 mov	 eax, DWORD PTR [rcx+5276]
  000b0	44 3b c8	 cmp	 r9d, eax
  000b3	0f 8e 77 ff ff
	ff		 jle	 $LN16@pqdownheap
$LN14@pqdownheap:

; 474  :     }
; 475  :     s->heap[k] = v;

  000b9	42 89 9c 91 a8
	0b 00 00	 mov	 DWORD PTR [rcx+r10*4+2984], ebx

; 476  : }

  000c1	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  000c6	48 8b 74 24 10	 mov	 rsi, QWORD PTR [rsp+16]
  000cb	48 8b 7c 24 18	 mov	 rdi, QWORD PTR [rsp+24]
  000d0	c3		 ret	 0
$LN13@pqdownheap:
  000d1	48 8b 74 24 10	 mov	 rsi, QWORD PTR [rsp+16]
  000d6	48 8b 7c 24 18	 mov	 rdi, QWORD PTR [rsp+24]
  000db	49 63 c2	 movsxd	 rax, r10d
  000de	89 9c 81 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rax*4+2984], ebx
  000e5	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  000ea	c3		 ret	 0
pqdownheap ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT init_block
_TEXT	SEGMENT
s$ = 8
init_block PROC						; COMDAT

; 412  :     int n; /* iterates over tree elements */
; 413  : 
; 414  :     /* Initialize the trees. */
; 415  :     for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;

  00000	48 8d 81 bc 00
	00 00		 lea	 rax, QWORD PTR [rcx+188]
  00007	ba 1e 01 00 00	 mov	 edx, 286		; 0000011eH
  0000c	45 33 c0	 xor	 r8d, r8d
  0000f	90		 npad	 1
$LL9@init_block:
  00010	66 44 89 00	 mov	 WORD PTR [rax], r8w
  00014	48 83 c0 04	 add	 rax, 4
  00018	48 ff ca	 dec	 rdx
  0001b	75 f3		 jne	 SHORT $LL9@init_block

; 416  :     for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;

  0001d	48 8d 81 b0 09
	00 00		 lea	 rax, QWORD PTR [rcx+2480]
  00024	ba 1e 00 00 00	 mov	 edx, 30
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL6@init_block:
  00030	66 44 89 00	 mov	 WORD PTR [rax], r8w
  00034	48 83 c0 04	 add	 rax, 4
  00038	48 ff ca	 dec	 rdx
  0003b	75 f3		 jne	 SHORT $LL6@init_block

; 417  :     for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;

  0003d	48 8d 81 a4 0a
	00 00		 lea	 rax, QWORD PTR [rcx+2724]
  00044	ba 13 00 00 00	 mov	 edx, 19
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL3@init_block:
  00050	66 44 89 00	 mov	 WORD PTR [rax], r8w
  00054	48 83 c0 04	 add	 rax, 4
  00058	48 ff ca	 dec	 rdx
  0005b	75 f3		 jne	 SHORT $LL3@init_block

; 418  : 
; 419  :     s->dyn_ltree[END_BLOCK].Freq = 1;

  0005d	b8 01 00 00 00	 mov	 eax, 1

; 420  :     s->opt_len = s->static_len = 0L;

  00062	4c 89 81 00 17
	00 00		 mov	 QWORD PTR [rcx+5888], r8

; 421  :     s->last_lit = s->matches = 0;

  00069	44 89 81 08 17
	00 00		 mov	 DWORD PTR [rcx+5896], r8d
  00070	66 89 81 bc 04
	00 00		 mov	 WORD PTR [rcx+1212], ax
  00077	44 89 81 f4 16
	00 00		 mov	 DWORD PTR [rcx+5876], r8d

; 422  : }

  0007e	c3		 ret	 0
init_block ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT tr_static_init
_TEXT	SEGMENT
tr_static_init PROC					; COMDAT

; 236  : #if defined(GEN_TREES_H) || !defined(STDC)
; 237  :     static int static_init_done = 0;
; 238  :     int n;        /* iterates over tree elements */
; 239  :     int bits;     /* bit counter */
; 240  :     int length;   /* length value */
; 241  :     int code;     /* code value */
; 242  :     int dist;     /* distance index */
; 243  :     ush bl_count[MAX_BITS+1];
; 244  :     /* number of codes at each bit length for an optimal tree */
; 245  : 
; 246  :     if (static_init_done) return;
; 247  : 
; 248  :     /* For some embedded targets, global variables are not initialized: */
; 249  : #ifdef NO_INIT_GLOBAL_POINTERS
; 250  :     static_l_desc.static_tree = static_ltree;
; 251  :     static_l_desc.extra_bits = extra_lbits;
; 252  :     static_d_desc.static_tree = static_dtree;
; 253  :     static_d_desc.extra_bits = extra_dbits;
; 254  :     static_bl_desc.extra_bits = extra_blbits;
; 255  : #endif
; 256  : 
; 257  :     /* Initialize the mapping length (0..255) -> length code (0..28) */
; 258  :     length = 0;
; 259  :     for (code = 0; code < LENGTH_CODES-1; code++) {
; 260  :         base_length[code] = length;
; 261  :         for (n = 0; n < (1<<extra_lbits[code]); n++) {
; 262  :             _length_code[length++] = (uch)code;
; 263  :         }
; 264  :     }
; 265  :     Assert (length == 256, "tr_static_init: length != 256");
; 266  :     /* Note that the length 255 (match length 258) can be represented
; 267  :      * in two different ways: code 284 + 5 bits or code 285, so we
; 268  :      * overwrite length_code[255] to use the best encoding:
; 269  :      */
; 270  :     _length_code[length-1] = (uch)code;
; 271  : 
; 272  :     /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
; 273  :     dist = 0;
; 274  :     for (code = 0 ; code < 16; code++) {
; 275  :         base_dist[code] = dist;
; 276  :         for (n = 0; n < (1<<extra_dbits[code]); n++) {
; 277  :             _dist_code[dist++] = (uch)code;
; 278  :         }
; 279  :     }
; 280  :     Assert (dist == 256, "tr_static_init: dist != 256");
; 281  :     dist >>= 7; /* from now on, all distances are divided by 128 */
; 282  :     for ( ; code < D_CODES; code++) {
; 283  :         base_dist[code] = dist << 7;
; 284  :         for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
; 285  :             _dist_code[256 + dist++] = (uch)code;
; 286  :         }
; 287  :     }
; 288  :     Assert (dist == 256, "tr_static_init: 256+dist != 512");
; 289  : 
; 290  :     /* Construct the codes of the static literal tree */
; 291  :     for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
; 292  :     n = 0;
; 293  :     while (n <= 143) static_ltree[n++].Len = 8, bl_count[8]++;
; 294  :     while (n <= 255) static_ltree[n++].Len = 9, bl_count[9]++;
; 295  :     while (n <= 279) static_ltree[n++].Len = 7, bl_count[7]++;
; 296  :     while (n <= 287) static_ltree[n++].Len = 8, bl_count[8]++;
; 297  :     /* Codes 286 and 287 do not exist, but we must include them in the
; 298  :      * tree construction to get a canonical Huffman tree (longest code
; 299  :      * all ones)
; 300  :      */
; 301  :     gen_codes((ct_data *)static_ltree, L_CODES+1, bl_count);
; 302  : 
; 303  :     /* The static distance tree is trivial: */
; 304  :     for (n = 0; n < D_CODES; n++) {
; 305  :         static_dtree[n].Len = 5;
; 306  :         static_dtree[n].Code = bi_reverse((unsigned)n, 5);
; 307  :     }
; 308  :     static_init_done = 1;
; 309  : 
; 310  : #  ifdef GEN_TREES_H
; 311  :     gen_trees_header();
; 312  : #  endif
; 313  : #endif /* defined(GEN_TREES_H) || !defined(STDC) */
; 314  : }

  00000	c2 00 00	 ret	 0
tr_static_init ENDP
;	COMDAT pdata
pdata	SEGMENT
$pdata$copy_block DD imagerel copy_block
	DD	imagerel copy_block+167
	DD	imagerel $unwind$copy_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$copy_block DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT copy_block
_TEXT	SEGMENT
s$ = 48
buf$ = 56
len$ = 64
copy_block PROC						; COMDAT

; 1208 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	41 8b d8	 mov	 ebx, r8d
  0000d	48 8b fa	 mov	 rdi, rdx
  00010	4c 8b d9	 mov	 r11, rcx

; 1209 :     bi_windup(s);        /* align on byte boundary */

  00013	e8 00 00 00 00	 call	 bi_windup

; 1210 : 
; 1211 :     if (header) {
; 1212 :         put_short(s, (ush)len);

  00018	45 8b 4b 28	 mov	 r9d, DWORD PTR [r11+40]
  0001c	49 8b 43 10	 mov	 rax, QWORD PTR [r11+16]
  00020	41 88 1c 01	 mov	 BYTE PTR [r9+rax], bl
  00024	41 ff 43 28	 inc	 DWORD PTR [r11+40]
  00028	45 8b 53 28	 mov	 r10d, DWORD PTR [r11+40]
  0002c	49 8b 43 10	 mov	 rax, QWORD PTR [r11+16]

; 1213 :         put_short(s, (ush)~len);

  00030	0f b6 cb	 movzx	 ecx, bl
  00033	44 0f b7 cb	 movzx	 r9d, bx
  00037	f6 d1		 not	 cl
  00039	66 41 c1 e9 08	 shr	 r9w, 8
  0003e	45 88 0c 02	 mov	 BYTE PTR [r10+rax], r9b
  00042	41 ff 43 28	 inc	 DWORD PTR [r11+40]
  00046	41 8b 53 28	 mov	 edx, DWORD PTR [r11+40]
  0004a	49 8b 43 10	 mov	 rax, QWORD PTR [r11+16]
  0004e	88 0c 02	 mov	 BYTE PTR [rdx+rax], cl
  00051	41 ff 43 28	 inc	 DWORD PTR [r11+40]
  00055	41 8b 53 28	 mov	 edx, DWORD PTR [r11+40]
  00059	49 8b 43 10	 mov	 rax, QWORD PTR [r11+16]
  0005d	0f b7 cb	 movzx	 ecx, bx
  00060	66 f7 d1	 not	 cx
  00063	66 c1 e9 08	 shr	 cx, 8
  00067	88 0c 02	 mov	 BYTE PTR [rdx+rax], cl
  0006a	41 ff 43 28	 inc	 DWORD PTR [r11+40]
  0006e	45 8b 43 28	 mov	 r8d, DWORD PTR [r11+40]

; 1214 : #ifdef DEBUG
; 1215 :         s->bits_sent += 2*16;
; 1216 : #endif
; 1217 :     }
; 1218 : #ifdef DEBUG
; 1219 :     s->bits_sent += (ulg)len<<3;
; 1220 : #endif
; 1221 :     while (len--) {

  00072	85 db		 test	 ebx, ebx
  00074	74 26		 je	 SHORT $LN7@copy_block
  00076	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL2@copy_block:

; 1222 :         put_byte(s, *buf++);

  00080	0f b6 07	 movzx	 eax, BYTE PTR [rdi]
  00083	49 8b 4b 10	 mov	 rcx, QWORD PTR [r11+16]
  00087	41 8b d0	 mov	 edx, r8d
  0008a	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0008d	41 ff 43 28	 inc	 DWORD PTR [r11+40]
  00091	45 8b 43 28	 mov	 r8d, DWORD PTR [r11+40]
  00095	48 ff c7	 inc	 rdi
  00098	ff cb		 dec	 ebx
  0009a	75 e4		 jne	 SHORT $LL2@copy_block
$LN7@copy_block:

; 1223 :     }
; 1224 : }

  0009c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a5	5f		 pop	 rdi
  000a6	c3		 ret	 0
copy_block ENDP
_TEXT	ENDS
PUBLIC	_tr_stored_block
; Function compile flags: /Ogtpy
;	COMDAT _tr_stored_block
_TEXT	SEGMENT
s$ = 8
buf$ = 16
stored_len$ = 24
last$ = 32
_tr_stored_block PROC					; COMDAT

; 870  : {

  00000	4c 8b d1	 mov	 r10, rcx

; 871  :     send_bits(s, (STORED_BLOCK<<1)+last, 3);    /* send block type */

  00003	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00009	4c 8b da	 mov	 r11, rdx
  0000c	83 f9 0d	 cmp	 ecx, 13
  0000f	7e 5c		 jle	 SHORT $LN2@tr_stored_
  00011	41 8b 52 28	 mov	 edx, DWORD PTR [r10+40]
  00015	41 0f b7 c1	 movzx	 eax, r9w
  00019	66 d3 e0	 shl	 ax, cl
  0001c	49 8b 4a 10	 mov	 rcx, QWORD PTR [r10+16]
  00020	66 41 09 82 10
	17 00 00	 or	 WORD PTR [r10+5904], ax
  00028	41 0f b6 82 10
	17 00 00	 movzx	 eax, BYTE PTR [r10+5904]
  00030	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00033	41 ff 42 28	 inc	 DWORD PTR [r10+40]
  00037	41 8b 52 28	 mov	 edx, DWORD PTR [r10+40]
  0003b	41 0f b6 82 11
	17 00 00	 movzx	 eax, BYTE PTR [r10+5905]
  00043	49 8b 4a 10	 mov	 rcx, QWORD PTR [r10+16]
  00047	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0004a	41 8b 92 14 17
	00 00		 mov	 edx, DWORD PTR [r10+5908]
  00051	41 ff 42 28	 inc	 DWORD PTR [r10+40]
  00055	b9 10 00 00 00	 mov	 ecx, 16
  0005a	8d 42 f3	 lea	 eax, DWORD PTR [rdx-13]
  0005d	2a ca		 sub	 cl, dl
  0005f	66 41 d3 e9	 shr	 r9w, cl
  00063	66 45 89 8a 10
	17 00 00	 mov	 WORD PTR [r10+5904], r9w
  0006b	eb 0f		 jmp	 SHORT $LN5@tr_stored_
$LN2@tr_stored_:
  0006d	66 41 d3 e1	 shl	 r9w, cl
  00071	8d 41 03	 lea	 eax, DWORD PTR [rcx+3]
  00074	66 45 09 8a 10
	17 00 00	 or	 WORD PTR [r10+5904], r9w
$LN5@tr_stored_:

; 872  : #ifdef DEBUG
; 873  :     s->compressed_len = (s->compressed_len + 3 + 7) & (ulg)~7L;
; 874  :     s->compressed_len += (stored_len + 4) << 3;
; 875  : #endif
; 876  :     copy_block(s, buf, (unsigned)stored_len, 1); /* with header */

  0007c	49 8b d3	 mov	 rdx, r11
  0007f	49 8b ca	 mov	 rcx, r10
  00082	41 89 82 14 17
	00 00		 mov	 DWORD PTR [r10+5908], eax

; 877  : }

  00089	e9 00 00 00 00	 jmp	 copy_block
_tr_stored_block ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$send_all_trees DD imagerel send_all_trees
	DD	imagerel send_all_trees+616
	DD	imagerel $unwind$send_all_trees
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$send_all_trees DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT send_all_trees
_TEXT	SEGMENT
s$ = 48
lcodes$ = 56
dcodes$ = 64
blcodes$ = 72
send_all_trees PROC					; COMDAT

; 839  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b d9	 mov	 rbx, rcx

; 840  :     int rank;                    /* index in bl_order */
; 841  : 
; 842  :     Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
; 843  :     Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
; 844  :             "too many codes");
; 845  :     Tracev((stderr, "\nbl counts: "));
; 846  :     send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */

  00012	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00018	45 8b d9	 mov	 r11d, r9d
  0001b	41 8b f8	 mov	 edi, r8d
  0001e	8b f2		 mov	 esi, edx
  00020	83 f9 0b	 cmp	 ecx, 11
  00023	7e 5b		 jle	 SHORT $LN11@send_all_t
  00025	44 8d 92 ff fe
	ff ff		 lea	 r10d, DWORD PTR [rdx-257]
  0002c	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  0002f	41 0f b7 c2	 movzx	 eax, r10w
  00033	66 d3 e0	 shl	 ax, cl
  00036	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0003a	66 09 83 10 17
	00 00		 or	 WORD PTR [rbx+5904], ax
  00041	0f b6 83 10 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5904]
  00048	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0004b	ff 43 28	 inc	 DWORD PTR [rbx+40]
  0004e	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  00051	0f b6 83 11 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5905]
  00058	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0005c	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0005f	8b 93 14 17 00
	00		 mov	 edx, DWORD PTR [rbx+5908]
  00065	ff 43 28	 inc	 DWORD PTR [rbx+40]
  00068	b9 10 00 00 00	 mov	 ecx, 16
  0006d	8d 42 f5	 lea	 eax, DWORD PTR [rdx-11]
  00070	2a ca		 sub	 cl, dl
  00072	66 41 d3 ea	 shr	 r10w, cl
  00076	66 44 89 93 10
	17 00 00	 mov	 WORD PTR [rbx+5904], r10w
  0007e	eb 18		 jmp	 SHORT $LN16@send_all_t
$LN11@send_all_t:
  00080	0f b7 c6	 movzx	 eax, si
  00083	ba 01 01 00 00	 mov	 edx, 257		; 00000101H
  00088	66 2b c2	 sub	 ax, dx
  0008b	66 d3 e0	 shl	 ax, cl
  0008e	66 09 83 10 17
	00 00		 or	 WORD PTR [rbx+5904], ax
  00095	8d 41 05	 lea	 eax, DWORD PTR [rcx+5]
$LN16@send_all_t:
  00098	89 83 14 17 00
	00		 mov	 DWORD PTR [rbx+5908], eax

; 847  :     send_bits(s, dcodes-1,   5);

  0009e	8b c8		 mov	 ecx, eax
  000a0	83 f8 0b	 cmp	 eax, 11
  000a3	7e 57		 jle	 SHORT $LN9@send_all_t
  000a5	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  000a8	41 ff c8	 dec	 r8d
  000ab	41 0f b7 c0	 movzx	 eax, r8w
  000af	66 d3 e0	 shl	 ax, cl
  000b2	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  000b6	66 09 83 10 17
	00 00		 or	 WORD PTR [rbx+5904], ax
  000bd	0f b6 83 10 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5904]
  000c4	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  000c7	ff 43 28	 inc	 DWORD PTR [rbx+40]
  000ca	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  000cd	0f b6 83 11 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5905]
  000d4	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  000d8	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  000db	8b 93 14 17 00
	00		 mov	 edx, DWORD PTR [rbx+5908]
  000e1	ff 43 28	 inc	 DWORD PTR [rbx+40]
  000e4	b9 10 00 00 00	 mov	 ecx, 16
  000e9	8d 42 f5	 lea	 eax, DWORD PTR [rdx-11]
  000ec	2a ca		 sub	 cl, dl
  000ee	66 41 d3 e8	 shr	 r8w, cl
  000f2	66 44 89 83 10
	17 00 00	 mov	 WORD PTR [rbx+5904], r8w
  000fa	eb 11		 jmp	 SHORT $LN17@send_all_t
$LN9@send_all_t:
  000fc	41 8d 40 ff	 lea	 eax, DWORD PTR [r8-1]
  00100	66 d3 e0	 shl	 ax, cl
  00103	66 09 83 10 17
	00 00		 or	 WORD PTR [rbx+5904], ax
  0010a	8d 41 05	 lea	 eax, DWORD PTR [rcx+5]
$LN17@send_all_t:
  0010d	89 83 14 17 00
	00		 mov	 DWORD PTR [rbx+5908], eax

; 848  :     send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */

  00113	8b c8		 mov	 ecx, eax
  00115	83 f8 0c	 cmp	 eax, 12
  00118	7e 58		 jle	 SHORT $LN7@send_all_t
  0011a	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  0011d	45 8d 43 fc	 lea	 r8d, DWORD PTR [r11-4]
  00121	41 0f b7 c0	 movzx	 eax, r8w
  00125	66 d3 e0	 shl	 ax, cl
  00128	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0012c	66 09 83 10 17
	00 00		 or	 WORD PTR [rbx+5904], ax
  00133	0f b6 83 10 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5904]
  0013a	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0013d	ff 43 28	 inc	 DWORD PTR [rbx+40]
  00140	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  00143	0f b6 83 11 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5905]
  0014a	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0014e	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00151	8b 93 14 17 00
	00		 mov	 edx, DWORD PTR [rbx+5908]
  00157	ff 43 28	 inc	 DWORD PTR [rbx+40]
  0015a	b9 10 00 00 00	 mov	 ecx, 16
  0015f	8d 42 f4	 lea	 eax, DWORD PTR [rdx-12]
  00162	2a ca		 sub	 cl, dl
  00164	66 41 d3 e8	 shr	 r8w, cl
  00168	66 44 89 83 10
	17 00 00	 mov	 WORD PTR [rbx+5904], r8w
  00170	eb 11		 jmp	 SHORT $LN18@send_all_t
$LN7@send_all_t:
  00172	41 8d 43 fc	 lea	 eax, DWORD PTR [r11-4]
  00176	66 d3 e0	 shl	 ax, cl
  00179	66 09 83 10 17
	00 00		 or	 WORD PTR [rbx+5904], ax
  00180	8d 41 04	 lea	 eax, DWORD PTR [rcx+4]
$LN18@send_all_t:
  00183	89 83 14 17 00
	00		 mov	 DWORD PTR [rbx+5908], eax

; 849  :     for (rank = 0; rank < blcodes; rank++) {

  00189	45 85 db	 test	 r11d, r11d
  0018c	0f 8e a1 00 00
	00		 jle	 $LN3@send_all_t
  00192	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:bl_order
  00199	4d 8b d3	 mov	 r10, r11
  0019c	0f 1f 40 00	 npad	 4
$LL5@send_all_t:

; 850  :         Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
; 851  :         send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);

  001a0	8b 8b 14 17 00
	00		 mov	 ecx, DWORD PTR [rbx+5908]
  001a6	41 0f b6 01	 movzx	 eax, BYTE PTR [r9]
  001aa	83 f9 0d	 cmp	 ecx, 13
  001ad	7e 5d		 jle	 SHORT $LN2@send_all_t
  001af	44 0f b7 84 83
	a6 0a 00 00	 movzx	 r8d, WORD PTR [rbx+rax*4+2726]
  001b8	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  001bb	41 0f b7 c0	 movzx	 eax, r8w
  001bf	66 d3 e0	 shl	 ax, cl
  001c2	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  001c6	66 09 83 10 17
	00 00		 or	 WORD PTR [rbx+5904], ax
  001cd	0f b6 83 10 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5904]
  001d4	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  001d7	ff 43 28	 inc	 DWORD PTR [rbx+40]
  001da	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  001dd	0f b6 83 11 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5905]
  001e4	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  001e8	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  001eb	8b 93 14 17 00
	00		 mov	 edx, DWORD PTR [rbx+5908]
  001f1	ff 43 28	 inc	 DWORD PTR [rbx+40]
  001f4	b9 10 00 00 00	 mov	 ecx, 16
  001f9	8d 42 f3	 lea	 eax, DWORD PTR [rdx-13]
  001fc	2a ca		 sub	 cl, dl
  001fe	66 41 d3 e8	 shr	 r8w, cl
  00202	66 44 89 83 10
	17 00 00	 mov	 WORD PTR [rbx+5904], r8w
  0020a	eb 15		 jmp	 SHORT $LN19@send_all_t
$LN2@send_all_t:
  0020c	0f b7 94 83 a6
	0a 00 00	 movzx	 edx, WORD PTR [rbx+rax*4+2726]
  00214	8d 41 03	 lea	 eax, DWORD PTR [rcx+3]
  00217	66 d3 e2	 shl	 dx, cl
  0021a	66 09 93 10 17
	00 00		 or	 WORD PTR [rbx+5904], dx
$LN19@send_all_t:

; 849  :     for (rank = 0; rank < blcodes; rank++) {

  00221	49 ff c1	 inc	 r9
  00224	49 ff ca	 dec	 r10

; 850  :         Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
; 851  :         send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);

  00227	89 83 14 17 00
	00		 mov	 DWORD PTR [rbx+5908], eax
  0022d	0f 85 6d ff ff
	ff		 jne	 $LL5@send_all_t
$LN3@send_all_t:

; 852  :     }
; 853  :     Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
; 854  : 
; 855  :     send_tree(s, (ct_data *)s->dyn_ltree, lcodes-1); /* literal tree */

  00233	44 8d 46 ff	 lea	 r8d, DWORD PTR [rsi-1]
  00237	48 8d 93 bc 00
	00 00		 lea	 rdx, QWORD PTR [rbx+188]
  0023e	48 8b cb	 mov	 rcx, rbx
  00241	e8 00 00 00 00	 call	 send_tree

; 856  :     Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
; 857  : 
; 858  :     send_tree(s, (ct_data *)s->dyn_dtree, dcodes-1); /* distance tree */

  00246	44 8d 47 ff	 lea	 r8d, DWORD PTR [rdi-1]
  0024a	48 8d 93 b0 09
	00 00		 lea	 rdx, QWORD PTR [rbx+2480]
  00251	48 8b cb	 mov	 rcx, rbx

; 859  :     Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
; 860  : }

  00254	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00259	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0025e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00262	5f		 pop	 rdi
  00263	e9 00 00 00 00	 jmp	 send_tree
send_all_trees ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$build_tree DD imagerel build_tree
	DD	imagerel build_tree+587
	DD	imagerel $unwind$build_tree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$build_tree DD 0c1e01H
	DD	0b741eH
	DD	0a641eH
	DD	09541eH
	DD	08341eH
	DD	0e01a321eH
	DD	0c016d018H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT build_tree
_TEXT	SEGMENT
s$ = 64
desc$ = 72
build_tree PROC						; COMDAT

; 620  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	41 55		 push	 r13
  00018	41 56		 push	 r14
  0001a	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 621  :     ct_data *tree         = desc->dyn_tree;
; 622  :     const ct_data *stree  = desc->stat_desc->static_tree;

  0001e	48 8b 42 10	 mov	 rax, QWORD PTR [rdx+16]
  00022	48 8b 32	 mov	 rsi, QWORD PTR [rdx]

; 623  :     int elems             = desc->stat_desc->elems;
; 624  :     int n, m;          /* iterate over heap elements */
; 625  :     int max_code = -1; /* largest code with non zero frequency */
; 626  :     int node;          /* new node being created */
; 627  : 
; 628  :     /* Construct the initial heap, with least frequent element in
; 629  :      * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
; 630  :      * heap[0] is not used.
; 631  :      */
; 632  :     s->heap_len = 0, s->heap_max = HEAP_SIZE;

  00025	45 33 d2	 xor	 r10d, r10d
  00028	4c 63 60 14	 movsxd	 r12, DWORD PTR [rax+20]
  0002c	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  0002f	83 cd ff	 or	 ebp, -1
  00032	48 8b f9	 mov	 rdi, rcx
  00035	44 89 91 9c 14
	00 00		 mov	 DWORD PTR [rcx+5276], r10d
  0003c	c7 81 a0 14 00
	00 3d 02 00 00	 mov	 DWORD PTR [rcx+5280], 573 ; 0000023dH
  00046	4c 8b ea	 mov	 r13, rdx

; 633  : 
; 634  :     for (n = 0; n < elems; n++) {

  00049	45 8b c2	 mov	 r8d, r10d
  0004c	41 8b ca	 mov	 ecx, r10d
  0004f	45 85 e4	 test	 r12d, r12d
  00052	7e 3a		 jle	 SHORT $LN22@build_tree
$LL14@build_tree:

; 635  :         if (tree[n].Freq != 0) {

  00054	66 44 39 14 8e	 cmp	 WORD PTR [rsi+rcx*4], r10w
  00059	74 22		 je	 SHORT $LN11@build_tree

; 636  :             s->heap[++(s->heap_len)] = max_code = n;

  0005b	ff 87 9c 14 00
	00		 inc	 DWORD PTR [rdi+5276]
  00061	48 63 87 9c 14
	00 00		 movsxd	 rax, DWORD PTR [rdi+5276]
  00068	41 8b e8	 mov	 ebp, r8d
  0006b	44 89 84 87 a8
	0b 00 00	 mov	 DWORD PTR [rdi+rax*4+2984], r8d

; 637  :             s->depth[n] = 0;

  00073	44 88 94 39 a4
	14 00 00	 mov	 BYTE PTR [rcx+rdi+5284], r10b

; 638  :         } else {

  0007b	eb 06		 jmp	 SHORT $LN13@build_tree
$LN11@build_tree:

; 639  :             tree[n].Len = 0;

  0007d	66 44 89 54 8e
	02		 mov	 WORD PTR [rsi+rcx*4+2], r10w
$LN13@build_tree:

; 633  : 
; 634  :     for (n = 0; n < elems; n++) {

  00083	48 ff c1	 inc	 rcx
  00086	41 ff c0	 inc	 r8d
  00089	49 3b cc	 cmp	 rcx, r12
  0008c	7c c6		 jl	 SHORT $LL14@build_tree
$LN22@build_tree:

; 640  :         }
; 641  :     }
; 642  : 
; 643  :     /* The pkzip format requires that at least one distance code exists,
; 644  :      * and that at least one bit should be sent even if there is only one
; 645  :      * possible code. So to avoid special checks later on we force at least
; 646  :      * two codes of non zero frequency.
; 647  :      */
; 648  :     while (s->heap_len < 2) {

  0008e	83 bf 9c 14 00
	00 02		 cmp	 DWORD PTR [rdi+5276], 2
  00095	41 be 01 00 00
	00		 mov	 r14d, 1
  0009b	7d 55		 jge	 SHORT $LN8@build_tree
  0009d	0f 1f 00	 npad	 3
$LL9@build_tree:

; 649  :         node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);

  000a0	83 fd 02	 cmp	 ebp, 2
  000a3	7d 06		 jge	 SHORT $LN17@build_tree
  000a5	ff c5		 inc	 ebp
  000a7	8b cd		 mov	 ecx, ebp
  000a9	eb 03		 jmp	 SHORT $LN18@build_tree
$LN17@build_tree:
  000ab	41 8b ca	 mov	 ecx, r10d
$LN18@build_tree:
  000ae	ff 87 9c 14 00
	00		 inc	 DWORD PTR [rdi+5276]
  000b4	48 63 87 9c 14
	00 00		 movsxd	 rax, DWORD PTR [rdi+5276]
  000bb	89 8c 87 a8 0b
	00 00		 mov	 DWORD PTR [rdi+rax*4+2984], ecx

; 650  :         tree[node].Freq = 1;

  000c2	48 63 c1	 movsxd	 rax, ecx
  000c5	66 44 89 34 86	 mov	 WORD PTR [rsi+rax*4], r14w

; 651  :         s->depth[node] = 0;

  000ca	44 88 94 38 a4
	14 00 00	 mov	 BYTE PTR [rax+rdi+5284], r10b

; 652  :         s->opt_len--; if (stree) s->static_len -= stree[node].Len;

  000d2	ff 8f 00 17 00
	00		 dec	 DWORD PTR [rdi+5888]
  000d8	4d 85 c9	 test	 r9, r9
  000db	74 0c		 je	 SHORT $LN7@build_tree
  000dd	41 0f b7 44 81
	02		 movzx	 eax, WORD PTR [r9+rax*4+2]
  000e3	29 87 04 17 00
	00		 sub	 DWORD PTR [rdi+5892], eax
$LN7@build_tree:

; 640  :         }
; 641  :     }
; 642  : 
; 643  :     /* The pkzip format requires that at least one distance code exists,
; 644  :      * and that at least one bit should be sent even if there is only one
; 645  :      * possible code. So to avoid special checks later on we force at least
; 646  :      * two codes of non zero frequency.
; 647  :      */
; 648  :     while (s->heap_len < 2) {

  000e9	83 bf 9c 14 00
	00 02		 cmp	 DWORD PTR [rdi+5276], 2
  000f0	7c ae		 jl	 SHORT $LL9@build_tree
$LN8@build_tree:

; 653  :         /* node is 0 or 1 so it does not have extra bits */
; 654  :     }
; 655  :     desc->max_code = max_code;

  000f2	89 6a 08	 mov	 DWORD PTR [rdx+8], ebp

; 656  : 
; 657  :     /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
; 658  :      * establish sub-heaps of increasing lengths:
; 659  :      */
; 660  :     for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);

  000f5	8b 87 9c 14 00
	00		 mov	 eax, DWORD PTR [rdi+5276]
  000fb	99		 cdq
  000fc	2b c2		 sub	 eax, edx
  000fe	d1 f8		 sar	 eax, 1
  00100	8b d8		 mov	 ebx, eax
  00102	41 3b c6	 cmp	 eax, r14d
  00105	7c 29		 jl	 SHORT $LL3@build_tree
  00107	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL6@build_tree:
  00110	44 8b c3	 mov	 r8d, ebx
  00113	48 8b d6	 mov	 rdx, rsi
  00116	48 8b cf	 mov	 rcx, rdi
  00119	e8 00 00 00 00	 call	 pqdownheap
  0011e	ff cb		 dec	 ebx
  00120	41 3b de	 cmp	 ebx, r14d
  00123	7d eb		 jge	 SHORT $LL6@build_tree
  00125	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL3@build_tree:

; 661  : 
; 662  :     /* Construct the Huffman tree by repeatedly combining the least two
; 663  :      * frequent nodes.
; 664  :      */
; 665  :     node = elems;              /* next internal node of the tree */
; 666  :     do {
; 667  :         pqremove(s, tree, n);  /* n = node of least frequency */

  00130	48 63 97 9c 14
	00 00		 movsxd	 rdx, DWORD PTR [rdi+5276]
  00137	48 63 9f ac 0b
	00 00		 movsxd	 rbx, DWORD PTR [rdi+2988]
  0013e	45 8b c6	 mov	 r8d, r14d
  00141	8b 8c 97 a8 0b
	00 00		 mov	 ecx, DWORD PTR [rdi+rdx*4+2984]
  00148	8d 42 ff	 lea	 eax, DWORD PTR [rdx-1]
  0014b	48 8b d6	 mov	 rdx, rsi
  0014e	89 8f ac 0b 00
	00		 mov	 DWORD PTR [rdi+2988], ecx
  00154	48 8b cf	 mov	 rcx, rdi
  00157	89 87 9c 14 00
	00		 mov	 DWORD PTR [rdi+5276], eax
  0015d	e8 00 00 00 00	 call	 pqdownheap

; 668  :         m = s->heap[SMALLEST]; /* m = node of next least frequency */
; 669  : 
; 670  :         s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */

  00162	ff 8f a0 14 00
	00		 dec	 DWORD PTR [rdi+5280]
  00168	48 63 8f ac 0b
	00 00		 movsxd	 rcx, DWORD PTR [rdi+2988]
  0016f	48 63 87 a0 14
	00 00		 movsxd	 rax, DWORD PTR [rdi+5280]

; 671  :         s->heap[--(s->heap_max)] = m;
; 672  : 
; 673  :         /* Create a new node father of n and m */
; 674  :         tree[node].Freq = tree[n].Freq + tree[m].Freq;

  00176	4d 63 cc	 movsxd	 r9, r12d
  00179	48 8b d1	 mov	 rdx, rcx
  0017c	89 9c 87 a8 0b
	00 00		 mov	 DWORD PTR [rdi+rax*4+2984], ebx
  00183	ff 8f a0 14 00
	00		 dec	 DWORD PTR [rdi+5280]
  00189	48 63 87 a0 14
	00 00		 movsxd	 rax, DWORD PTR [rdi+5280]
  00190	89 8c 87 a8 0b
	00 00		 mov	 DWORD PTR [rdi+rax*4+2984], ecx
  00197	0f b7 04 8e	 movzx	 eax, WORD PTR [rsi+rcx*4]
  0019b	66 03 04 9e	 add	 ax, WORD PTR [rsi+rbx*4]
  0019f	66 42 89 04 8e	 mov	 WORD PTR [rsi+r9*4], ax

; 675  :         s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?
; 676  :                                 s->depth[n] : s->depth[m]) + 1);

  001a4	0f b6 84 3b a4
	14 00 00	 movzx	 eax, BYTE PTR [rbx+rdi+5284]
  001ac	0f b6 8c 39 a4
	14 00 00	 movzx	 ecx, BYTE PTR [rcx+rdi+5284]
  001b4	3a c1		 cmp	 al, cl
  001b6	0f b6 c0	 movzx	 eax, al
  001b9	73 03		 jae	 SHORT $LN20@build_tree
  001bb	0f b6 c1	 movzx	 eax, cl
$LN20@build_tree:
  001be	fe c0		 inc	 al

; 677  :         tree[n].Dad = tree[m].Dad = (ush)node;
; 678  : #ifdef DUMP_BL_TREE
; 679  :         if (tree == s->bl_tree) {
; 680  :             fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
; 681  :                     node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
; 682  :         }
; 683  : #endif
; 684  :         /* and insert the new node in the heap */
; 685  :         s->heap[SMALLEST] = node++;
; 686  :         pqdownheap(s, tree, SMALLEST);

  001c0	45 8b c6	 mov	 r8d, r14d
  001c3	48 8b cf	 mov	 rcx, rdi
  001c6	41 88 84 39 a4
	14 00 00	 mov	 BYTE PTR [r9+rdi+5284], al
  001ce	66 44 89 64 96
	02		 mov	 WORD PTR [rsi+rdx*4+2], r12w
  001d4	66 44 89 64 9e
	02		 mov	 WORD PTR [rsi+rbx*4+2], r12w
  001da	44 89 a7 ac 0b
	00 00		 mov	 DWORD PTR [rdi+2988], r12d
  001e1	48 8b d6	 mov	 rdx, rsi
  001e4	41 ff c4	 inc	 r12d
  001e7	e8 00 00 00 00	 call	 pqdownheap

; 687  : 
; 688  :     } while (s->heap_len >= 2);

  001ec	83 bf 9c 14 00
	00 02		 cmp	 DWORD PTR [rdi+5276], 2
  001f3	0f 8d 37 ff ff
	ff		 jge	 $LL3@build_tree

; 689  : 
; 690  :     s->heap[--(s->heap_max)] = s->heap[SMALLEST];

  001f9	ff 8f a0 14 00
	00		 dec	 DWORD PTR [rdi+5280]
  001ff	4c 63 87 a0 14
	00 00		 movsxd	 r8, DWORD PTR [rdi+5280]
  00206	8b 87 ac 0b 00
	00		 mov	 eax, DWORD PTR [rdi+2988]

; 691  : 
; 692  :     /* At this point, the fields freq and dad are set. We can now
; 693  :      * generate the bit lengths.
; 694  :      */
; 695  :     gen_bitlen(s, (tree_desc *)desc);

  0020c	49 8b d5	 mov	 rdx, r13
  0020f	42 89 84 87 a8
	0b 00 00	 mov	 DWORD PTR [rdi+r8*4+2984], eax
  00217	e8 00 00 00 00	 call	 gen_bitlen

; 696  : 
; 697  :     /* The field len is now set, we can generate the bit codes */
; 698  :     gen_codes ((ct_data *)tree, max_code, s->bl_count);

  0021c	4c 8d 87 88 0b
	00 00		 lea	 r8, QWORD PTR [rdi+2952]
  00223	8b d5		 mov	 edx, ebp
  00225	48 8b ce	 mov	 rcx, rsi

; 699  : }

  00228	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0022d	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00232	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00237	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0023c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00240	41 5e		 pop	 r14
  00242	41 5d		 pop	 r13
  00244	41 5c		 pop	 r12
  00246	e9 00 00 00 00	 jmp	 gen_codes
build_tree ENDP
_TEXT	ENDS
PUBLIC	_tr_init
; Function compile flags: /Ogtpy
;	COMDAT _tr_init
_TEXT	SEGMENT
s$ = 8
_tr_init PROC						; COMDAT

; 384  :     tr_static_init();
; 385  : 
; 386  :     s->l_desc.dyn_tree = s->dyn_ltree;

  00000	48 8d 81 bc 00
	00 00		 lea	 rax, QWORD PTR [rcx+188]
  00007	48 89 81 40 0b
	00 00		 mov	 QWORD PTR [rcx+2880], rax

; 387  :     s->l_desc.stat_desc = &static_l_desc;

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:static_l_desc
  00015	48 89 81 50 0b
	00 00		 mov	 QWORD PTR [rcx+2896], rax

; 388  : 
; 389  :     s->d_desc.dyn_tree = s->dyn_dtree;

  0001c	48 8d 81 b0 09
	00 00		 lea	 rax, QWORD PTR [rcx+2480]
  00023	48 89 81 58 0b
	00 00		 mov	 QWORD PTR [rcx+2904], rax

; 390  :     s->d_desc.stat_desc = &static_d_desc;

  0002a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:static_d_desc
  00031	48 89 81 68 0b
	00 00		 mov	 QWORD PTR [rcx+2920], rax

; 391  : 
; 392  :     s->bl_desc.dyn_tree = s->bl_tree;

  00038	48 8d 81 a4 0a
	00 00		 lea	 rax, QWORD PTR [rcx+2724]
  0003f	48 89 81 70 0b
	00 00		 mov	 QWORD PTR [rcx+2928], rax

; 393  :     s->bl_desc.stat_desc = &static_bl_desc;

  00046	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:static_bl_desc
  0004d	48 89 81 80 0b
	00 00		 mov	 QWORD PTR [rcx+2944], rax

; 394  : 
; 395  :     s->bi_buf = 0;

  00054	33 c0		 xor	 eax, eax
  00056	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax

; 396  :     s->bi_valid = 0;

  0005d	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax

; 397  : #ifdef DEBUG
; 398  :     s->compressed_len = 0L;
; 399  :     s->bits_sent = 0L;
; 400  : #endif
; 401  : 
; 402  :     /* Initialize the first block of the first file: */
; 403  :     init_block(s);
; 404  : }

  00063	e9 00 00 00 00	 jmp	 init_block
_tr_init ENDP
;	COMDAT pdata
pdata	SEGMENT
$pdata$build_bl_tree DD imagerel build_bl_tree
	DD	imagerel build_bl_tree+127
	DD	imagerel $unwind$build_bl_tree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$build_bl_tree DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT build_bl_tree
_TEXT	SEGMENT
s$ = 48
build_bl_tree PROC					; COMDAT

; 803  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 804  :     int max_blindex;  /* index of last bit length code of non zero freq */
; 805  : 
; 806  :     /* Determine the bit length frequencies for literal and distance trees */
; 807  :     scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);

  00006	44 8b 81 48 0b
	00 00		 mov	 r8d, DWORD PTR [rcx+2888]
  0000d	48 8d 91 bc 00
	00 00		 lea	 rdx, QWORD PTR [rcx+188]
  00014	48 8b d9	 mov	 rbx, rcx
  00017	e8 00 00 00 00	 call	 scan_tree

; 808  :     scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);

  0001c	44 8b 81 60 0b
	00 00		 mov	 r8d, DWORD PTR [rcx+2912]
  00023	48 8d 91 b0 09
	00 00		 lea	 rdx, QWORD PTR [rcx+2480]
  0002a	e8 00 00 00 00	 call	 scan_tree

; 809  : 
; 810  :     /* Build the bit length tree: */
; 811  :     build_tree(s, (tree_desc *)(&(s->bl_desc)));

  0002f	48 8d 91 70 0b
	00 00		 lea	 rdx, QWORD PTR [rcx+2928]
  00036	e8 00 00 00 00	 call	 build_tree

; 812  :     /* opt_len now includes the length of the tree representations, except
; 813  :      * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
; 814  :      */
; 815  : 
; 816  :     /* Determine the number of bit length codes to send. The pkzip format
; 817  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 818  :      * 3 but the actual value used is 4.)
; 819  :      */
; 820  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  0003b	41 bb 12 00 00
	00		 mov	 r11d, 18
  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:bl_order
  00048	41 8b d3	 mov	 edx, r11d
  0004b	0f 1f 44 00 00	 npad	 5
$LL4@build_bl_t:

; 821  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  00050	0f b6 0c 02	 movzx	 ecx, BYTE PTR [rdx+rax]
  00054	66 83 bc 8b a6
	0a 00 00 00	 cmp	 WORD PTR [rbx+rcx*4+2726], 0
  0005d	75 0c		 jne	 SHORT $LN8@build_bl_t

; 812  :     /* opt_len now includes the length of the tree representations, except
; 813  :      * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
; 814  :      */
; 815  : 
; 816  :     /* Determine the number of bit length codes to send. The pkzip format
; 817  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 818  :      * 3 but the actual value used is 4.)
; 819  :      */
; 820  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  0005f	48 ff ca	 dec	 rdx
  00062	41 ff cb	 dec	 r11d
  00065	48 83 fa 03	 cmp	 rdx, 3
  00069	7d e5		 jge	 SHORT $LL4@build_bl_t
$LN8@build_bl_t:

; 822  :     }
; 823  :     /* Update opt_len to include the bit length tree and counts */
; 824  :     s->opt_len += 3*(max_blindex+1) + 5+5+4;

  0006b	43 8d 4c 5b 11	 lea	 ecx, DWORD PTR [r11+r11*2+17]

; 825  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 826  :             s->opt_len, s->static_len));
; 827  : 
; 828  :     return max_blindex;

  00070	41 8b c3	 mov	 eax, r11d
  00073	01 8b 00 17 00
	00		 add	 DWORD PTR [rbx+5888], ecx

; 829  : }

  00079	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007d	5b		 pop	 rbx
  0007e	c3		 ret	 0
build_bl_tree ENDP
PUBLIC	_tr_flush_block
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tr_flush_block DD imagerel $LN21
	DD	imagerel $LN21+545
	DD	imagerel $unwind$_tr_flush_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tr_flush_block DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT _tr_flush_block
_TEXT	SEGMENT
s$ = 48
buf$ = 56
stored_len$ = 64
last$ = 72
_tr_flush_block PROC					; COMDAT

; 912  : {

$LN21:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b f9	 mov	 edi, r9d

; 913  :     ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
; 914  :     int max_blindex = 0;  /* index of last bit length code of non zero freq */

  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 8b f0	 mov	 esi, r8d
  0001d	48 8b ea	 mov	 rbp, rdx
  00020	48 8b d9	 mov	 rbx, rcx

; 915  : 
; 916  :     /* Build the Huffman trees unless a stored block is forced */
; 917  :     if (s->level > 0) {

  00023	44 39 89 ac 00
	00 00		 cmp	 DWORD PTR [rcx+172], r9d
  0002a	7e 5a		 jle	 SHORT $LN14@tr_flush_b

; 918  : 
; 919  :         /* Check if the file is binary or text */
; 920  :         if (s->strm->data_type == Z_UNKNOWN)

  0002c	4c 8b 11	 mov	 r10, QWORD PTR [rcx]
  0002f	41 83 7a 48 02	 cmp	 DWORD PTR [r10+72], 2
  00034	75 09		 jne	 SHORT $LN13@tr_flush_b

; 921  :             s->strm->data_type = detect_data_type(s);

  00036	e8 00 00 00 00	 call	 detect_data_type
  0003b	41 89 42 48	 mov	 DWORD PTR [r10+72], eax
$LN13@tr_flush_b:

; 922  : 
; 923  :         /* Construct the literal and distance trees */
; 924  :         build_tree(s, (tree_desc *)(&(s->l_desc)));

  0003f	48 8d 93 40 0b
	00 00		 lea	 rdx, QWORD PTR [rbx+2880]
  00046	48 8b cb	 mov	 rcx, rbx
  00049	e8 00 00 00 00	 call	 build_tree

; 925  :         Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
; 926  :                 s->static_len));
; 927  : 
; 928  :         build_tree(s, (tree_desc *)(&(s->d_desc)));

  0004e	48 8d 93 58 0b
	00 00		 lea	 rdx, QWORD PTR [rbx+2904]
  00055	48 8b cb	 mov	 rcx, rbx
  00058	e8 00 00 00 00	 call	 build_tree

; 929  :         Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
; 930  :                 s->static_len));
; 931  :         /* At this point, opt_len and static_len are the total bit lengths of
; 932  :          * the compressed block data, excluding the tree representations.
; 933  :          */
; 934  : 
; 935  :         /* Build the bit length tree for the above two trees, and get the index
; 936  :          * in bl_order of the last bit length code to send.
; 937  :          */
; 938  :         max_blindex = build_bl_tree(s);

  0005d	48 8b cb	 mov	 rcx, rbx
  00060	e8 00 00 00 00	 call	 build_bl_tree

; 939  : 
; 940  :         /* Determine the best encoding. Compute the block lengths in bytes. */
; 941  :         opt_lenb = (s->opt_len+3+7)>>3;

  00065	8b 8b 00 17 00
	00		 mov	 ecx, DWORD PTR [rbx+5888]

; 942  :         static_lenb = (s->static_len+3+7)>>3;

  0006b	8b 93 04 17 00
	00		 mov	 edx, DWORD PTR [rbx+5892]
  00071	83 c1 0a	 add	 ecx, 10
  00074	83 c2 0a	 add	 edx, 10
  00077	44 8b c8	 mov	 r9d, eax
  0007a	c1 e9 03	 shr	 ecx, 3
  0007d	c1 ea 03	 shr	 edx, 3

; 943  : 
; 944  :         Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
; 945  :                 opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
; 946  :                 s->last_lit));
; 947  : 
; 948  :         if (static_lenb <= opt_lenb) opt_lenb = static_lenb;

  00080	3b d1		 cmp	 edx, ecx
  00082	77 08		 ja	 SHORT $LN11@tr_flush_b

; 949  : 
; 950  :     } else {

  00084	eb 04		 jmp	 SHORT $LN17@tr_flush_b
$LN14@tr_flush_b:

; 951  :         Assert(buf != (char*)0, "lost buf");
; 952  :         opt_lenb = static_lenb = stored_len + 5; /* force a stored block */

  00086	41 8d 50 05	 lea	 edx, DWORD PTR [r8+5]
$LN17@tr_flush_b:
  0008a	8b ca		 mov	 ecx, edx
$LN11@tr_flush_b:

; 953  :     }
; 954  : 
; 955  : #ifdef FORCE_STORED
; 956  :     if (buf != (char*)0) { /* force stored block */
; 957  : #else
; 958  :     if (stored_len+4 <= opt_lenb && buf != (char*)0) {

  0008c	8d 46 04	 lea	 eax, DWORD PTR [rsi+4]
  0008f	3b c1		 cmp	 eax, ecx
  00091	77 1b		 ja	 SHORT $LN10@tr_flush_b
  00093	48 85 ed	 test	 rbp, rbp
  00096	74 16		 je	 SHORT $LN10@tr_flush_b

; 959  :                        /* 4: two words for the lengths */
; 960  : #endif
; 961  :         /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
; 962  :          * Otherwise we can't have processed more than WSIZE input bytes since
; 963  :          * the last block flush, because compression would have been
; 964  :          * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
; 965  :          * transform a block into a stored block.
; 966  :          */
; 967  :         _tr_stored_block(s, buf, stored_len, last);

  00098	44 8b cf	 mov	 r9d, edi
  0009b	44 8b c6	 mov	 r8d, esi
  0009e	48 8b d5	 mov	 rdx, rbp
  000a1	48 8b cb	 mov	 rcx, rbx
  000a4	e8 00 00 00 00	 call	 _tr_stored_block
  000a9	e9 4d 01 00 00	 jmp	 $LN4@tr_flush_b
$LN10@tr_flush_b:

; 968  : 
; 969  : #ifdef FORCE_STATIC
; 970  :     } else if (static_lenb >= 0) { /* force static trees */
; 971  : #else
; 972  :     } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {

  000ae	83 bb b0 00 00
	00 04		 cmp	 DWORD PTR [rbx+176], 4
  000b5	0f 84 b1 00 00
	00		 je	 $LN7@tr_flush_b
  000bb	3b d1		 cmp	 edx, ecx
  000bd	0f 84 a9 00 00
	00		 je	 $LN7@tr_flush_b

; 976  : #ifdef DEBUG
; 977  :         s->compressed_len += 3 + s->static_len;
; 978  : #endif
; 979  :     } else {
; 980  :         send_bits(s, (DYN_TREES<<1)+last, 3);

  000c3	8b 8b 14 17 00
	00		 mov	 ecx, DWORD PTR [rbx+5908]
  000c9	83 f9 0d	 cmp	 ecx, 13
  000cc	7e 58		 jle	 SHORT $LN3@tr_flush_b
  000ce	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  000d1	44 8d 47 04	 lea	 r8d, DWORD PTR [rdi+4]
  000d5	41 0f b7 c0	 movzx	 eax, r8w
  000d9	66 d3 e0	 shl	 ax, cl
  000dc	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  000e0	66 09 83 10 17
	00 00		 or	 WORD PTR [rbx+5904], ax
  000e7	0f b6 83 10 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5904]
  000ee	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  000f1	ff 43 28	 inc	 DWORD PTR [rbx+40]
  000f4	0f b6 83 11 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5905]
  000fb	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  000fe	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00102	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00105	8b 83 14 17 00
	00		 mov	 eax, DWORD PTR [rbx+5908]
  0010b	ff 43 28	 inc	 DWORD PTR [rbx+40]
  0010e	b9 10 00 00 00	 mov	 ecx, 16
  00113	2a c8		 sub	 cl, al
  00115	66 41 d3 e8	 shr	 r8w, cl
  00119	83 c0 f3	 add	 eax, -13
  0011c	66 44 89 83 10
	17 00 00	 mov	 WORD PTR [rbx+5904], r8w
  00124	eb 10		 jmp	 SHORT $LN18@tr_flush_b
$LN3@tr_flush_b:
  00126	8d 47 04	 lea	 eax, DWORD PTR [rdi+4]
  00129	66 d3 e0	 shl	 ax, cl
  0012c	66 09 83 10 17
	00 00		 or	 WORD PTR [rbx+5904], ax
  00133	8d 41 03	 lea	 eax, DWORD PTR [rcx+3]
$LN18@tr_flush_b:

; 981  :         send_all_trees(s, s->l_desc.max_code+1, s->d_desc.max_code+1,
; 982  :                        max_blindex+1);

  00136	44 8b 83 60 0b
	00 00		 mov	 r8d, DWORD PTR [rbx+2912]
  0013d	8b 93 48 0b 00
	00		 mov	 edx, DWORD PTR [rbx+2888]
  00143	41 ff c1	 inc	 r9d
  00146	48 8b cb	 mov	 rcx, rbx
  00149	41 ff c0	 inc	 r8d
  0014c	ff c2		 inc	 edx
  0014e	89 83 14 17 00
	00		 mov	 DWORD PTR [rbx+5908], eax
  00154	e8 00 00 00 00	 call	 send_all_trees

; 983  :         compress_block(s, (ct_data *)s->dyn_ltree, (ct_data *)s->dyn_dtree);

  00159	4c 8d 83 b0 09
	00 00		 lea	 r8, QWORD PTR [rbx+2480]
  00160	48 8d 93 bc 00
	00 00		 lea	 rdx, QWORD PTR [rbx+188]
  00167	e9 87 00 00 00	 jmp	 $LN19@tr_flush_b
$LN7@tr_flush_b:

; 973  : #endif
; 974  :         send_bits(s, (STATIC_TREES<<1)+last, 3);

  0016c	8b 8b 14 17 00
	00		 mov	 ecx, DWORD PTR [rbx+5908]
  00172	83 f9 0d	 cmp	 ecx, 13
  00175	7e 58		 jle	 SHORT $LN6@tr_flush_b
  00177	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  0017a	44 8d 47 02	 lea	 r8d, DWORD PTR [rdi+2]
  0017e	41 0f b7 c0	 movzx	 eax, r8w
  00182	66 d3 e0	 shl	 ax, cl
  00185	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00189	66 09 83 10 17
	00 00		 or	 WORD PTR [rbx+5904], ax
  00190	0f b6 83 10 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5904]
  00197	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0019a	ff 43 28	 inc	 DWORD PTR [rbx+40]
  0019d	0f b6 83 11 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5905]
  001a4	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  001a7	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  001ab	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  001ae	8b 83 14 17 00
	00		 mov	 eax, DWORD PTR [rbx+5908]
  001b4	ff 43 28	 inc	 DWORD PTR [rbx+40]
  001b7	b9 10 00 00 00	 mov	 ecx, 16
  001bc	2a c8		 sub	 cl, al
  001be	66 41 d3 e8	 shr	 r8w, cl
  001c2	83 c0 f3	 add	 eax, -13
  001c5	66 44 89 83 10
	17 00 00	 mov	 WORD PTR [rbx+5904], r8w
  001cd	eb 10		 jmp	 SHORT $LN20@tr_flush_b
$LN6@tr_flush_b:
  001cf	8d 47 02	 lea	 eax, DWORD PTR [rdi+2]
  001d2	66 d3 e0	 shl	 ax, cl
  001d5	66 09 83 10 17
	00 00		 or	 WORD PTR [rbx+5904], ax
  001dc	8d 41 03	 lea	 eax, DWORD PTR [rcx+3]
$LN20@tr_flush_b:
  001df	89 83 14 17 00
	00		 mov	 DWORD PTR [rbx+5908], eax

; 975  :         compress_block(s, (ct_data *)static_ltree, (ct_data *)static_dtree);

  001e5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:static_dtree
  001ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:static_ltree
$LN19@tr_flush_b:
  001f3	48 8b cb	 mov	 rcx, rbx
  001f6	e8 00 00 00 00	 call	 compress_block
$LN4@tr_flush_b:

; 984  : #ifdef DEBUG
; 985  :         s->compressed_len += 3 + s->opt_len;
; 986  : #endif
; 987  :     }
; 988  :     Assert (s->compressed_len == s->bits_sent, "bad compressed size");
; 989  :     /* The above check is made mod 2^32, for files larger than 512 MB
; 990  :      * and uLong implemented on 32 bits.
; 991  :      */
; 992  :     init_block(s);

  001fb	48 8b cb	 mov	 rcx, rbx
  001fe	e8 00 00 00 00	 call	 init_block

; 993  : 
; 994  :     if (last) {

  00203	85 ff		 test	 edi, edi
  00205	74 05		 je	 SHORT $LN1@tr_flush_b

; 995  :         bi_windup(s);

  00207	e8 00 00 00 00	 call	 bi_windup
$LN1@tr_flush_b:

; 996  : #ifdef DEBUG
; 997  :         s->compressed_len += 7;  /* align on byte boundary */
; 998  : #endif
; 999  :     }
; 1000 :     Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
; 1001 :            s->compressed_len-7*last));
; 1002 : }

  0020c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00211	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00216	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0021b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0021f	5f		 pop	 rdi
  00220	c3		 ret	 0
_tr_flush_block ENDP
END

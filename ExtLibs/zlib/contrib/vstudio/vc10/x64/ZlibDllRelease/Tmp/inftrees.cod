; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	inflate_copyright
inflate_copyright DB ' inflate 1.2.7 Copyright 1995-2012 Mark Adler ', 00H
	ORG $+1
?lbase@?1??inflate_table@@9@9 DW 03H			; `inflate_table'::`2'::lbase
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0dH
	DW	0fH
	DW	011H
	DW	013H
	DW	017H
	DW	01bH
	DW	01fH
	DW	023H
	DW	02bH
	DW	033H
	DW	03bH
	DW	043H
	DW	053H
	DW	063H
	DW	073H
	DW	083H
	DW	0a3H
	DW	0c3H
	DW	0e3H
	DW	0102H
	DW	00H
	DW	00H
	ORG $+2
?lext@?1??inflate_table@@9@9 DW 010H			; `inflate_table'::`2'::lext
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	011H
	DW	011H
	DW	011H
	DW	011H
	DW	012H
	DW	012H
	DW	012H
	DW	012H
	DW	013H
	DW	013H
	DW	013H
	DW	013H
	DW	014H
	DW	014H
	DW	014H
	DW	014H
	DW	015H
	DW	015H
	DW	015H
	DW	015H
	DW	010H
	DW	04eH
	DW	044H
	ORG $+10
?dbase@?1??inflate_table@@9@9 DW 01H			; `inflate_table'::`2'::dbase
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	07H
	DW	09H
	DW	0dH
	DW	011H
	DW	019H
	DW	021H
	DW	031H
	DW	041H
	DW	061H
	DW	081H
	DW	0c1H
	DW	0101H
	DW	0181H
	DW	0201H
	DW	0301H
	DW	0401H
	DW	0601H
	DW	0801H
	DW	0c01H
	DW	01001H
	DW	01801H
	DW	02001H
	DW	03001H
	DW	04001H
	DW	06001H
	DW	00H
	DW	00H
?dext@?1??inflate_table@@9@9 DW 010H			; `inflate_table'::`2'::dext
	DW	010H
	DW	010H
	DW	010H
	DW	011H
	DW	011H
	DW	012H
	DW	012H
	DW	013H
	DW	013H
	DW	014H
	DW	014H
	DW	015H
	DW	015H
	DW	016H
	DW	016H
	DW	017H
	DW	017H
	DW	018H
	DW	018H
	DW	019H
	DW	019H
	DW	01aH
	DW	01aH
	DW	01bH
	DW	01bH
	DW	01cH
	DW	01cH
	DW	01dH
	DW	01dH
	DW	040H
	DW	040H
PUBLIC	inflate_table
;	COMDAT pdata
; File c:\my\gis\extlibs\zlib\inftrees.c
pdata	SEGMENT
$pdata$inflate_table DD imagerel $LN115
	DD	imagerel $LN115+234
	DD	imagerel $unwind$inflate_table
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$inflate_table DD imagerel $LN115+234
	DD	imagerel $LN115+1099
	DD	imagerel $chain$0$inflate_table
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$inflate_table DD imagerel $LN115+1099
	DD	imagerel $LN115+1117
	DD	imagerel $chain$1$inflate_table
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$inflate_table DD 021H
	DD	imagerel $LN115
	DD	imagerel $LN115+234
	DD	imagerel $unwind$inflate_table
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$inflate_table DD 020521H
	DD	0fe405H
	DD	imagerel $LN115
	DD	imagerel $LN115+234
	DD	imagerel $unwind$inflate_table
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$inflate_table DD 082201H
	DD	0f018f222H
	DD	0c014d016H
	DD	060117012H
	DD	0500f3010H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT inflate_table
_TEXT	SEGMENT
drop$1$ = 0
sym$2$ = 4
root$3$ = 8
next$1$ = 16
base$1$ = 24
mask$1$ = 32
extra$1$ = 40
count$ = 48
offs$ = 80
type$ = 192
lens$ = 200
here$ = 208
codes$ = 208
table$ = 216
bits$ = 224
work$ = 232
inflate_table PROC					; COMDAT

; 39   : {

$LN115:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	55		 push	 rbp
  0000f	53		 push	 rbx
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	41 54		 push	 r12
  00014	41 55		 push	 r13
  00016	41 57		 push	 r15
  00018	48 8b ec	 mov	 rbp, rsp
  0001b	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H

; 40   :     unsigned len;               /* a code's length in bits */
; 41   :     unsigned sym;               /* index of code symbols */
; 42   :     unsigned min, max;          /* minimum and maximum code lengths */
; 43   :     unsigned root;              /* number of index bits for root table */
; 44   :     unsigned curr;              /* number of index bits for current table */
; 45   :     unsigned drop;              /* code bits to drop for sub-table */
; 46   :     int left;                   /* number of prefix codes available */
; 47   :     unsigned used;              /* code entries in table used */
; 48   :     unsigned huff;              /* Huffman code */
; 49   :     unsigned incr;              /* for incrementing code, index */
; 50   :     unsigned fill;              /* index for replicating entries */
; 51   :     unsigned low;               /* low bits for current root entry */
; 52   :     unsigned mask;              /* mask for low root bits */
; 53   :     code here;                  /* table entry for duplication */
; 54   :     code FAR *next;             /* next available space in table */
; 55   :     const unsigned short FAR *base;     /* base value table to use */
; 56   :     const unsigned short FAR *extra;    /* extra bits table to use */
; 57   :     int end;                    /* use base and extra for symbol > end */
; 58   :     unsigned short count[MAXBITS+1];    /* number of codes of each length */
; 59   :     unsigned short offs[MAXBITS+1];     /* offsets in table for each length */
; 60   :     static const unsigned short lbase[31] = { /* Length codes 257..285 base */
; 61   :         3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
; 62   :         35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
; 63   :     static const unsigned short lext[31] = { /* Length codes 257..285 extra */
; 64   :         16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
; 65   :         19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 78, 68};
; 66   :     static const unsigned short dbase[32] = { /* Distance codes 0..29 base */
; 67   :         1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
; 68   :         257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
; 69   :         8193, 12289, 16385, 24577, 0, 0};
; 70   :     static const unsigned short dext[32] = { /* Distance codes 0..29 extra */
; 71   :         16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
; 72   :         23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
; 73   :         28, 28, 29, 29, 64, 64};
; 74   : 
; 75   :     /*
; 76   :        Process a set of code lengths to create a canonical Huffman code.  The
; 77   :        code lengths are lens[0..codes-1].  Each length corresponds to the
; 78   :        symbols 0..codes-1.  The Huffman code is generated by first sorting the
; 79   :        symbols by length from short to long, and retaining the symbol order
; 80   :        for codes with equal lengths.  Then the code starts with all zero bits
; 81   :        for the first code of the shortest length, and the codes are integer
; 82   :        increments for the same length, and zeros are appended as the length
; 83   :        increases.  For the deflate format, these bits are stored backwards
; 84   :        from their more natural integer increment ordering, and so when the
; 85   :        decoding tables are built in the large loop below, the integer codes
; 86   :        are incremented backwards.
; 87   : 
; 88   :        This routine assumes, but does not check, that all of the entries in
; 89   :        lens[] are in the range 0..MAXBITS.  The caller must assure this.
; 90   :        1..MAXBITS is interpreted as that code length.  zero means that that
; 91   :        symbol does not occur in this code.
; 92   : 
; 93   :        The codes are sorted by computing a count of codes for each length,
; 94   :        creating from that a table of starting indices for each length in the
; 95   :        sorted table, and then entering the symbols in order in the sorted
; 96   :        table.  The sorted table is work[], with that space being provided by
; 97   :        the caller.
; 98   : 
; 99   :        The length counts are used for other purposes as well, i.e. finding
; 100  :        the minimum and maximum length codes, determining if there are any
; 101  :        codes at all, checking for a valid set of lengths, and looking ahead
; 102  :        at length counts to determine sub-table sizes when building the
; 103  :        decoding tables.
; 104  :      */
; 105  : 
; 106  :     /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
; 107  :     for (len = 0; len <= MAXBITS; len++)
; 108  :         count[len] = 0;

  00022	45 33 ff	 xor	 r15d, r15d
  00025	8b d9		 mov	 ebx, ecx
  00027	48 8d 7d b0	 lea	 rdi, QWORD PTR count$[rbp-128]
  0002b	b9 10 00 00 00	 mov	 ecx, 16
  00030	41 0f b7 c7	 movzx	 eax, r15w
  00034	4d 8b e1	 mov	 r12, r9
  00037	4c 8b da	 mov	 r11, rdx
  0003a	66 f3 ab	 rep stosw

; 109  :     for (sym = 0; sym < codes; sym++)

  0003d	45 85 c0	 test	 r8d, r8d
  00040	74 1f		 je	 SHORT $LN57@inflate_ta
  00042	48 8b ca	 mov	 rcx, rdx
  00045	41 8b d0	 mov	 edx, r8d
  00048	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL59@inflate_ta:

; 110  :         count[lens[sym]]++;

  00050	0f b7 01	 movzx	 eax, WORD PTR [rcx]
  00053	48 83 c1 02	 add	 rcx, 2
  00057	66 ff 44 45 b0	 inc	 WORD PTR count$[rbp+rax*2-128]
  0005c	48 ff ca	 dec	 rdx
  0005f	75 ef		 jne	 SHORT $LL59@inflate_ta
$LN57@inflate_ta:

; 111  : 
; 112  :     /* bound code lengths, force root to be within code lengths */
; 113  :     root = *bits;

  00061	48 8b 55 60	 mov	 rdx, QWORD PTR bits$[rbp-128]

; 114  :     for (max = MAXBITS; max >= 1; max--)

  00065	41 b9 0f 00 00
	00		 mov	 r9d, 15
  0006b	48 8d 45 ce	 lea	 rax, QWORD PTR count$[rbp-98]
  0006f	8b 32		 mov	 esi, DWORD PTR [rdx]
  00071	41 83 cd ff	 or	 r13d, -1		; ffffffffH
$LL56@inflate_ta:

; 115  :         if (count[max] != 0) break;

  00075	66 44 39 38	 cmp	 WORD PTR [rax], r15w
  00079	75 0d		 jne	 SHORT $LN77@inflate_ta

; 114  :     for (max = MAXBITS; max >= 1; max--)

  0007b	45 03 cd	 add	 r9d, r13d
  0007e	48 83 e8 02	 sub	 rax, 2
  00082	41 83 f9 01	 cmp	 r9d, 1
  00086	73 ed		 jae	 SHORT $LL56@inflate_ta
$LN77@inflate_ta:

; 116  :     if (root > max) root = max;

  00088	41 3b f1	 cmp	 esi, r9d
  0008b	41 0f 47 f1	 cmova	 esi, r9d

; 117  :     if (max == 0) {                     /* no symbols to code at all */

  0008f	45 85 c9	 test	 r9d, r9d
  00092	75 2d		 jne	 SHORT $LN51@inflate_ta

; 118  :         here.op = (unsigned char)64;    /* invalid code marker */
; 119  :         here.bits = (unsigned char)1;
; 120  :         here.val = (unsigned short)0;
; 121  :         *(*table)++ = here;             /* make a table to force an error */

  00094	49 8b 0c 24	 mov	 rcx, QWORD PTR [r12]
  00098	c7 45 50 40 01
	00 00		 mov	 DWORD PTR here$[rbp-128], 320 ; 00000140H
  0009f	8b 45 50	 mov	 eax, DWORD PTR here$[rbp-128]
  000a2	89 01		 mov	 DWORD PTR [rcx], eax
  000a4	49 83 04 24 04	 add	 QWORD PTR [r12], 4
  000a9	49 8b 0c 24	 mov	 rcx, QWORD PTR [r12]

; 122  :         *(*table)++ = here;

  000ad	89 01		 mov	 DWORD PTR [rcx], eax
  000af	49 83 04 24 04	 add	 QWORD PTR [r12], 4

; 123  :         *bits = 1;

  000b4	c7 02 01 00 00
	00		 mov	 DWORD PTR [rdx], 1

; 124  :         return 0;     /* no symbols, but wait for decoding to report error */

  000ba	33 c0		 xor	 eax, eax
  000bc	e9 8a 03 00 00	 jmp	 $LN63@inflate_ta
$LN51@inflate_ta:

; 125  :     }
; 126  :     for (min = 1; min < max; min++)

  000c1	41 ba 01 00 00
	00		 mov	 r10d, 1
  000c7	45 3b ca	 cmp	 r9d, r10d
  000ca	76 16		 jbe	 SHORT $LN103@inflate_ta
  000cc	48 8d 45 b2	 lea	 rax, QWORD PTR count$[rbp-126]
$LL50@inflate_ta:

; 127  :         if (count[min] != 0) break;

  000d0	66 44 39 38	 cmp	 WORD PTR [rax], r15w
  000d4	75 0c		 jne	 SHORT $LN103@inflate_ta

; 125  :     }
; 126  :     for (min = 1; min < max; min++)

  000d6	41 ff c2	 inc	 r10d
  000d9	48 83 c0 02	 add	 rax, 2
  000dd	45 3b d1	 cmp	 r10d, r9d
  000e0	72 ee		 jb	 SHORT $LL50@inflate_ta
$LN103@inflate_ta:

; 128  :     if (root < min) root = min;

  000e2	41 3b f2	 cmp	 esi, r10d

; 129  : 
; 130  :     /* check for an over-subscribed or incomplete set of lengths */
; 131  :     left = 1;

  000e5	bf 01 00 00 00	 mov	 edi, 1
  000ea	4c 89 74 24 78	 mov	 QWORD PTR [rsp+120], r14
  000ef	41 0f 42 f2	 cmovb	 esi, r10d

; 132  :     for (len = 1; len <= MAXBITS; len++) {

  000f3	8b d7		 mov	 edx, edi
  000f5	89 75 88	 mov	 DWORD PTR root$3$[rbp-128], esi
  000f8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL45@inflate_ta:

; 133  :         left <<= 1;
; 134  :         left -= count[len];

  00100	8b c2		 mov	 eax, edx
  00102	03 ff		 add	 edi, edi
  00104	0f b7 4c 45 b0	 movzx	 ecx, WORD PTR count$[rbp+rax*2-128]
  00109	2b f9		 sub	 edi, ecx

; 135  :         if (left < 0) return -1;        /* over-subscribed */

  0010b	0f 88 32 03 00
	00		 js	 $LN79@inflate_ta

; 132  :     for (len = 1; len <= MAXBITS; len++) {

  00111	ff c2		 inc	 edx
  00113	83 fa 0f	 cmp	 edx, 15
  00116	76 e8		 jbe	 SHORT $LL45@inflate_ta

; 136  :     }
; 137  :     if (left > 0 && (type == CODES || max != 1))

  00118	85 ff		 test	 edi, edi
  0011a	7e 12		 jle	 SHORT $LN41@inflate_ta
  0011c	85 db		 test	 ebx, ebx
  0011e	0f 84 1f 03 00
	00		 je	 $LN79@inflate_ta
  00124	41 83 f9 01	 cmp	 r9d, 1

; 138  :         return -1;                      /* incomplete set */

  00128	0f 85 15 03 00
	00		 jne	 $LN79@inflate_ta
$LN41@inflate_ta:

; 139  : 
; 140  :     /* generate offsets into symbol table for each length for sorting */
; 141  :     offs[1] = 0;

  0012e	66 44 89 7d d2	 mov	 WORD PTR offs$[rbp-126], r15w

; 142  :     for (len = 1; len < MAXBITS; len++)

  00133	49 8b cf	 mov	 rcx, r15
  00136	ba 0e 00 00 00	 mov	 edx, 14
  0013b	0f 1f 44 00 00	 npad	 5
$LL39@inflate_ta:

; 143  :         offs[len + 1] = offs[len] + count[len];

  00140	0f b7 44 0d b2	 movzx	 eax, WORD PTR count$[rbp+rcx-126]
  00145	48 83 c1 02	 add	 rcx, 2
  00149	66 03 44 0d d0	 add	 ax, WORD PTR offs$[rbp+rcx-128]
  0014e	48 ff ca	 dec	 rdx
  00151	66 89 44 0d d2	 mov	 WORD PTR offs$[rbp+rcx-126], ax
  00156	75 e8		 jne	 SHORT $LL39@inflate_ta

; 144  : 
; 145  :     /* sort symbols by length, by symbol order within each length */
; 146  :     for (sym = 0; sym < codes; sym++)

  00158	41 8b ff	 mov	 edi, r15d
  0015b	45 85 c0	 test	 r8d, r8d
  0015e	74 2d		 je	 SHORT $LN34@inflate_ta
  00160	49 8b d3	 mov	 rdx, r11
  00163	4c 8b 5d 68	 mov	 r11, QWORD PTR work$[rbp-128]
$LL36@inflate_ta:

; 147  :         if (lens[sym] != 0) work[offs[lens[sym]]++] = (unsigned short)sym;

  00167	66 44 39 3a	 cmp	 WORD PTR [rdx], r15w
  0016b	74 15		 je	 SHORT $LN35@inflate_ta
  0016d	0f b7 02	 movzx	 eax, WORD PTR [rdx]
  00170	0f b7 4c 45 d0	 movzx	 ecx, WORD PTR offs$[rbp+rax*2-128]
  00175	66 41 89 3c 4b	 mov	 WORD PTR [r11+rcx*2], di
  0017a	0f b7 02	 movzx	 eax, WORD PTR [rdx]
  0017d	66 ff 44 45 d0	 inc	 WORD PTR offs$[rbp+rax*2-128]
$LN35@inflate_ta:

; 144  : 
; 145  :     /* sort symbols by length, by symbol order within each length */
; 146  :     for (sym = 0; sym < codes; sym++)

  00182	ff c7		 inc	 edi
  00184	48 83 c2 02	 add	 rdx, 2
  00188	41 3b f8	 cmp	 edi, r8d
  0018b	72 da		 jb	 SHORT $LL36@inflate_ta
$LN34@inflate_ta:

; 195  :         extra = dext;
; 196  :         end = -1;

  0018d	48 8b 55 68	 mov	 rdx, QWORD PTR work$[rbp-128]
  00191	8b cb		 mov	 ecx, ebx
  00193	85 db		 test	 ebx, ebx
  00195	74 4a		 je	 SHORT $LN30@inflate_ta

; 148  : 
; 149  :     /*
; 150  :        Create and fill in decoding tables.  In this loop, the table being
; 151  :        filled is at next and has curr index bits.  The code being used is huff
; 152  :        with length len.  That code is converted to an index by dropping drop
; 153  :        bits off of the bottom.  For codes where len is less than drop + curr,
; 154  :        those top drop + curr - len bits are incremented through all values to
; 155  :        fill the table with replicated entries.
; 156  : 
; 157  :        root is the number of index bits for the root table.  When len exceeds
; 158  :        root, sub-tables are created pointed to by the root entry with an index
; 159  :        of the low root bits of huff.  This is saved in low to check for when a
; 160  :        new sub-table should be started.  drop is zero when the root table is
; 161  :        being filled, and drop is root when sub-tables are being filled.
; 162  : 
; 163  :        When a new sub-table is needed, it is necessary to look ahead in the
; 164  :        code lengths to determine what size sub-table is needed.  The length
; 165  :        counts are used for this, and so count[] is decremented as codes are
; 166  :        entered in the tables.
; 167  : 
; 168  :        used keeps track of how many table entries have been allocated from the
; 169  :        provided *table space.  It is checked for LENS and DIST tables against
; 170  :        the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
; 171  :        the initial root table size constants.  See the comments in inftrees.h
; 172  :        for more information.
; 173  : 
; 174  :        sym increments through all symbols, and the loop terminates when
; 175  :        all codes of length max, i.e. all codes, have been processed.  This
; 176  :        routine permits incomplete codes, so another loop after this one fills
; 177  :        in the rest of the decoding tables with invalid code markers.
; 178  :      */
; 179  : 
; 180  :     /* set up for code type */
; 181  :     switch (type) {

  00197	ff c9		 dec	 ecx
  00199	74 1c		 je	 SHORT $LN29@inflate_ta

; 193  :     default:            /* DISTS */
; 194  :         base = dbase;

  0019b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?dbase@?1??inflate_table@@9@9

; 195  :         extra = dext;
; 196  :         end = -1;

  001a2	41 83 ce ff	 or	 r14d, -1
  001a6	48 89 45 98	 mov	 QWORD PTR base$1$[rbp-128], rax
  001aa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?dext@?1??inflate_table@@9@9
  001b1	48 89 45 a8	 mov	 QWORD PTR extra$1$[rbp-128], rax
  001b5	eb 38		 jmp	 SHORT $LN31@inflate_ta
$LN29@inflate_ta:

; 185  :         break;
; 186  :     case LENS:
; 187  :         base = lbase;
; 188  :         base -= 257;

  001b7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?lbase@?1??inflate_table@@9@9

; 189  :         extra = lext;
; 190  :         extra -= 257;
; 191  :         end = 256;

  001be	41 be 00 01 00
	00		 mov	 r14d, 256		; 00000100H
  001c4	48 2d 02 02 00
	00		 sub	 rax, 514		; 00000202H
  001ca	48 89 45 98	 mov	 QWORD PTR base$1$[rbp-128], rax
  001ce	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?lext@?1??inflate_table@@9@9
  001d5	48 2d 02 02 00
	00		 sub	 rax, 514		; 00000202H
  001db	48 89 45 a8	 mov	 QWORD PTR extra$1$[rbp-128], rax

; 192  :         break;

  001df	eb 0e		 jmp	 SHORT $LN31@inflate_ta
$LN30@inflate_ta:

; 182  :     case CODES:
; 183  :         base = extra = work;    /* dummy value--not used */

  001e1	48 89 55 a8	 mov	 QWORD PTR extra$1$[rbp-128], rdx
  001e5	48 89 55 98	 mov	 QWORD PTR base$1$[rbp-128], rdx

; 184  :         end = 19;

  001e9	41 be 13 00 00
	00		 mov	 r14d, 19
$LN31@inflate_ta:

; 197  :     }
; 198  : 
; 199  :     /* initialize state for loop */
; 200  :     huff = 0;                   /* starting code */
; 201  :     sym = 0;                    /* starting code symbol */
; 202  :     len = min;                  /* starting code length */
; 203  :     next = *table;              /* current table to fill in */

  001ef	4d 8b 1c 24	 mov	 r11, QWORD PTR [r12]

; 204  :     curr = root;                /* current table index bits */
; 205  :     drop = 0;                   /* current bits to drop from code for index */
; 206  :     low = (unsigned)(-1);       /* trigger new sub-table when len > root */
; 207  :     used = 1U << root;          /* use root table entries */
; 208  :     mask = used - 1;            /* mask for comparing low */
; 209  : 
; 210  :     /* check available table space */
; 211  :     if ((type == LENS && used >= ENOUGH_LENS) ||
; 212  :         (type == DISTS && used >= ENOUGH_DISTS))

  001f3	44 8b 65 40	 mov	 r12d, DWORD PTR type$[rbp-128]
  001f7	8b ce		 mov	 ecx, esi
  001f9	be 01 00 00 00	 mov	 esi, 1
  001fe	41 8b df	 mov	 ebx, r15d
  00201	41 8b ff	 mov	 edi, r15d
  00204	d3 e6		 shl	 esi, cl
  00206	44 89 7d 84	 mov	 DWORD PTR sym$2$[rbp-128], r15d
  0020a	45 8b c7	 mov	 r8d, r15d
  0020d	8d 46 ff	 lea	 eax, DWORD PTR [rsi-1]
  00210	44 89 7d 80	 mov	 DWORD PTR drop$1$[rbp-128], r15d
  00214	4c 89 5d 90	 mov	 QWORD PTR next$1$[rbp-128], r11
  00218	44 8b fe	 mov	 r15d, esi
  0021b	89 45 a0	 mov	 DWORD PTR mask$1$[rbp-128], eax
  0021e	41 83 fc 01	 cmp	 r12d, 1
  00222	75 0a		 jne	 SHORT $LN25@inflate_ta
  00224	81 fe 54 03 00
	00		 cmp	 esi, 852		; 00000354H
  0022a	73 10		 jae	 SHORT $LN26@inflate_ta
  0022c	eb 32		 jmp	 SHORT $LL24@inflate_ta
$LN25@inflate_ta:
  0022e	41 83 fc 02	 cmp	 r12d, 2
  00232	75 2c		 jne	 SHORT $LL24@inflate_ta
  00234	81 fe 50 02 00
	00		 cmp	 esi, 592		; 00000250H
  0023a	72 24		 jb	 SHORT $LL24@inflate_ta
$LN26@inflate_ta:

; 213  :         return 1;

  0023c	b8 01 00 00 00	 mov	 eax, 1
  00241	e9 00 02 00 00	 jmp	 $LN111@inflate_ta
  00246	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL105@inflate_ta:

; 288  :             (*table)[low].val = (unsigned short)(next - *table);

  00250	4c 8b 5d 90	 mov	 r11, QWORD PTR next$1$[rbp-128]
  00254	66 66 66 66 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL24@inflate_ta:

; 214  : 
; 215  :     /* process all codes and make table entries */
; 216  :     for (;;) {
; 217  :         /* create table entry */
; 218  :         here.bits = (unsigned char)(len - drop);

  00260	41 0f b6 c2	 movzx	 eax, r10b

; 219  :         if ((int)(work[sym]) < end) {

  00264	8b cf		 mov	 ecx, edi
  00266	41 2a c0	 sub	 al, r8b
  00269	88 45 51	 mov	 BYTE PTR here$[rbp-127], al
  0026c	0f b7 04 4a	 movzx	 eax, WORD PTR [rdx+rcx*2]
  00270	41 3b c6	 cmp	 eax, r14d
  00273	7d 06		 jge	 SHORT $LN112@inflate_ta

; 220  :             here.op = (unsigned char)0;

  00275	c6 45 50 00	 mov	 BYTE PTR here$[rbp-128], 0

; 221  :             here.val = work[sym];

  00279	eb 21		 jmp	 SHORT $LN113@inflate_ta
$LN112@inflate_ta:

; 222  :         }
; 223  :         else if ((int)(work[sym]) > end) {

  0027b	7e 19		 jle	 SHORT $LN20@inflate_ta

; 224  :             here.op = (unsigned char)(extra[work[sym]]);

  0027d	0f b7 0c 4a	 movzx	 ecx, WORD PTR [rdx+rcx*2]
  00281	48 8b 45 a8	 mov	 rax, QWORD PTR extra$1$[rbp-128]
  00285	0f b6 04 48	 movzx	 eax, BYTE PTR [rax+rcx*2]
  00289	88 45 50	 mov	 BYTE PTR here$[rbp-128], al

; 225  :             here.val = base[work[sym]];

  0028c	48 8b 45 98	 mov	 rax, QWORD PTR base$1$[rbp-128]
  00290	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]

; 226  :         }
; 227  :         else {

  00294	eb 06		 jmp	 SHORT $LN113@inflate_ta
$LN20@inflate_ta:

; 228  :             here.op = (unsigned char)(32 + 64);         /* end of block */

  00296	c6 45 50 60	 mov	 BYTE PTR here$[rbp-128], 96 ; 00000060H

; 229  :             here.val = 0;

  0029a	33 c0		 xor	 eax, eax
$LN113@inflate_ta:

; 230  :         }
; 231  : 
; 232  :         /* replicate for those indices with low len bits equal to huff */
; 233  :         incr = 1U << (len - drop);

  0029c	41 8b ca	 mov	 ecx, r10d
  0029f	8b d3		 mov	 edx, ebx
  002a1	66 89 45 52	 mov	 WORD PTR here$[rbp-126], ax
  002a5	8b 45 50	 mov	 eax, DWORD PTR here$[rbp-128]
  002a8	41 2b c8	 sub	 ecx, r8d
  002ab	41 b8 01 00 00
	00		 mov	 r8d, 1
  002b1	41 d3 e0	 shl	 r8d, cl
  002b4	8b 4d 80	 mov	 ecx, DWORD PTR drop$1$[rbp-128]

; 234  :         fill = 1U << curr;

  002b7	8b fe		 mov	 edi, esi
  002b9	d3 ea		 shr	 edx, cl
  002bb	03 d6		 add	 edx, esi
  002bd	0f 1f 00	 npad	 3
$LL18@inflate_ta:

; 235  :         min = fill;                 /* save offset to next table */
; 236  :         do {
; 237  :             fill -= incr;

  002c0	41 2b d0	 sub	 edx, r8d
  002c3	41 2b f8	 sub	 edi, r8d

; 238  :             next[(huff >> drop) + fill] = here;

  002c6	41 89 04 93	 mov	 DWORD PTR [r11+rdx*4], eax

; 239  :         } while (fill != 0);

  002ca	75 f4		 jne	 SHORT $LL18@inflate_ta

; 240  : 
; 241  :         /* backwards increment the len-bit code huff */
; 242  :         incr = 1U << (len - 1);

  002cc	41 8d 4a ff	 lea	 ecx, DWORD PTR [r10-1]
  002d0	ba 01 00 00 00	 mov	 edx, 1
  002d5	d3 e2		 shl	 edx, cl

; 243  :         while (huff & incr)

  002d7	85 d3		 test	 edx, ebx
  002d9	74 0b		 je	 SHORT $LN14@inflate_ta
  002db	0f 1f 44 00 00	 npad	 5
$LL15@inflate_ta:

; 244  :             incr >>= 1;

  002e0	d1 ea		 shr	 edx, 1
  002e2	85 d3		 test	 edx, ebx
  002e4	75 fa		 jne	 SHORT $LL15@inflate_ta
$LN14@inflate_ta:

; 245  :         if (incr != 0) {

  002e6	85 d2		 test	 edx, edx
  002e8	74 0c		 je	 SHORT $LN13@inflate_ta

; 246  :             huff &= incr - 1;

  002ea	8d 42 ff	 lea	 eax, DWORD PTR [rdx-1]
  002ed	23 c3		 and	 eax, ebx

; 247  :             huff += incr;
; 248  :         }
; 249  :         else

  002ef	33 c9		 xor	 ecx, ecx
  002f1	8d 1c 02	 lea	 ebx, DWORD PTR [rdx+rax]
  002f4	eb 04		 jmp	 SHORT $LN12@inflate_ta
$LN13@inflate_ta:

; 250  :             huff = 0;

  002f6	33 c9		 xor	 ecx, ecx
  002f8	8b d9		 mov	 ebx, ecx
$LN12@inflate_ta:

; 251  : 
; 252  :         /* go to next symbol, update count, len */
; 253  :         sym++;

  002fa	8b 7d 84	 mov	 edi, DWORD PTR sym$2$[rbp-128]

; 254  :         if (--(count[len]) == 0) {

  002fd	41 8b c2	 mov	 eax, r10d
  00300	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00305	ff c7		 inc	 edi
  00307	66 01 54 45 b0	 add	 WORD PTR count$[rbp+rax*2-128], dx
  0030c	89 7d 84	 mov	 DWORD PTR sym$2$[rbp-128], edi
  0030f	75 1c		 jne	 SHORT $LN106@inflate_ta

; 255  :             if (len == max) break;

  00311	45 3b d1	 cmp	 r10d, r9d
  00314	0f 84 f1 00 00
	00		 je	 $LN81@inflate_ta

; 256  :             len = lens[work[sym]];

  0031a	48 8b 55 68	 mov	 rdx, QWORD PTR work$[rbp-128]
  0031e	48 8b 45 48	 mov	 rax, QWORD PTR lens$[rbp-128]
  00322	0f b7 0c 7a	 movzx	 ecx, WORD PTR [rdx+rdi*2]
  00326	44 0f b7 14 48	 movzx	 r10d, WORD PTR [rax+rcx*2]
  0032b	eb 04		 jmp	 SHORT $LN11@inflate_ta
$LN106@inflate_ta:

; 288  :             (*table)[low].val = (unsigned short)(next - *table);

  0032d	48 8b 55 68	 mov	 rdx, QWORD PTR work$[rbp-128]
$LN11@inflate_ta:

; 257  :         }
; 258  : 
; 259  :         /* create new sub-table if needed */
; 260  :         if (len > root && (huff & mask) != low) {

  00331	8b 45 88	 mov	 eax, DWORD PTR root$3$[rbp-128]
  00334	44 8b 45 80	 mov	 r8d, DWORD PTR drop$1$[rbp-128]
  00338	44 3b d0	 cmp	 r10d, eax
  0033b	0f 86 1f ff ff
	ff		 jbe	 $LL24@inflate_ta
  00341	44 8b 5d a0	 mov	 r11d, DWORD PTR mask$1$[rbp-128]
  00345	44 23 db	 and	 r11d, ebx
  00348	45 3b dd	 cmp	 r11d, r13d
  0034b	0f 84 ff fe ff
	ff		 je	 $LL105@inflate_ta

; 261  :             /* if first time, transition to sub-tables */
; 262  :             if (drop == 0)
; 263  :                 drop = root;
; 264  : 
; 265  :             /* increment past last table */
; 266  :             next += min;            /* here min is 1 << curr */

  00351	48 8b 4d 90	 mov	 rcx, QWORD PTR next$1$[rbp-128]
  00355	45 85 c0	 test	 r8d, r8d
  00358	41 8b f8	 mov	 edi, r8d
  0035b	0f 44 f8	 cmove	 edi, eax
  0035e	48 8d 0c b1	 lea	 rcx, QWORD PTR [rcx+rsi*4]

; 267  : 
; 268  :             /* determine length of next table */
; 269  :             curr = len - drop;

  00362	45 8b c2	 mov	 r8d, r10d
  00365	44 2b c7	 sub	 r8d, edi
  00368	48 89 4d 90	 mov	 QWORD PTR next$1$[rbp-128], rcx
  0036c	89 7d 80	 mov	 DWORD PTR drop$1$[rbp-128], edi

; 270  :             left = (int)(1 << curr);

  0036f	41 8b c8	 mov	 ecx, r8d
  00372	ba 01 00 00 00	 mov	 edx, 1

; 271  :             while (curr + drop < max) {

  00377	41 03 f8	 add	 edi, r8d
  0037a	d3 e2		 shl	 edx, cl
  0037c	41 3b f9	 cmp	 edi, r9d
  0037f	73 17		 jae	 SHORT $LN104@inflate_ta
$LL7@inflate_ta:

; 272  :                 left -= count[curr + drop];

  00381	0f b7 4c 7d b0	 movzx	 ecx, WORD PTR count$[rbp+rdi*2-128]
  00386	2b d1		 sub	 edx, ecx

; 273  :                 if (left <= 0) break;

  00388	85 d2		 test	 edx, edx
  0038a	7e 0c		 jle	 SHORT $LN104@inflate_ta

; 274  :                 curr++;

  0038c	ff c7		 inc	 edi
  0038e	41 ff c0	 inc	 r8d

; 275  :                 left <<= 1;

  00391	03 d2		 add	 edx, edx
  00393	41 3b f9	 cmp	 edi, r9d
  00396	72 e9		 jb	 SHORT $LL7@inflate_ta
$LN104@inflate_ta:

; 276  :             }
; 277  : 
; 278  :             /* check for enough space */
; 279  :             used += 1U << curr;
; 280  :             if ((type == LENS && used >= ENOUGH_LENS) ||
; 281  :                 (type == DISTS && used >= ENOUGH_DISTS))

  00398	44 8b 65 40	 mov	 r12d, DWORD PTR type$[rbp-128]
  0039c	41 8b c8	 mov	 ecx, r8d
  0039f	be 01 00 00 00	 mov	 esi, 1
  003a4	d3 e6		 shl	 esi, cl
  003a6	44 03 fe	 add	 r15d, esi
  003a9	41 83 fc 01	 cmp	 r12d, 1
  003ad	75 09		 jne	 SHORT $LN2@inflate_ta
  003af	41 81 ff 54 03
	00 00		 cmp	 r15d, 852		; 00000354H
  003b6	eb 0d		 jmp	 SHORT $LN114@inflate_ta
$LN2@inflate_ta:
  003b8	41 83 fc 02	 cmp	 r12d, 2
  003bc	75 0d		 jne	 SHORT $LN4@inflate_ta
  003be	41 81 ff 50 02
	00 00		 cmp	 r15d, 592		; 00000250H
$LN114@inflate_ta:
  003c5	0f 83 71 fe ff
	ff		 jae	 $LN26@inflate_ta
$LN4@inflate_ta:

; 282  :                 return 1;
; 283  : 
; 284  :             /* point entry in root table to sub-table */
; 285  :             low = huff & mask;
; 286  :             (*table)[low].op = (unsigned char)curr;

  003cb	48 8b 7d 58	 mov	 rdi, QWORD PTR table$[rbp-128]

; 287  :             (*table)[low].bits = (unsigned char)root;

  003cf	8b 4d 88	 mov	 ecx, DWORD PTR root$3$[rbp-128]

; 289  :         }
; 290  :     }

  003d2	48 8b 55 68	 mov	 rdx, QWORD PTR work$[rbp-128]
  003d6	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  003d9	45 8b eb	 mov	 r13d, r11d
  003dc	46 88 04 98	 mov	 BYTE PTR [rax+r11*4], r8b
  003e0	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  003e3	44 8b 45 80	 mov	 r8d, DWORD PTR drop$1$[rbp-128]
  003e7	42 88 4c 98 01	 mov	 BYTE PTR [rax+r11*4+1], cl
  003ec	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  003ef	4c 8b 5d 90	 mov	 r11, QWORD PTR next$1$[rbp-128]
  003f3	8b 7d 84	 mov	 edi, DWORD PTR sym$2$[rbp-128]
  003f6	49 8b c3	 mov	 rax, r11
  003f9	48 2b c1	 sub	 rax, rcx
  003fc	48 c1 f8 02	 sar	 rax, 2
  00400	66 42 89 44 a9
	02		 mov	 WORD PTR [rcx+r13*4+2], ax
  00406	e9 55 fe ff ff	 jmp	 $LL24@inflate_ta
$LN81@inflate_ta:

; 291  : 
; 292  :     /* fill in remaining table entry if code is incomplete (guaranteed to have
; 293  :        at most one remaining entry, since if the code is incomplete, the
; 294  :        maximum code length that was allowed to get this far is one bit) */
; 295  :     if (huff != 0) {

  0040b	85 db		 test	 ebx, ebx
  0040d	74 19		 je	 SHORT $LN1@inflate_ta

; 296  :         here.op = (unsigned char)64;            /* invalid code marker */
; 297  :         here.bits = (unsigned char)(len - drop);

  0040f	44 2a 55 80	 sub	 r10b, BYTE PTR drop$1$[rbp-128]

; 298  :         here.val = (unsigned short)0;

  00413	66 89 4d 52	 mov	 WORD PTR here$[rbp-126], cx
  00417	c6 45 50 40	 mov	 BYTE PTR here$[rbp-128], 64 ; 00000040H
  0041b	44 88 55 51	 mov	 BYTE PTR here$[rbp-127], r10b

; 299  :         next[huff] = here;

  0041f	8b 45 50	 mov	 eax, DWORD PTR here$[rbp-128]
  00422	8b cb		 mov	 ecx, ebx
  00424	41 89 04 8b	 mov	 DWORD PTR [r11+rcx*4], eax
$LN1@inflate_ta:

; 300  :     }
; 301  : 
; 302  :     /* set return parameters */
; 303  :     *table += used;

  00428	48 8b 4d 58	 mov	 rcx, QWORD PTR table$[rbp-128]
  0042c	41 8b c7	 mov	 eax, r15d
  0042f	48 c1 e0 02	 shl	 rax, 2
  00433	48 01 01	 add	 QWORD PTR [rcx], rax

; 304  :     *bits = root;

  00436	8b 45 88	 mov	 eax, DWORD PTR root$3$[rbp-128]
  00439	48 8b 4d 60	 mov	 rcx, QWORD PTR bits$[rbp-128]
  0043d	89 01		 mov	 DWORD PTR [rcx], eax

; 305  :     return 0;

  0043f	33 c0		 xor	 eax, eax
  00441	eb 03		 jmp	 SHORT $LN111@inflate_ta
$LN79@inflate_ta:

; 135  :         if (left < 0) return -1;        /* over-subscribed */

  00443	83 c8 ff	 or	 eax, -1
$LN111@inflate_ta:
  00446	4c 8b 74 24 78	 mov	 r14, QWORD PTR [rsp+120]
$LN63@inflate_ta:

; 306  : }

  0044b	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  00452	41 5f		 pop	 r15
  00454	41 5d		 pop	 r13
  00456	41 5c		 pop	 r12
  00458	5f		 pop	 rdi
  00459	5e		 pop	 rsi
  0045a	5b		 pop	 rbx
  0045b	5d		 pop	 rbp
  0045c	c3		 ret	 0
inflate_table ENDP
END

// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "flcnav_odb.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* FlcNavStructure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavStructure_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavTileBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavTileBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexedStringTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexedStringTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavMapIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavMapIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavMapIndex_MapEncodingRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavMapIndex_MapEncodingRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavMapIndex_MapRootLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavMapIndex_MapRootLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavMapIndex_MapDataBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavMapIndex_MapDataBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapDataBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapDataBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavAddressIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavAddressIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavAddressIndex_CitiesIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavAddressIndex_CitiesIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavAddressNameIndexData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavAddressNameIndexData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavAddressNameIndexData_AddressNameIndexData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavAddressNameIndexData_AddressNameIndexData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddressNameIndexDataAtom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddressNameIndexDataAtom_reflection_ = NULL;
const ::google::protobuf::Descriptor* CityIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CityIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* CityBlockIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CityBlockIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreetIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreetIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreetIntersection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreetIntersection_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransportRoutes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransportRoutes_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransportRoute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransportRoute_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransportRouteStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransportRouteStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransportStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransportStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransportStopsTree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransportStopsTree_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavTransportIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavTransportIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavPoiIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavPoiIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavPoiNameIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavPoiNameIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavPoiNameIndex_FlcNavPoiNameIndexData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavPoiNameIndex_FlcNavPoiNameIndexData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavPoiNameIndexDataAtom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavPoiNameIndexDataAtom_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavCategoryTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavCategoryTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavPoiBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavPoiBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavPoiCategories_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavPoiCategories_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavPoiBoxData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavPoiBoxData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavPoiBoxDataAtom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavPoiBoxDataAtom_reflection_ = NULL;
const ::google::protobuf::Descriptor* IdTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IdTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* RestrictionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RestrictionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouteData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouteData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavRoutingIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavRoutingIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavRoutingIndex_RouteEncodingRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavRoutingIndex_RouteEncodingRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavRoutingIndex_RouteDataBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavRoutingIndex_RouteDataBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlcNavRoutingIndex_RouteDataBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlcNavRoutingIndex_RouteDataBlock_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_flcnav_5fodb_2eproto() {
  protobuf_AddDesc_flcnav_5fodb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "flcnav_odb.proto");
  GOOGLE_CHECK(file != NULL);
  FlcNavStructure_descriptor_ = file->message_type(0);
  static const int FlcNavStructure_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavStructure, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavStructure, datecreated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavStructure, addressindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavStructure, transportindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavStructure, poiindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavStructure, mapindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavStructure, routingindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavStructure, versionconfirm_),
  };
  FlcNavStructure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavStructure_descriptor_,
      FlcNavStructure::default_instance_,
      FlcNavStructure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavStructure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavStructure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavStructure));
  FlcNavTileBox_descriptor_ = file->message_type(1);
  static const int FlcNavTileBox_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavTileBox, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavTileBox, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavTileBox, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavTileBox, bottom_),
  };
  FlcNavTileBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavTileBox_descriptor_,
      FlcNavTileBox::default_instance_,
      FlcNavTileBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavTileBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavTileBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavTileBox));
  StringTable_descriptor_ = file->message_type(2);
  static const int StringTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringTable, s_),
  };
  StringTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringTable_descriptor_,
      StringTable::default_instance_,
      StringTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringTable));
  IndexedStringTable_descriptor_ = file->message_type(3);
  static const int IndexedStringTable_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedStringTable, prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedStringTable, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedStringTable, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedStringTable, subtables_),
  };
  IndexedStringTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexedStringTable_descriptor_,
      IndexedStringTable::default_instance_,
      IndexedStringTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedStringTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexedStringTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexedStringTable));
  FlcNavMapIndex_descriptor_ = file->message_type(4);
  static const int FlcNavMapIndex_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex, rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex, levels_),
  };
  FlcNavMapIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavMapIndex_descriptor_,
      FlcNavMapIndex::default_instance_,
      FlcNavMapIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavMapIndex));
  FlcNavMapIndex_MapEncodingRule_descriptor_ = FlcNavMapIndex_descriptor_->nested_type(0);
  static const int FlcNavMapIndex_MapEncodingRule_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapEncodingRule, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapEncodingRule, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapEncodingRule, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapEncodingRule, minzoom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapEncodingRule, type_),
  };
  FlcNavMapIndex_MapEncodingRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavMapIndex_MapEncodingRule_descriptor_,
      FlcNavMapIndex_MapEncodingRule::default_instance_,
      FlcNavMapIndex_MapEncodingRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapEncodingRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapEncodingRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavMapIndex_MapEncodingRule));
  FlcNavMapIndex_MapRootLevel_descriptor_ = FlcNavMapIndex_descriptor_->nested_type(1);
  static const int FlcNavMapIndex_MapRootLevel_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapRootLevel, maxzoom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapRootLevel, minzoom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapRootLevel, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapRootLevel, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapRootLevel, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapRootLevel, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapRootLevel, boxes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapRootLevel, blocks_),
  };
  FlcNavMapIndex_MapRootLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavMapIndex_MapRootLevel_descriptor_,
      FlcNavMapIndex_MapRootLevel::default_instance_,
      FlcNavMapIndex_MapRootLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapRootLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapRootLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavMapIndex_MapRootLevel));
  FlcNavMapIndex_MapDataBox_descriptor_ = FlcNavMapIndex_descriptor_->nested_type(2);
  static const int FlcNavMapIndex_MapDataBox_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapDataBox, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapDataBox, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapDataBox, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapDataBox, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapDataBox, shifttomapdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapDataBox, ocean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapDataBox, boxes_),
  };
  FlcNavMapIndex_MapDataBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavMapIndex_MapDataBox_descriptor_,
      FlcNavMapIndex_MapDataBox::default_instance_,
      FlcNavMapIndex_MapDataBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapDataBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavMapIndex_MapDataBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavMapIndex_MapDataBox));
  MapDataBlock_descriptor_ = file->message_type(5);
  static const int MapDataBlock_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapDataBlock, baseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapDataBlock, dataobjects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapDataBlock, stringtable_),
  };
  MapDataBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapDataBlock_descriptor_,
      MapDataBlock::default_instance_,
      MapDataBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapDataBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapDataBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapDataBlock));
  MapData_descriptor_ = file->message_type(6);
  static const int MapData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, coordinates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, areacoordinates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, polygoninnercoordinates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, additionaltypes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, stringnames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, rasterbytes_),
  };
  MapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapData_descriptor_,
      MapData::default_instance_,
      MapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapData));
  FlcNavAddressIndex_descriptor_ = file->message_type(7);
  static const int FlcNavAddressIndex_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavAddressIndex, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavAddressIndex, name_en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavAddressIndex, boundaries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavAddressIndex, cities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavAddressIndex, nameindex_),
  };
  FlcNavAddressIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavAddressIndex_descriptor_,
      FlcNavAddressIndex::default_instance_,
      FlcNavAddressIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavAddressIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavAddressIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavAddressIndex));
  FlcNavAddressIndex_CitiesIndex_descriptor_ = FlcNavAddressIndex_descriptor_->nested_type(0);
  static const int FlcNavAddressIndex_CitiesIndex_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavAddressIndex_CitiesIndex, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavAddressIndex_CitiesIndex, cities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavAddressIndex_CitiesIndex, blocks_),
  };
  FlcNavAddressIndex_CitiesIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavAddressIndex_CitiesIndex_descriptor_,
      FlcNavAddressIndex_CitiesIndex::default_instance_,
      FlcNavAddressIndex_CitiesIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavAddressIndex_CitiesIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavAddressIndex_CitiesIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavAddressIndex_CitiesIndex));
  FlcNavAddressNameIndexData_descriptor_ = file->message_type(8);
  static const int FlcNavAddressNameIndexData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavAddressNameIndexData, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavAddressNameIndexData, atom_),
  };
  FlcNavAddressNameIndexData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavAddressNameIndexData_descriptor_,
      FlcNavAddressNameIndexData::default_instance_,
      FlcNavAddressNameIndexData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavAddressNameIndexData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavAddressNameIndexData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavAddressNameIndexData));
  FlcNavAddressNameIndexData_AddressNameIndexData_descriptor_ = FlcNavAddressNameIndexData_descriptor_->nested_type(0);
  static const int FlcNavAddressNameIndexData_AddressNameIndexData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavAddressNameIndexData_AddressNameIndexData, atom_),
  };
  FlcNavAddressNameIndexData_AddressNameIndexData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavAddressNameIndexData_AddressNameIndexData_descriptor_,
      FlcNavAddressNameIndexData_AddressNameIndexData::default_instance_,
      FlcNavAddressNameIndexData_AddressNameIndexData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavAddressNameIndexData_AddressNameIndexData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavAddressNameIndexData_AddressNameIndexData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavAddressNameIndexData_AddressNameIndexData));
  AddressNameIndexDataAtom_descriptor_ = file->message_type(9);
  static const int AddressNameIndexDataAtom_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressNameIndexDataAtom, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressNameIndexDataAtom, nameen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressNameIndexDataAtom, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressNameIndexDataAtom, shifttoindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressNameIndexDataAtom, shifttocityindex_),
  };
  AddressNameIndexDataAtom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddressNameIndexDataAtom_descriptor_,
      AddressNameIndexDataAtom::default_instance_,
      AddressNameIndexDataAtom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressNameIndexDataAtom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressNameIndexDataAtom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddressNameIndexDataAtom));
  CityIndex_descriptor_ = file->message_type(10);
  static const int CityIndex_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityIndex, city_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityIndex, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityIndex, name_en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityIndex, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityIndex, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityIndex, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityIndex, shifttocityblockindex_),
  };
  CityIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CityIndex_descriptor_,
      CityIndex::default_instance_,
      CityIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CityIndex));
  CityBlockIndex_descriptor_ = file->message_type(11);
  static const int CityBlockIndex_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityBlockIndex, shifttocityindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityBlockIndex, buildings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityBlockIndex, streets_),
  };
  CityBlockIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CityBlockIndex_descriptor_,
      CityBlockIndex::default_instance_,
      CityBlockIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityBlockIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityBlockIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CityBlockIndex));
  StreetIndex_descriptor_ = file->message_type(12);
  static const int StreetIndex_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIndex, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIndex, name_en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIndex, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIndex, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIndex, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIndex, buildings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIndex, intersections_),
  };
  StreetIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreetIndex_descriptor_,
      StreetIndex::default_instance_,
      StreetIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreetIndex));
  StreetIntersection_descriptor_ = file->message_type(13);
  static const int StreetIntersection_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIntersection, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIntersection, name_en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIntersection, intersectedx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIntersection, intersectedy_),
  };
  StreetIntersection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreetIntersection_descriptor_,
      StreetIntersection::default_instance_,
      StreetIntersection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIntersection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetIntersection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreetIntersection));
  BuildingIndex_descriptor_ = file->message_type(14);
  static const int BuildingIndex_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, name_en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, name2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, name_en2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, interpolation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, y2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, postcode_),
  };
  BuildingIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingIndex_descriptor_,
      BuildingIndex::default_instance_,
      BuildingIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingIndex));
  TransportRoutes_descriptor_ = file->message_type(15);
  static const int TransportRoutes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoutes, routes_),
  };
  TransportRoutes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransportRoutes_descriptor_,
      TransportRoutes::default_instance_,
      TransportRoutes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoutes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoutes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransportRoutes));
  TransportRoute_descriptor_ = file->message_type(16);
  static const int TransportRoute_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoute, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoute, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoute, operator__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoute, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoute, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoute, name_en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoute, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoute, directstops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoute, reversestops_),
  };
  TransportRoute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransportRoute_descriptor_,
      TransportRoute::default_instance_,
      TransportRoute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRoute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransportRoute));
  TransportRouteStop_descriptor_ = file->message_type(17);
  static const int TransportRouteStop_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRouteStop, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRouteStop, dx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRouteStop, dy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRouteStop, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRouteStop, name_en_),
  };
  TransportRouteStop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransportRouteStop_descriptor_,
      TransportRouteStop::default_instance_,
      TransportRouteStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRouteStop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRouteStop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransportRouteStop));
  TransportStop_descriptor_ = file->message_type(18);
  static const int TransportStop_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStop, dx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStop, dy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStop, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStop, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStop, name_en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStop, routes_),
  };
  TransportStop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransportStop_descriptor_,
      TransportStop::default_instance_,
      TransportStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransportStop));
  TransportStopsTree_descriptor_ = file->message_type(19);
  static const int TransportStopsTree_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStopsTree, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStopsTree, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStopsTree, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStopsTree, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStopsTree, subtrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStopsTree, leafs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStopsTree, baseid_),
  };
  TransportStopsTree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransportStopsTree_descriptor_,
      TransportStopsTree::default_instance_,
      TransportStopsTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStopsTree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportStopsTree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransportStopsTree));
  FlcNavTransportIndex_descriptor_ = file->message_type(20);
  static const int FlcNavTransportIndex_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavTransportIndex, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavTransportIndex, routes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavTransportIndex, stops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavTransportIndex, stringtable_),
  };
  FlcNavTransportIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavTransportIndex_descriptor_,
      FlcNavTransportIndex::default_instance_,
      FlcNavTransportIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavTransportIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavTransportIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavTransportIndex));
  FlcNavPoiIndex_descriptor_ = file->message_type(21);
  static const int FlcNavPoiIndex_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiIndex, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiIndex, boundaries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiIndex, categoriestable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiIndex, nameindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiIndex, boxes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiIndex, poidata_),
  };
  FlcNavPoiIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavPoiIndex_descriptor_,
      FlcNavPoiIndex::default_instance_,
      FlcNavPoiIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavPoiIndex));
  FlcNavPoiNameIndex_descriptor_ = file->message_type(22);
  static const int FlcNavPoiNameIndex_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiNameIndex, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiNameIndex, data_),
  };
  FlcNavPoiNameIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavPoiNameIndex_descriptor_,
      FlcNavPoiNameIndex::default_instance_,
      FlcNavPoiNameIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiNameIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiNameIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavPoiNameIndex));
  FlcNavPoiNameIndex_FlcNavPoiNameIndexData_descriptor_ = FlcNavPoiNameIndex_descriptor_->nested_type(0);
  static const int FlcNavPoiNameIndex_FlcNavPoiNameIndexData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiNameIndex_FlcNavPoiNameIndexData, atoms_),
  };
  FlcNavPoiNameIndex_FlcNavPoiNameIndexData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavPoiNameIndex_FlcNavPoiNameIndexData_descriptor_,
      FlcNavPoiNameIndex_FlcNavPoiNameIndexData::default_instance_,
      FlcNavPoiNameIndex_FlcNavPoiNameIndexData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiNameIndex_FlcNavPoiNameIndexData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiNameIndex_FlcNavPoiNameIndexData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavPoiNameIndex_FlcNavPoiNameIndexData));
  FlcNavPoiNameIndexDataAtom_descriptor_ = file->message_type(23);
  static const int FlcNavPoiNameIndexDataAtom_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiNameIndexDataAtom, zoom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiNameIndexDataAtom, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiNameIndexDataAtom, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiNameIndexDataAtom, shiftto_),
  };
  FlcNavPoiNameIndexDataAtom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavPoiNameIndexDataAtom_descriptor_,
      FlcNavPoiNameIndexDataAtom::default_instance_,
      FlcNavPoiNameIndexDataAtom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiNameIndexDataAtom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiNameIndexDataAtom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavPoiNameIndexDataAtom));
  FlcNavCategoryTable_descriptor_ = file->message_type(24);
  static const int FlcNavCategoryTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavCategoryTable, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavCategoryTable, subcategories_),
  };
  FlcNavCategoryTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavCategoryTable_descriptor_,
      FlcNavCategoryTable::default_instance_,
      FlcNavCategoryTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavCategoryTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavCategoryTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavCategoryTable));
  FlcNavPoiBox_descriptor_ = file->message_type(25);
  static const int FlcNavPoiBox_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBox, zoom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBox, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBox, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBox, categories_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBox, subboxes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBox, shifttodata_),
  };
  FlcNavPoiBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavPoiBox_descriptor_,
      FlcNavPoiBox::default_instance_,
      FlcNavPoiBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavPoiBox));
  FlcNavPoiCategories_descriptor_ = file->message_type(26);
  static const int FlcNavPoiCategories_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiCategories, categories_),
  };
  FlcNavPoiCategories_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavPoiCategories_descriptor_,
      FlcNavPoiCategories::default_instance_,
      FlcNavPoiCategories_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiCategories, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiCategories, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavPoiCategories));
  FlcNavPoiBoxData_descriptor_ = file->message_type(27);
  static const int FlcNavPoiBoxData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBoxData, zoom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBoxData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBoxData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBoxData, poidata_),
  };
  FlcNavPoiBoxData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavPoiBoxData_descriptor_,
      FlcNavPoiBoxData::default_instance_,
      FlcNavPoiBoxData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBoxData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBoxData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavPoiBoxData));
  FlcNavPoiBoxDataAtom_descriptor_ = file->message_type(28);
  static const int FlcNavPoiBoxDataAtom_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBoxDataAtom, dx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBoxDataAtom, dy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBoxDataAtom, categories_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBoxDataAtom, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBoxDataAtom, nameen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBoxDataAtom, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBoxDataAtom, openinghours_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBoxDataAtom, site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBoxDataAtom, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBoxDataAtom, note_),
  };
  FlcNavPoiBoxDataAtom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavPoiBoxDataAtom_descriptor_,
      FlcNavPoiBoxDataAtom::default_instance_,
      FlcNavPoiBoxDataAtom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBoxDataAtom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavPoiBoxDataAtom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavPoiBoxDataAtom));
  IdTable_descriptor_ = file->message_type(29);
  static const int IdTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdTable, routeid_),
  };
  IdTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IdTable_descriptor_,
      IdTable::default_instance_,
      IdTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IdTable));
  RestrictionData_descriptor_ = file->message_type(30);
  static const int RestrictionData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestrictionData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestrictionData, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestrictionData, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestrictionData, via_),
  };
  RestrictionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RestrictionData_descriptor_,
      RestrictionData::default_instance_,
      RestrictionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestrictionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestrictionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RestrictionData));
  RouteData_descriptor_ = file->message_type(31);
  static const int RouteData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteData, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteData, pointtypes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteData, pointjnind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteData, pointjnwayids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteData, types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteData, routeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteData, stringnames_),
  };
  RouteData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RouteData_descriptor_,
      RouteData::default_instance_,
      RouteData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RouteData));
  FlcNavRoutingIndex_descriptor_ = file->message_type(32);
  static const int FlcNavRoutingIndex_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex, rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex, rootboxes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex, blocks_),
  };
  FlcNavRoutingIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavRoutingIndex_descriptor_,
      FlcNavRoutingIndex::default_instance_,
      FlcNavRoutingIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavRoutingIndex));
  FlcNavRoutingIndex_RouteEncodingRule_descriptor_ = FlcNavRoutingIndex_descriptor_->nested_type(0);
  static const int FlcNavRoutingIndex_RouteEncodingRule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex_RouteEncodingRule, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex_RouteEncodingRule, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex_RouteEncodingRule, id_),
  };
  FlcNavRoutingIndex_RouteEncodingRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavRoutingIndex_RouteEncodingRule_descriptor_,
      FlcNavRoutingIndex_RouteEncodingRule::default_instance_,
      FlcNavRoutingIndex_RouteEncodingRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex_RouteEncodingRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex_RouteEncodingRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavRoutingIndex_RouteEncodingRule));
  FlcNavRoutingIndex_RouteDataBox_descriptor_ = FlcNavRoutingIndex_descriptor_->nested_type(1);
  static const int FlcNavRoutingIndex_RouteDataBox_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex_RouteDataBox, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex_RouteDataBox, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex_RouteDataBox, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex_RouteDataBox, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex_RouteDataBox, shifttodata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex_RouteDataBox, boxes_),
  };
  FlcNavRoutingIndex_RouteDataBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavRoutingIndex_RouteDataBox_descriptor_,
      FlcNavRoutingIndex_RouteDataBox::default_instance_,
      FlcNavRoutingIndex_RouteDataBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex_RouteDataBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex_RouteDataBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavRoutingIndex_RouteDataBox));
  FlcNavRoutingIndex_RouteDataBlock_descriptor_ = FlcNavRoutingIndex_descriptor_->nested_type(2);
  static const int FlcNavRoutingIndex_RouteDataBlock_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex_RouteDataBlock, idtable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex_RouteDataBlock, stringtable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex_RouteDataBlock, dataobjects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex_RouteDataBlock, restrictions_),
  };
  FlcNavRoutingIndex_RouteDataBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlcNavRoutingIndex_RouteDataBlock_descriptor_,
      FlcNavRoutingIndex_RouteDataBlock::default_instance_,
      FlcNavRoutingIndex_RouteDataBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex_RouteDataBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlcNavRoutingIndex_RouteDataBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlcNavRoutingIndex_RouteDataBlock));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_flcnav_5fodb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavStructure_descriptor_, &FlcNavStructure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavTileBox_descriptor_, &FlcNavTileBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringTable_descriptor_, &StringTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexedStringTable_descriptor_, &IndexedStringTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavMapIndex_descriptor_, &FlcNavMapIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavMapIndex_MapEncodingRule_descriptor_, &FlcNavMapIndex_MapEncodingRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavMapIndex_MapRootLevel_descriptor_, &FlcNavMapIndex_MapRootLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavMapIndex_MapDataBox_descriptor_, &FlcNavMapIndex_MapDataBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapDataBlock_descriptor_, &MapDataBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapData_descriptor_, &MapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavAddressIndex_descriptor_, &FlcNavAddressIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavAddressIndex_CitiesIndex_descriptor_, &FlcNavAddressIndex_CitiesIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavAddressNameIndexData_descriptor_, &FlcNavAddressNameIndexData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavAddressNameIndexData_AddressNameIndexData_descriptor_, &FlcNavAddressNameIndexData_AddressNameIndexData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddressNameIndexDataAtom_descriptor_, &AddressNameIndexDataAtom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CityIndex_descriptor_, &CityIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CityBlockIndex_descriptor_, &CityBlockIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreetIndex_descriptor_, &StreetIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreetIntersection_descriptor_, &StreetIntersection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingIndex_descriptor_, &BuildingIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransportRoutes_descriptor_, &TransportRoutes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransportRoute_descriptor_, &TransportRoute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransportRouteStop_descriptor_, &TransportRouteStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransportStop_descriptor_, &TransportStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransportStopsTree_descriptor_, &TransportStopsTree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavTransportIndex_descriptor_, &FlcNavTransportIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavPoiIndex_descriptor_, &FlcNavPoiIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavPoiNameIndex_descriptor_, &FlcNavPoiNameIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavPoiNameIndex_FlcNavPoiNameIndexData_descriptor_, &FlcNavPoiNameIndex_FlcNavPoiNameIndexData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavPoiNameIndexDataAtom_descriptor_, &FlcNavPoiNameIndexDataAtom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavCategoryTable_descriptor_, &FlcNavCategoryTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavPoiBox_descriptor_, &FlcNavPoiBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavPoiCategories_descriptor_, &FlcNavPoiCategories::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavPoiBoxData_descriptor_, &FlcNavPoiBoxData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavPoiBoxDataAtom_descriptor_, &FlcNavPoiBoxDataAtom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IdTable_descriptor_, &IdTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RestrictionData_descriptor_, &RestrictionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RouteData_descriptor_, &RouteData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavRoutingIndex_descriptor_, &FlcNavRoutingIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavRoutingIndex_RouteEncodingRule_descriptor_, &FlcNavRoutingIndex_RouteEncodingRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavRoutingIndex_RouteDataBox_descriptor_, &FlcNavRoutingIndex_RouteDataBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlcNavRoutingIndex_RouteDataBlock_descriptor_, &FlcNavRoutingIndex_RouteDataBlock::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_flcnav_5fodb_2eproto() {
  delete FlcNavStructure::default_instance_;
  delete FlcNavStructure_reflection_;
  delete FlcNavTileBox::default_instance_;
  delete FlcNavTileBox_reflection_;
  delete StringTable::default_instance_;
  delete StringTable_reflection_;
  delete IndexedStringTable::default_instance_;
  delete IndexedStringTable_reflection_;
  delete FlcNavMapIndex::default_instance_;
  delete FlcNavMapIndex_reflection_;
  delete FlcNavMapIndex_MapEncodingRule::default_instance_;
  delete FlcNavMapIndex_MapEncodingRule_reflection_;
  delete FlcNavMapIndex_MapRootLevel::default_instance_;
  delete FlcNavMapIndex_MapRootLevel_reflection_;
  delete FlcNavMapIndex_MapDataBox::default_instance_;
  delete FlcNavMapIndex_MapDataBox_reflection_;
  delete MapDataBlock::default_instance_;
  delete MapDataBlock_reflection_;
  delete MapData::default_instance_;
  delete MapData_reflection_;
  delete FlcNavAddressIndex::default_instance_;
  delete FlcNavAddressIndex_reflection_;
  delete FlcNavAddressIndex_CitiesIndex::default_instance_;
  delete FlcNavAddressIndex_CitiesIndex_reflection_;
  delete FlcNavAddressNameIndexData::default_instance_;
  delete FlcNavAddressNameIndexData_reflection_;
  delete FlcNavAddressNameIndexData_AddressNameIndexData::default_instance_;
  delete FlcNavAddressNameIndexData_AddressNameIndexData_reflection_;
  delete AddressNameIndexDataAtom::default_instance_;
  delete AddressNameIndexDataAtom_reflection_;
  delete CityIndex::default_instance_;
  delete CityIndex_reflection_;
  delete CityBlockIndex::default_instance_;
  delete CityBlockIndex_reflection_;
  delete StreetIndex::default_instance_;
  delete StreetIndex_reflection_;
  delete StreetIntersection::default_instance_;
  delete StreetIntersection_reflection_;
  delete BuildingIndex::default_instance_;
  delete BuildingIndex_reflection_;
  delete TransportRoutes::default_instance_;
  delete TransportRoutes_reflection_;
  delete TransportRoute::default_instance_;
  delete TransportRoute_reflection_;
  delete TransportRouteStop::default_instance_;
  delete TransportRouteStop_reflection_;
  delete TransportStop::default_instance_;
  delete TransportStop_reflection_;
  delete TransportStopsTree::default_instance_;
  delete TransportStopsTree_reflection_;
  delete FlcNavTransportIndex::default_instance_;
  delete FlcNavTransportIndex_reflection_;
  delete FlcNavPoiIndex::default_instance_;
  delete FlcNavPoiIndex_reflection_;
  delete FlcNavPoiNameIndex::default_instance_;
  delete FlcNavPoiNameIndex_reflection_;
  delete FlcNavPoiNameIndex_FlcNavPoiNameIndexData::default_instance_;
  delete FlcNavPoiNameIndex_FlcNavPoiNameIndexData_reflection_;
  delete FlcNavPoiNameIndexDataAtom::default_instance_;
  delete FlcNavPoiNameIndexDataAtom_reflection_;
  delete FlcNavCategoryTable::default_instance_;
  delete FlcNavCategoryTable_reflection_;
  delete FlcNavPoiBox::default_instance_;
  delete FlcNavPoiBox_reflection_;
  delete FlcNavPoiCategories::default_instance_;
  delete FlcNavPoiCategories_reflection_;
  delete FlcNavPoiBoxData::default_instance_;
  delete FlcNavPoiBoxData_reflection_;
  delete FlcNavPoiBoxDataAtom::default_instance_;
  delete FlcNavPoiBoxDataAtom_reflection_;
  delete IdTable::default_instance_;
  delete IdTable_reflection_;
  delete RestrictionData::default_instance_;
  delete RestrictionData_reflection_;
  delete RouteData::default_instance_;
  delete RouteData_reflection_;
  delete FlcNavRoutingIndex::default_instance_;
  delete FlcNavRoutingIndex_reflection_;
  delete FlcNavRoutingIndex_RouteEncodingRule::default_instance_;
  delete FlcNavRoutingIndex_RouteEncodingRule_reflection_;
  delete FlcNavRoutingIndex_RouteDataBox::default_instance_;
  delete FlcNavRoutingIndex_RouteDataBox_reflection_;
  delete FlcNavRoutingIndex_RouteDataBlock::default_instance_;
  delete FlcNavRoutingIndex_RouteDataBlock_reflection_;
}

void protobuf_AddDesc_flcnav_5fodb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020flcnav_odb.proto\"\232\002\n\017FlcNavStructure\022\017"
    "\n\007version\030\001 \002(\r\022\023\n\013dateCreated\030\022 \002(\003\022)\n\014"
    "addressIndex\030\007 \003(\0132\023.FlcNavAddressIndex\022"
    "-\n\016transportIndex\030\004 \003(\0132\025.FlcNavTranspor"
    "tIndex\022!\n\010poiIndex\030\010 \003(\0132\017.FlcNavPoiInde"
    "x\022!\n\010mapIndex\030\006 \003(\0132\017.FlcNavMapIndex\022)\n\014"
    "routingIndex\030\t \003(\0132\023.FlcNavRoutingIndex\022"
    "\026\n\016versionConfirm\030  \002(\r\"I\n\rFlcNavTileBox"
    "\022\014\n\004left\030\001 \002(\r\022\r\n\005right\030\002 \002(\r\022\013\n\003top\030\003 \002"
    "(\r\022\016\n\006bottom\030\004 \002(\r\"\030\n\013StringTable\022\t\n\001s\030\001"
    " \003(\t\"f\n\022IndexedStringTable\022\016\n\006prefix\030\001 \001"
    "(\t\022\013\n\003key\030\003 \003(\t\022\013\n\003val\030\004 \003(\007\022&\n\tsubtable"
    "s\030\005 \003(\0132\023.IndexedStringTable\"\250\004\n\016FlcNavM"
    "apIndex\022\014\n\004name\030\002 \002(\t\022.\n\005rules\030\004 \003(\0132\037.F"
    "lcNavMapIndex.MapEncodingRule\022,\n\006levels\030"
    "\005 \003(\0132\034.FlcNavMapIndex.MapRootLevel\032X\n\017M"
    "apEncodingRule\022\013\n\003tag\030\003 \002(\t\022\r\n\005value\030\005 \001"
    "(\t\022\n\n\002id\030\007 \001(\r\022\017\n\007minZoom\030\t \001(\r\022\014\n\004type\030"
    "\n \001(\r\032\264\001\n\014MapRootLevel\022\017\n\007maxZoom\030\001 \002(\005\022"
    "\017\n\007minZoom\030\002 \002(\005\022\014\n\004left\030\003 \002(\005\022\r\n\005right\030"
    "\004 \002(\005\022\013\n\003top\030\005 \002(\005\022\016\n\006bottom\030\006 \002(\005\022)\n\005bo"
    "xes\030\007 \003(\0132\032.FlcNavMapIndex.MapDataBox\022\035\n"
    "\006blocks\030\017 \003(\0132\r.MapDataBlock\032\230\001\n\nMapData"
    "Box\022\014\n\004left\030\001 \002(\021\022\r\n\005right\030\002 \002(\021\022\013\n\003top\030"
    "\003 \002(\021\022\016\n\006bottom\030\004 \002(\021\022\026\n\016shiftToMapData\030"
    "\005 \001(\007\022\r\n\005ocean\030\006 \001(\010\022)\n\005boxes\030\007 \003(\0132\032.Fl"
    "cNavMapIndex.MapDataBox\"`\n\014MapDataBlock\022"
    "\016\n\006baseId\030\n \001(\004\022\035\n\013dataObjects\030\014 \003(\0132\010.M"
    "apData\022!\n\013stringTable\030\017 \001(\0132\014.StringTabl"
    "e\"\266\001\n\007MapData\022\023\n\013coordinates\030\001 \001(\014\022\027\n\017ar"
    "eaCoordinates\030\002 \001(\014\022\037\n\027polygonInnerCoord"
    "inates\030\004 \003(\014\022\027\n\017additionalTypes\030\006 \001(\014\022\r\n"
    "\005types\030\007 \002(\014\022\023\n\013stringNames\030\n \001(\014\022\n\n\002id\030"
    "\014 \002(\022\022\023\n\013rasterBytes\030\017 \001(\014\"\222\002\n\022FlcNavAdd"
    "ressIndex\022\014\n\004name\030\001 \002(\t\022\017\n\007name_en\030\002 \001(\t"
    "\022\"\n\nboundaries\030\003 \001(\0132\016.FlcNavTileBox\022/\n\006"
    "cities\030\006 \003(\0132\037.FlcNavAddressIndex.Cities"
    "Index\022.\n\tnameIndex\030\007 \001(\0132\033.FlcNavAddress"
    "NameIndexData\032X\n\013CitiesIndex\022\014\n\004type\030\002 \002"
    "(\r\022\032\n\006cities\030\005 \003(\0132\n.CityIndex\022\037\n\006blocks"
    "\030\007 \003(\0132\017.CityBlockIndex\"\301\001\n\032FlcNavAddres"
    "sNameIndexData\022\"\n\005table\030\004 \002(\0132\023.IndexedS"
    "tringTable\022>\n\004atom\030\007 \003(\01320.FlcNavAddress"
    "NameIndexData.AddressNameIndexData\032?\n\024Ad"
    "dressNameIndexData\022\'\n\004atom\030\004 \003(\0132\031.Addre"
    "ssNameIndexDataAtom\"v\n\030AddressNameIndexD"
    "ataAtom\022\014\n\004name\030\001 \001(\t\022\016\n\006nameEn\030\002 \001(\t\022\014\n"
    "\004type\030\003 \002(\r\022\024\n\014shiftToIndex\030\005 \003(\005\022\030\n\020shi"
    "ftToCityIndex\030\006 \003(\005\"~\n\tCityIndex\022\021\n\tcity"
    "_type\030\001 \001(\r\022\014\n\004name\030\002 \002(\t\022\017\n\007name_en\030\003 \001"
    "(\t\022\n\n\002id\030\004 \001(\004\022\t\n\001x\030\005 \002(\r\022\t\n\001y\030\006 \002(\r\022\035\n\025"
    "shiftToCityBlockIndex\030\n \001(\007\"l\n\016CityBlock"
    "Index\022\030\n\020shiftToCityIndex\030\004 \001(\007\022!\n\tbuild"
    "ings\030\n \003(\0132\016.BuildingIndex\022\035\n\007streets\030\014 "
    "\003(\0132\014.StreetIndex\"\235\001\n\013StreetIndex\022\014\n\004nam"
    "e\030\001 \002(\t\022\017\n\007name_en\030\002 \001(\t\022\t\n\001x\030\003 \002(\021\022\t\n\001y"
    "\030\004 \002(\021\022\n\n\002id\030\006 \001(\004\022!\n\tbuildings\030\014 \003(\0132\016."
    "BuildingIndex\022*\n\rintersections\030\005 \003(\0132\023.S"
    "treetIntersection\"_\n\022StreetIntersection\022"
    "\014\n\004name\030\002 \002(\t\022\017\n\007name_en\030\003 \001(\t\022\024\n\014inters"
    "ectedX\030\004 \002(\021\022\024\n\014intersectedY\030\005 \002(\021\"\262\001\n\rB"
    "uildingIndex\022\014\n\004name\030\001 \002(\t\022\017\n\007name_en\030\002 "
    "\001(\t\022\r\n\005name2\030\003 \001(\t\022\020\n\010name_en2\030\004 \001(\t\022\025\n\r"
    "interpolation\030\005 \001(\021\022\t\n\001x\030\007 \002(\021\022\t\n\001y\030\010 \002("
    "\021\022\n\n\002x2\030\t \001(\021\022\n\n\002y2\030\n \001(\021\022\n\n\002id\030\r \001(\004\022\020\n"
    "\010postcode\030\016 \001(\t\"2\n\017TransportRoutes\022\037\n\006ro"
    "utes\030\006 \003(\0132\017.TransportRoute\"\317\001\n\016Transpor"
    "tRoute\022\n\n\002id\030\001 \002(\004\022\014\n\004type\030\003 \001(\r\022\020\n\010oper"
    "ator\030\004 \001(\r\022\013\n\003ref\030\005 \001(\t\022\014\n\004name\030\006 \001(\r\022\017\n"
    "\007name_en\030\007 \001(\r\022\020\n\010distance\030\010 \001(\r\022(\n\013dire"
    "ctStops\030\017 \003(\0132\023.TransportRouteStop\022)\n\014re"
    "verseStops\030\020 \003(\0132\023.TransportRouteStop\"W\n"
    "\022TransportRouteStop\022\n\n\002id\030\001 \002(\022\022\n\n\002dx\030\002 "
    "\002(\021\022\n\n\002dy\030\003 \002(\021\022\014\n\004name\030\006 \002(\r\022\017\n\007name_en"
    "\030\007 \001(\r\"b\n\rTransportStop\022\n\n\002dx\030\001 \002(\021\022\n\n\002d"
    "y\030\002 \002(\021\022\n\n\002id\030\005 \002(\022\022\014\n\004name\030\006 \002(\r\022\017\n\007nam"
    "e_en\030\007 \001(\r\022\016\n\006routes\030\020 \003(\r\"\244\001\n\022Transport"
    "StopsTree\022\014\n\004left\030\001 \002(\021\022\r\n\005right\030\002 \002(\021\022\013"
    "\n\003top\030\003 \002(\021\022\016\n\006bottom\030\004 \002(\021\022%\n\010subtrees\030"
    "\007 \003(\0132\023.TransportStopsTree\022\035\n\005leafs\030\010 \003("
    "\0132\016.TransportStop\022\016\n\006baseId\030\020 \001(\004\"\215\001\n\024Fl"
    "cNavTransportIndex\022\014\n\004name\030\001 \001(\t\022 \n\006rout"
    "es\030\003 \001(\0132\020.TransportRoutes\022\"\n\005stops\030\006 \001("
    "\0132\023.TransportStopsTree\022!\n\013stringTable\030\t "
    "\002(\0132\014.StringTable\"\333\001\n\016FlcNavPoiIndex\022\014\n\004"
    "name\030\001 \002(\t\022\"\n\nboundaries\030\002 \002(\0132\016.FlcNavT"
    "ileBox\022-\n\017categoriesTable\030\003 \003(\0132\024.FlcNav"
    "CategoryTable\022&\n\tnameIndex\030\004 \001(\0132\023.FlcNa"
    "vPoiNameIndex\022\034\n\005boxes\030\006 \003(\0132\r.FlcNavPoi"
    "Box\022\"\n\007poiData\030\t \003(\0132\021.FlcNavPoiBoxData\""
    "\270\001\n\022FlcNavPoiNameIndex\022\"\n\005table\030\003 \002(\0132\023."
    "IndexedStringTable\0228\n\004data\030\005 \003(\0132*.FlcNa"
    "vPoiNameIndex.FlcNavPoiNameIndexData\032D\n\026"
    "FlcNavPoiNameIndexData\022*\n\005atoms\030\003 \003(\0132\033."
    "FlcNavPoiNameIndexDataAtom\"Q\n\032FlcNavPoiN"
    "ameIndexDataAtom\022\014\n\004zoom\030\002 \001(\r\022\t\n\001x\030\003 \001("
    "\r\022\t\n\001y\030\004 \001(\r\022\017\n\007shiftTo\030\016 \001(\007\">\n\023FlcNavC"
    "ategoryTable\022\020\n\010category\030\001 \002(\t\022\025\n\rsubcat"
    "egories\030\003 \003(\t\"\227\001\n\014FlcNavPoiBox\022\014\n\004zoom\030\001"
    " \002(\r\022\014\n\004left\030\002 \002(\021\022\013\n\003top\030\003 \002(\021\022(\n\ncateg"
    "ories\030\004 \001(\0132\024.FlcNavPoiCategories\022\037\n\010sub"
    "Boxes\030\n \003(\0132\r.FlcNavPoiBox\022\023\n\013shiftToDat"
    "a\030\016 \001(\007\")\n\023FlcNavPoiCategories\022\022\n\ncatego"
    "ries\030\003 \003(\r\"^\n\020FlcNavPoiBoxData\022\014\n\004zoom\030\001"
    " \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\022&\n\007poiData\030\005 "
    "\003(\0132\025.FlcNavPoiBoxDataAtom\"\255\001\n\024FlcNavPoi"
    "BoxDataAtom\022\n\n\002dx\030\002 \002(\021\022\n\n\002dy\030\003 \002(\021\022\022\n\nc"
    "ategories\030\004 \003(\r\022\014\n\004name\030\006 \001(\t\022\016\n\006nameEn\030"
    "\007 \001(\t\022\n\n\002id\030\010 \001(\004\022\024\n\014openingHours\030\n \001(\t\022"
    "\014\n\004site\030\013 \001(\t\022\r\n\005phone\030\014 \001(\t\022\014\n\004note\030\r \001"
    "(\t\"\032\n\007IdTable\022\017\n\007routeId\030\001 \003(\022\"F\n\017Restri"
    "ctionData\022\014\n\004type\030\001 \002(\005\022\014\n\004from\030\002 \002(\005\022\n\n"
    "\002to\030\003 \002(\005\022\013\n\003via\030\004 \001(\005\"\217\001\n\tRouteData\022\016\n\006"
    "points\030\001 \002(\014\022\022\n\npointTypes\030\004 \001(\014\022\022\n\npoin"
    "tJNInd\030\005 \001(\014\022\025\n\rpointJNWayIds\030\006 \001(\014\022\r\n\005t"
    "ypes\030\007 \002(\014\022\017\n\007routeId\030\014 \002(\005\022\023\n\013stringNam"
    "es\030\016 \001(\014\"\251\004\n\022FlcNavRoutingIndex\022\014\n\004name\030"
    "\001 \002(\t\0224\n\005rules\030\002 \003(\0132%.FlcNavRoutingInde"
    "x.RouteEncodingRule\0223\n\trootBoxes\030\003 \003(\0132 "
    ".FlcNavRoutingIndex.RouteDataBox\0222\n\006bloc"
    "ks\030\005 \003(\0132\".FlcNavRoutingIndex.RouteDataB"
    "lock\032;\n\021RouteEncodingRule\022\013\n\003tag\030\003 \002(\t\022\r"
    "\n\005value\030\005 \002(\t\022\n\n\002id\030\007 \001(\r\032\216\001\n\014RouteDataB"
    "ox\022\014\n\004left\030\001 \002(\021\022\r\n\005right\030\002 \002(\021\022\013\n\003top\030\003"
    " \002(\021\022\016\n\006bottom\030\004 \002(\021\022\023\n\013shiftToData\030\005 \001("
    "\007\022/\n\005boxes\030\007 \003(\0132 .FlcNavRoutingIndex.Ro"
    "uteDataBox\032\227\001\n\016RouteDataBlock\022\031\n\007idTable"
    "\030\005 \001(\0132\010.IdTable\022!\n\013stringTable\030\010 \001(\0132\014."
    "StringTable\022\037\n\013dataObjects\030\006 \003(\0132\n.Route"
    "Data\022&\n\014restrictions\030\007 \003(\0132\020.Restriction"
    "DataB\023\n\021net.flcnav.binary", 5225);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flcnav_odb.proto", &protobuf_RegisterTypes);
  FlcNavStructure::default_instance_ = new FlcNavStructure();
  FlcNavTileBox::default_instance_ = new FlcNavTileBox();
  StringTable::default_instance_ = new StringTable();
  IndexedStringTable::default_instance_ = new IndexedStringTable();
  FlcNavMapIndex::default_instance_ = new FlcNavMapIndex();
  FlcNavMapIndex_MapEncodingRule::default_instance_ = new FlcNavMapIndex_MapEncodingRule();
  FlcNavMapIndex_MapRootLevel::default_instance_ = new FlcNavMapIndex_MapRootLevel();
  FlcNavMapIndex_MapDataBox::default_instance_ = new FlcNavMapIndex_MapDataBox();
  MapDataBlock::default_instance_ = new MapDataBlock();
  MapData::default_instance_ = new MapData();
  FlcNavAddressIndex::default_instance_ = new FlcNavAddressIndex();
  FlcNavAddressIndex_CitiesIndex::default_instance_ = new FlcNavAddressIndex_CitiesIndex();
  FlcNavAddressNameIndexData::default_instance_ = new FlcNavAddressNameIndexData();
  FlcNavAddressNameIndexData_AddressNameIndexData::default_instance_ = new FlcNavAddressNameIndexData_AddressNameIndexData();
  AddressNameIndexDataAtom::default_instance_ = new AddressNameIndexDataAtom();
  CityIndex::default_instance_ = new CityIndex();
  CityBlockIndex::default_instance_ = new CityBlockIndex();
  StreetIndex::default_instance_ = new StreetIndex();
  StreetIntersection::default_instance_ = new StreetIntersection();
  BuildingIndex::default_instance_ = new BuildingIndex();
  TransportRoutes::default_instance_ = new TransportRoutes();
  TransportRoute::default_instance_ = new TransportRoute();
  TransportRouteStop::default_instance_ = new TransportRouteStop();
  TransportStop::default_instance_ = new TransportStop();
  TransportStopsTree::default_instance_ = new TransportStopsTree();
  FlcNavTransportIndex::default_instance_ = new FlcNavTransportIndex();
  FlcNavPoiIndex::default_instance_ = new FlcNavPoiIndex();
  FlcNavPoiNameIndex::default_instance_ = new FlcNavPoiNameIndex();
  FlcNavPoiNameIndex_FlcNavPoiNameIndexData::default_instance_ = new FlcNavPoiNameIndex_FlcNavPoiNameIndexData();
  FlcNavPoiNameIndexDataAtom::default_instance_ = new FlcNavPoiNameIndexDataAtom();
  FlcNavCategoryTable::default_instance_ = new FlcNavCategoryTable();
  FlcNavPoiBox::default_instance_ = new FlcNavPoiBox();
  FlcNavPoiCategories::default_instance_ = new FlcNavPoiCategories();
  FlcNavPoiBoxData::default_instance_ = new FlcNavPoiBoxData();
  FlcNavPoiBoxDataAtom::default_instance_ = new FlcNavPoiBoxDataAtom();
  IdTable::default_instance_ = new IdTable();
  RestrictionData::default_instance_ = new RestrictionData();
  RouteData::default_instance_ = new RouteData();
  FlcNavRoutingIndex::default_instance_ = new FlcNavRoutingIndex();
  FlcNavRoutingIndex_RouteEncodingRule::default_instance_ = new FlcNavRoutingIndex_RouteEncodingRule();
  FlcNavRoutingIndex_RouteDataBox::default_instance_ = new FlcNavRoutingIndex_RouteDataBox();
  FlcNavRoutingIndex_RouteDataBlock::default_instance_ = new FlcNavRoutingIndex_RouteDataBlock();
  FlcNavStructure::default_instance_->InitAsDefaultInstance();
  FlcNavTileBox::default_instance_->InitAsDefaultInstance();
  StringTable::default_instance_->InitAsDefaultInstance();
  IndexedStringTable::default_instance_->InitAsDefaultInstance();
  FlcNavMapIndex::default_instance_->InitAsDefaultInstance();
  FlcNavMapIndex_MapEncodingRule::default_instance_->InitAsDefaultInstance();
  FlcNavMapIndex_MapRootLevel::default_instance_->InitAsDefaultInstance();
  FlcNavMapIndex_MapDataBox::default_instance_->InitAsDefaultInstance();
  MapDataBlock::default_instance_->InitAsDefaultInstance();
  MapData::default_instance_->InitAsDefaultInstance();
  FlcNavAddressIndex::default_instance_->InitAsDefaultInstance();
  FlcNavAddressIndex_CitiesIndex::default_instance_->InitAsDefaultInstance();
  FlcNavAddressNameIndexData::default_instance_->InitAsDefaultInstance();
  FlcNavAddressNameIndexData_AddressNameIndexData::default_instance_->InitAsDefaultInstance();
  AddressNameIndexDataAtom::default_instance_->InitAsDefaultInstance();
  CityIndex::default_instance_->InitAsDefaultInstance();
  CityBlockIndex::default_instance_->InitAsDefaultInstance();
  StreetIndex::default_instance_->InitAsDefaultInstance();
  StreetIntersection::default_instance_->InitAsDefaultInstance();
  BuildingIndex::default_instance_->InitAsDefaultInstance();
  TransportRoutes::default_instance_->InitAsDefaultInstance();
  TransportRoute::default_instance_->InitAsDefaultInstance();
  TransportRouteStop::default_instance_->InitAsDefaultInstance();
  TransportStop::default_instance_->InitAsDefaultInstance();
  TransportStopsTree::default_instance_->InitAsDefaultInstance();
  FlcNavTransportIndex::default_instance_->InitAsDefaultInstance();
  FlcNavPoiIndex::default_instance_->InitAsDefaultInstance();
  FlcNavPoiNameIndex::default_instance_->InitAsDefaultInstance();
  FlcNavPoiNameIndex_FlcNavPoiNameIndexData::default_instance_->InitAsDefaultInstance();
  FlcNavPoiNameIndexDataAtom::default_instance_->InitAsDefaultInstance();
  FlcNavCategoryTable::default_instance_->InitAsDefaultInstance();
  FlcNavPoiBox::default_instance_->InitAsDefaultInstance();
  FlcNavPoiCategories::default_instance_->InitAsDefaultInstance();
  FlcNavPoiBoxData::default_instance_->InitAsDefaultInstance();
  FlcNavPoiBoxDataAtom::default_instance_->InitAsDefaultInstance();
  IdTable::default_instance_->InitAsDefaultInstance();
  RestrictionData::default_instance_->InitAsDefaultInstance();
  RouteData::default_instance_->InitAsDefaultInstance();
  FlcNavRoutingIndex::default_instance_->InitAsDefaultInstance();
  FlcNavRoutingIndex_RouteEncodingRule::default_instance_->InitAsDefaultInstance();
  FlcNavRoutingIndex_RouteDataBox::default_instance_->InitAsDefaultInstance();
  FlcNavRoutingIndex_RouteDataBlock::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_flcnav_5fodb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_flcnav_5fodb_2eproto {
  StaticDescriptorInitializer_flcnav_5fodb_2eproto() {
    protobuf_AddDesc_flcnav_5fodb_2eproto();
  }
} static_descriptor_initializer_flcnav_5fodb_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int FlcNavStructure::kVersionFieldNumber;
const int FlcNavStructure::kDateCreatedFieldNumber;
const int FlcNavStructure::kAddressIndexFieldNumber;
const int FlcNavStructure::kTransportIndexFieldNumber;
const int FlcNavStructure::kPoiIndexFieldNumber;
const int FlcNavStructure::kMapIndexFieldNumber;
const int FlcNavStructure::kRoutingIndexFieldNumber;
const int FlcNavStructure::kVersionConfirmFieldNumber;
#endif  // !_MSC_VER

FlcNavStructure::FlcNavStructure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavStructure::InitAsDefaultInstance() {
}

FlcNavStructure::FlcNavStructure(const FlcNavStructure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavStructure::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  datecreated_ = GOOGLE_LONGLONG(0);
  versionconfirm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavStructure::~FlcNavStructure() {
  SharedDtor();
}

void FlcNavStructure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlcNavStructure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavStructure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavStructure_descriptor_;
}

const FlcNavStructure& FlcNavStructure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavStructure* FlcNavStructure::default_instance_ = NULL;

FlcNavStructure* FlcNavStructure::New() const {
  return new FlcNavStructure;
}

void FlcNavStructure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    datecreated_ = GOOGLE_LONGLONG(0);
    versionconfirm_ = 0u;
  }
  addressindex_.Clear();
  transportindex_.Clear();
  poiindex_.Clear();
  mapindex_.Clear();
  routingindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavStructure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_transportIndex;
        break;
      }
      
      // repeated .FlcNavTransportIndex transportIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transportIndex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transportindex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_transportIndex;
        if (input->ExpectTag(50)) goto parse_mapIndex;
        break;
      }
      
      // repeated .FlcNavMapIndex mapIndex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mapIndex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mapindex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mapIndex;
        if (input->ExpectTag(58)) goto parse_addressIndex;
        break;
      }
      
      // repeated .FlcNavAddressIndex addressIndex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addressIndex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addressindex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_addressIndex;
        if (input->ExpectTag(66)) goto parse_poiIndex;
        break;
      }
      
      // repeated .FlcNavPoiIndex poiIndex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poiIndex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poiindex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_poiIndex;
        if (input->ExpectTag(74)) goto parse_routingIndex;
        break;
      }
      
      // repeated .FlcNavRoutingIndex routingIndex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_routingIndex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_routingindex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_routingIndex;
        if (input->ExpectTag(144)) goto parse_dateCreated;
        break;
      }
      
      // required int64 dateCreated = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateCreated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datecreated_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_versionConfirm;
        break;
      }
      
      // required uint32 versionConfirm = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_versionConfirm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &versionconfirm_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavStructure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 version = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }
  
  // repeated .FlcNavTransportIndex transportIndex = 4;
  for (int i = 0; i < this->transportindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->transportindex(i), output);
  }
  
  // repeated .FlcNavMapIndex mapIndex = 6;
  for (int i = 0; i < this->mapindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mapindex(i), output);
  }
  
  // repeated .FlcNavAddressIndex addressIndex = 7;
  for (int i = 0; i < this->addressindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->addressindex(i), output);
  }
  
  // repeated .FlcNavPoiIndex poiIndex = 8;
  for (int i = 0; i < this->poiindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->poiindex(i), output);
  }
  
  // repeated .FlcNavRoutingIndex routingIndex = 9;
  for (int i = 0; i < this->routingindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->routingindex(i), output);
  }
  
  // required int64 dateCreated = 18;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->datecreated(), output);
  }
  
  // required uint32 versionConfirm = 32;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->versionconfirm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavStructure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 version = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }
  
  // repeated .FlcNavTransportIndex transportIndex = 4;
  for (int i = 0; i < this->transportindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->transportindex(i), target);
  }
  
  // repeated .FlcNavMapIndex mapIndex = 6;
  for (int i = 0; i < this->mapindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mapindex(i), target);
  }
  
  // repeated .FlcNavAddressIndex addressIndex = 7;
  for (int i = 0; i < this->addressindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->addressindex(i), target);
  }
  
  // repeated .FlcNavPoiIndex poiIndex = 8;
  for (int i = 0; i < this->poiindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->poiindex(i), target);
  }
  
  // repeated .FlcNavRoutingIndex routingIndex = 9;
  for (int i = 0; i < this->routingindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->routingindex(i), target);
  }
  
  // required int64 dateCreated = 18;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->datecreated(), target);
  }
  
  // required uint32 versionConfirm = 32;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->versionconfirm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavStructure::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
    // required int64 dateCreated = 18;
    if (has_datecreated()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->datecreated());
    }
    
    // required uint32 versionConfirm = 32;
    if (has_versionconfirm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->versionconfirm());
    }
    
  }
  // repeated .FlcNavAddressIndex addressIndex = 7;
  total_size += 1 * this->addressindex_size();
  for (int i = 0; i < this->addressindex_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addressindex(i));
  }
  
  // repeated .FlcNavTransportIndex transportIndex = 4;
  total_size += 1 * this->transportindex_size();
  for (int i = 0; i < this->transportindex_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transportindex(i));
  }
  
  // repeated .FlcNavPoiIndex poiIndex = 8;
  total_size += 1 * this->poiindex_size();
  for (int i = 0; i < this->poiindex_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poiindex(i));
  }
  
  // repeated .FlcNavMapIndex mapIndex = 6;
  total_size += 1 * this->mapindex_size();
  for (int i = 0; i < this->mapindex_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mapindex(i));
  }
  
  // repeated .FlcNavRoutingIndex routingIndex = 9;
  total_size += 1 * this->routingindex_size();
  for (int i = 0; i < this->routingindex_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->routingindex(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavStructure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavStructure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavStructure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavStructure::MergeFrom(const FlcNavStructure& from) {
  GOOGLE_CHECK_NE(&from, this);
  addressindex_.MergeFrom(from.addressindex_);
  transportindex_.MergeFrom(from.transportindex_);
  poiindex_.MergeFrom(from.poiindex_);
  mapindex_.MergeFrom(from.mapindex_);
  routingindex_.MergeFrom(from.routingindex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_version(from.version());
    }
    if (from._has_bit(1)) {
      set_datecreated(from.datecreated());
    }
    if (from._has_bit(7)) {
      set_versionconfirm(from.versionconfirm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavStructure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavStructure::CopyFrom(const FlcNavStructure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavStructure::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000083) != 0x00000083) return false;
  
  for (int i = 0; i < addressindex_size(); i++) {
    if (!this->addressindex(i).IsInitialized()) return false;
  }
  for (int i = 0; i < transportindex_size(); i++) {
    if (!this->transportindex(i).IsInitialized()) return false;
  }
  for (int i = 0; i < poiindex_size(); i++) {
    if (!this->poiindex(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mapindex_size(); i++) {
    if (!this->mapindex(i).IsInitialized()) return false;
  }
  for (int i = 0; i < routingindex_size(); i++) {
    if (!this->routingindex(i).IsInitialized()) return false;
  }
  return true;
}

void FlcNavStructure::Swap(FlcNavStructure* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(datecreated_, other->datecreated_);
    addressindex_.Swap(&other->addressindex_);
    transportindex_.Swap(&other->transportindex_);
    poiindex_.Swap(&other->poiindex_);
    mapindex_.Swap(&other->mapindex_);
    routingindex_.Swap(&other->routingindex_);
    std::swap(versionconfirm_, other->versionconfirm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavStructure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavStructure_descriptor_;
  metadata.reflection = FlcNavStructure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlcNavTileBox::kLeftFieldNumber;
const int FlcNavTileBox::kRightFieldNumber;
const int FlcNavTileBox::kTopFieldNumber;
const int FlcNavTileBox::kBottomFieldNumber;
#endif  // !_MSC_VER

FlcNavTileBox::FlcNavTileBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavTileBox::InitAsDefaultInstance() {
}

FlcNavTileBox::FlcNavTileBox(const FlcNavTileBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavTileBox::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0u;
  right_ = 0u;
  top_ = 0u;
  bottom_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavTileBox::~FlcNavTileBox() {
  SharedDtor();
}

void FlcNavTileBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlcNavTileBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavTileBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavTileBox_descriptor_;
}

const FlcNavTileBox& FlcNavTileBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavTileBox* FlcNavTileBox::default_instance_ = NULL;

FlcNavTileBox* FlcNavTileBox::New() const {
  return new FlcNavTileBox;
}

void FlcNavTileBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    left_ = 0u;
    right_ = 0u;
    top_ = 0u;
    bottom_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavTileBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 left = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_right;
        break;
      }
      
      // required uint32 right = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &right_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_top;
        break;
      }
      
      // required uint32 top = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bottom;
        break;
      }
      
      // required uint32 bottom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bottom_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavTileBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 left = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->left(), output);
  }
  
  // required uint32 right = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->right(), output);
  }
  
  // required uint32 top = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->top(), output);
  }
  
  // required uint32 bottom = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bottom(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavTileBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 left = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->left(), target);
  }
  
  // required uint32 right = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->right(), target);
  }
  
  // required uint32 top = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->top(), target);
  }
  
  // required uint32 bottom = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bottom(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavTileBox::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left());
    }
    
    // required uint32 right = 2;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->right());
    }
    
    // required uint32 top = 3;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top());
    }
    
    // required uint32 bottom = 4;
    if (has_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bottom());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavTileBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavTileBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavTileBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavTileBox::MergeFrom(const FlcNavTileBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_left(from.left());
    }
    if (from._has_bit(1)) {
      set_right(from.right());
    }
    if (from._has_bit(2)) {
      set_top(from.top());
    }
    if (from._has_bit(3)) {
      set_bottom(from.bottom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavTileBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavTileBox::CopyFrom(const FlcNavTileBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavTileBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void FlcNavTileBox::Swap(FlcNavTileBox* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(top_, other->top_);
    std::swap(bottom_, other->bottom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavTileBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavTileBox_descriptor_;
  metadata.reflection = FlcNavTileBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringTable::kSFieldNumber;
#endif  // !_MSC_VER

StringTable::StringTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringTable::InitAsDefaultInstance() {
}

StringTable::StringTable(const StringTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringTable::~StringTable() {
  SharedDtor();
}

void StringTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StringTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringTable_descriptor_;
}

const StringTable& StringTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

StringTable* StringTable::default_instance_ = NULL;

StringTable* StringTable::New() const {
  return new StringTable;
}

void StringTable::Clear() {
  s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string s = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->s(0).data(), this->s(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_s;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string s = 1;
  for (int i = 0; i < this->s_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->s(i).data(), this->s(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->s(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string s = 1;
  for (int i = 0; i < this->s_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->s(i).data(), this->s(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->s(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringTable::ByteSize() const {
  int total_size = 0;
  
  // repeated string s = 1;
  total_size += 1 * this->s_size();
  for (int i = 0; i < this->s_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->s(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringTable::MergeFrom(const StringTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  s_.MergeFrom(from.s_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringTable::CopyFrom(const StringTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringTable::IsInitialized() const {
  
  return true;
}

void StringTable::Swap(StringTable* other) {
  if (other != this) {
    s_.Swap(&other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringTable_descriptor_;
  metadata.reflection = StringTable_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string IndexedStringTable::_default_prefix_;
#ifndef _MSC_VER
const int IndexedStringTable::kPrefixFieldNumber;
const int IndexedStringTable::kKeyFieldNumber;
const int IndexedStringTable::kValFieldNumber;
const int IndexedStringTable::kSubtablesFieldNumber;
#endif  // !_MSC_VER

IndexedStringTable::IndexedStringTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IndexedStringTable::InitAsDefaultInstance() {
}

IndexedStringTable::IndexedStringTable(const IndexedStringTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IndexedStringTable::SharedCtor() {
  _cached_size_ = 0;
  prefix_ = const_cast< ::std::string*>(&_default_prefix_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexedStringTable::~IndexedStringTable() {
  SharedDtor();
}

void IndexedStringTable::SharedDtor() {
  if (prefix_ != &_default_prefix_) {
    delete prefix_;
  }
  if (this != default_instance_) {
  }
}

void IndexedStringTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexedStringTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexedStringTable_descriptor_;
}

const IndexedStringTable& IndexedStringTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

IndexedStringTable* IndexedStringTable::default_instance_ = NULL;

IndexedStringTable* IndexedStringTable::New() const {
  return new IndexedStringTable;
}

void IndexedStringTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (prefix_ != &_default_prefix_) {
        prefix_->clear();
      }
    }
  }
  key_.Clear();
  val_.Clear();
  subtables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexedStringTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string prefix = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prefix().data(), this->prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }
      
      // repeated string key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key(0).data(), this->key(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        if (input->ExpectTag(37)) goto parse_val;
        break;
      }
      
      // repeated fixed32 val = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 37, input, this->mutable_val())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_val())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_val;
        if (input->ExpectTag(42)) goto parse_subtables;
        break;
      }
      
      // repeated .IndexedStringTable subtables = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subtables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_subtables;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IndexedStringTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string prefix = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->prefix(), output);
  }
  
  // repeated string key = 3;
  for (int i = 0; i < this->key_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->key(i).data(), this->key(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->key(i), output);
  }
  
  // repeated fixed32 val = 4;
  for (int i = 0; i < this->val_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      4, this->val(i), output);
  }
  
  // repeated .IndexedStringTable subtables = 5;
  for (int i = 0; i < this->subtables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->subtables(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IndexedStringTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string prefix = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->prefix(), target);
  }
  
  // repeated string key = 3;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key(i).data(), this->key(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->key(i), target);
  }
  
  // repeated fixed32 val = 4;
  for (int i = 0; i < this->val_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(4, this->val(i), target);
  }
  
  // repeated .IndexedStringTable subtables = 5;
  for (int i = 0; i < this->subtables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->subtables(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IndexedStringTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string prefix = 1;
    if (has_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix());
    }
    
  }
  // repeated string key = 3;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->key(i));
  }
  
  // repeated fixed32 val = 4;
  {
    int data_size = 0;
    data_size = 4 * this->val_size();
    total_size += 1 * this->val_size() + data_size;
  }
  
  // repeated .IndexedStringTable subtables = 5;
  total_size += 1 * this->subtables_size();
  for (int i = 0; i < this->subtables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subtables(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexedStringTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexedStringTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexedStringTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexedStringTable::MergeFrom(const IndexedStringTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  val_.MergeFrom(from.val_);
  subtables_.MergeFrom(from.subtables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_prefix(from.prefix());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexedStringTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexedStringTable::CopyFrom(const IndexedStringTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexedStringTable::IsInitialized() const {
  
  return true;
}

void IndexedStringTable::Swap(IndexedStringTable* other) {
  if (other != this) {
    std::swap(prefix_, other->prefix_);
    key_.Swap(&other->key_);
    val_.Swap(&other->val_);
    subtables_.Swap(&other->subtables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexedStringTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexedStringTable_descriptor_;
  metadata.reflection = IndexedStringTable_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string FlcNavMapIndex_MapEncodingRule::_default_tag_;
const ::std::string FlcNavMapIndex_MapEncodingRule::_default_value_;
#ifndef _MSC_VER
const int FlcNavMapIndex_MapEncodingRule::kTagFieldNumber;
const int FlcNavMapIndex_MapEncodingRule::kValueFieldNumber;
const int FlcNavMapIndex_MapEncodingRule::kIdFieldNumber;
const int FlcNavMapIndex_MapEncodingRule::kMinZoomFieldNumber;
const int FlcNavMapIndex_MapEncodingRule::kTypeFieldNumber;
#endif  // !_MSC_VER

FlcNavMapIndex_MapEncodingRule::FlcNavMapIndex_MapEncodingRule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavMapIndex_MapEncodingRule::InitAsDefaultInstance() {
}

FlcNavMapIndex_MapEncodingRule::FlcNavMapIndex_MapEncodingRule(const FlcNavMapIndex_MapEncodingRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavMapIndex_MapEncodingRule::SharedCtor() {
  _cached_size_ = 0;
  tag_ = const_cast< ::std::string*>(&_default_tag_);
  value_ = const_cast< ::std::string*>(&_default_value_);
  id_ = 0u;
  minzoom_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavMapIndex_MapEncodingRule::~FlcNavMapIndex_MapEncodingRule() {
  SharedDtor();
}

void FlcNavMapIndex_MapEncodingRule::SharedDtor() {
  if (tag_ != &_default_tag_) {
    delete tag_;
  }
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void FlcNavMapIndex_MapEncodingRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavMapIndex_MapEncodingRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavMapIndex_MapEncodingRule_descriptor_;
}

const FlcNavMapIndex_MapEncodingRule& FlcNavMapIndex_MapEncodingRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavMapIndex_MapEncodingRule* FlcNavMapIndex_MapEncodingRule::default_instance_ = NULL;

FlcNavMapIndex_MapEncodingRule* FlcNavMapIndex_MapEncodingRule::New() const {
  return new FlcNavMapIndex_MapEncodingRule;
}

void FlcNavMapIndex_MapEncodingRule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (tag_ != &_default_tag_) {
        tag_->clear();
      }
    }
    if (_has_bit(1)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
    id_ = 0u;
    minzoom_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavMapIndex_MapEncodingRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_value;
        break;
      }
      
      // optional string value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_minZoom;
        break;
      }
      
      // optional uint32 minZoom = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minZoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minzoom_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavMapIndex_MapEncodingRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string tag = 3;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tag(), output);
  }
  
  // optional string value = 5;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->value(), output);
  }
  
  // optional uint32 id = 7;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->id(), output);
  }
  
  // optional uint32 minZoom = 9;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->minzoom(), output);
  }
  
  // optional uint32 type = 10;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavMapIndex_MapEncodingRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string tag = 3;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }
  
  // optional string value = 5;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->value(), target);
  }
  
  // optional uint32 id = 7;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->id(), target);
  }
  
  // optional uint32 minZoom = 9;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->minzoom(), target);
  }
  
  // optional uint32 type = 10;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavMapIndex_MapEncodingRule::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }
    
    // optional string value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
    // optional uint32 id = 7;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 minZoom = 9;
    if (has_minzoom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minzoom());
    }
    
    // optional uint32 type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavMapIndex_MapEncodingRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavMapIndex_MapEncodingRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavMapIndex_MapEncodingRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavMapIndex_MapEncodingRule::MergeFrom(const FlcNavMapIndex_MapEncodingRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tag(from.tag());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
    if (from._has_bit(2)) {
      set_id(from.id());
    }
    if (from._has_bit(3)) {
      set_minzoom(from.minzoom());
    }
    if (from._has_bit(4)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavMapIndex_MapEncodingRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavMapIndex_MapEncodingRule::CopyFrom(const FlcNavMapIndex_MapEncodingRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavMapIndex_MapEncodingRule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FlcNavMapIndex_MapEncodingRule::Swap(FlcNavMapIndex_MapEncodingRule* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(value_, other->value_);
    std::swap(id_, other->id_);
    std::swap(minzoom_, other->minzoom_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavMapIndex_MapEncodingRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavMapIndex_MapEncodingRule_descriptor_;
  metadata.reflection = FlcNavMapIndex_MapEncodingRule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FlcNavMapIndex_MapRootLevel::kMaxZoomFieldNumber;
const int FlcNavMapIndex_MapRootLevel::kMinZoomFieldNumber;
const int FlcNavMapIndex_MapRootLevel::kLeftFieldNumber;
const int FlcNavMapIndex_MapRootLevel::kRightFieldNumber;
const int FlcNavMapIndex_MapRootLevel::kTopFieldNumber;
const int FlcNavMapIndex_MapRootLevel::kBottomFieldNumber;
const int FlcNavMapIndex_MapRootLevel::kBoxesFieldNumber;
const int FlcNavMapIndex_MapRootLevel::kBlocksFieldNumber;
#endif  // !_MSC_VER

FlcNavMapIndex_MapRootLevel::FlcNavMapIndex_MapRootLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavMapIndex_MapRootLevel::InitAsDefaultInstance() {
}

FlcNavMapIndex_MapRootLevel::FlcNavMapIndex_MapRootLevel(const FlcNavMapIndex_MapRootLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavMapIndex_MapRootLevel::SharedCtor() {
  _cached_size_ = 0;
  maxzoom_ = 0;
  minzoom_ = 0;
  left_ = 0;
  right_ = 0;
  top_ = 0;
  bottom_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavMapIndex_MapRootLevel::~FlcNavMapIndex_MapRootLevel() {
  SharedDtor();
}

void FlcNavMapIndex_MapRootLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlcNavMapIndex_MapRootLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavMapIndex_MapRootLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavMapIndex_MapRootLevel_descriptor_;
}

const FlcNavMapIndex_MapRootLevel& FlcNavMapIndex_MapRootLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavMapIndex_MapRootLevel* FlcNavMapIndex_MapRootLevel::default_instance_ = NULL;

FlcNavMapIndex_MapRootLevel* FlcNavMapIndex_MapRootLevel::New() const {
  return new FlcNavMapIndex_MapRootLevel;
}

void FlcNavMapIndex_MapRootLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxzoom_ = 0;
    minzoom_ = 0;
    left_ = 0;
    right_ = 0;
    top_ = 0;
    bottom_ = 0;
  }
  boxes_.Clear();
  blocks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavMapIndex_MapRootLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 maxZoom = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxzoom_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minZoom;
        break;
      }
      
      // required int32 minZoom = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minZoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minzoom_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left;
        break;
      }
      
      // required int32 left = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_right;
        break;
      }
      
      // required int32 right = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_top;
        break;
      }
      
      // required int32 top = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bottom;
        break;
      }
      
      // required int32 bottom = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottom_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_boxes;
        break;
      }
      
      // repeated .FlcNavMapIndex.MapDataBox boxes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boxes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_boxes;
        if (input->ExpectTag(122)) goto parse_blocks;
        break;
      }
      
      // repeated .MapDataBlock blocks = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_blocks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavMapIndex_MapRootLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 maxZoom = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->maxzoom(), output);
  }
  
  // required int32 minZoom = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minzoom(), output);
  }
  
  // required int32 left = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left(), output);
  }
  
  // required int32 right = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->right(), output);
  }
  
  // required int32 top = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->top(), output);
  }
  
  // required int32 bottom = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bottom(), output);
  }
  
  // repeated .FlcNavMapIndex.MapDataBox boxes = 7;
  for (int i = 0; i < this->boxes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->boxes(i), output);
  }
  
  // repeated .MapDataBlock blocks = 15;
  for (int i = 0; i < this->blocks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->blocks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavMapIndex_MapRootLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 maxZoom = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->maxzoom(), target);
  }
  
  // required int32 minZoom = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minzoom(), target);
  }
  
  // required int32 left = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left(), target);
  }
  
  // required int32 right = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->right(), target);
  }
  
  // required int32 top = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->top(), target);
  }
  
  // required int32 bottom = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bottom(), target);
  }
  
  // repeated .FlcNavMapIndex.MapDataBox boxes = 7;
  for (int i = 0; i < this->boxes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->boxes(i), target);
  }
  
  // repeated .MapDataBlock blocks = 15;
  for (int i = 0; i < this->blocks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->blocks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavMapIndex_MapRootLevel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 maxZoom = 1;
    if (has_maxzoom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxzoom());
    }
    
    // required int32 minZoom = 2;
    if (has_minzoom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minzoom());
    }
    
    // required int32 left = 3;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left());
    }
    
    // required int32 right = 4;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right());
    }
    
    // required int32 top = 5;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top());
    }
    
    // required int32 bottom = 6;
    if (has_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bottom());
    }
    
  }
  // repeated .FlcNavMapIndex.MapDataBox boxes = 7;
  total_size += 1 * this->boxes_size();
  for (int i = 0; i < this->boxes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxes(i));
  }
  
  // repeated .MapDataBlock blocks = 15;
  total_size += 1 * this->blocks_size();
  for (int i = 0; i < this->blocks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blocks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavMapIndex_MapRootLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavMapIndex_MapRootLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavMapIndex_MapRootLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavMapIndex_MapRootLevel::MergeFrom(const FlcNavMapIndex_MapRootLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  boxes_.MergeFrom(from.boxes_);
  blocks_.MergeFrom(from.blocks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_maxzoom(from.maxzoom());
    }
    if (from._has_bit(1)) {
      set_minzoom(from.minzoom());
    }
    if (from._has_bit(2)) {
      set_left(from.left());
    }
    if (from._has_bit(3)) {
      set_right(from.right());
    }
    if (from._has_bit(4)) {
      set_top(from.top());
    }
    if (from._has_bit(5)) {
      set_bottom(from.bottom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavMapIndex_MapRootLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavMapIndex_MapRootLevel::CopyFrom(const FlcNavMapIndex_MapRootLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavMapIndex_MapRootLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  for (int i = 0; i < boxes_size(); i++) {
    if (!this->boxes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < blocks_size(); i++) {
    if (!this->blocks(i).IsInitialized()) return false;
  }
  return true;
}

void FlcNavMapIndex_MapRootLevel::Swap(FlcNavMapIndex_MapRootLevel* other) {
  if (other != this) {
    std::swap(maxzoom_, other->maxzoom_);
    std::swap(minzoom_, other->minzoom_);
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(top_, other->top_);
    std::swap(bottom_, other->bottom_);
    boxes_.Swap(&other->boxes_);
    blocks_.Swap(&other->blocks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavMapIndex_MapRootLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavMapIndex_MapRootLevel_descriptor_;
  metadata.reflection = FlcNavMapIndex_MapRootLevel_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FlcNavMapIndex_MapDataBox::kLeftFieldNumber;
const int FlcNavMapIndex_MapDataBox::kRightFieldNumber;
const int FlcNavMapIndex_MapDataBox::kTopFieldNumber;
const int FlcNavMapIndex_MapDataBox::kBottomFieldNumber;
const int FlcNavMapIndex_MapDataBox::kShiftToMapDataFieldNumber;
const int FlcNavMapIndex_MapDataBox::kOceanFieldNumber;
const int FlcNavMapIndex_MapDataBox::kBoxesFieldNumber;
#endif  // !_MSC_VER

FlcNavMapIndex_MapDataBox::FlcNavMapIndex_MapDataBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavMapIndex_MapDataBox::InitAsDefaultInstance() {
}

FlcNavMapIndex_MapDataBox::FlcNavMapIndex_MapDataBox(const FlcNavMapIndex_MapDataBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavMapIndex_MapDataBox::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0;
  right_ = 0;
  top_ = 0;
  bottom_ = 0;
  shifttomapdata_ = 0u;
  ocean_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavMapIndex_MapDataBox::~FlcNavMapIndex_MapDataBox() {
  SharedDtor();
}

void FlcNavMapIndex_MapDataBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlcNavMapIndex_MapDataBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavMapIndex_MapDataBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavMapIndex_MapDataBox_descriptor_;
}

const FlcNavMapIndex_MapDataBox& FlcNavMapIndex_MapDataBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavMapIndex_MapDataBox* FlcNavMapIndex_MapDataBox::default_instance_ = NULL;

FlcNavMapIndex_MapDataBox* FlcNavMapIndex_MapDataBox::New() const {
  return new FlcNavMapIndex_MapDataBox;
}

void FlcNavMapIndex_MapDataBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    left_ = 0;
    right_ = 0;
    top_ = 0;
    bottom_ = 0;
    shifttomapdata_ = 0u;
    ocean_ = false;
  }
  boxes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavMapIndex_MapDataBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 left = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &left_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_right;
        break;
      }
      
      // required sint32 right = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &right_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_top;
        break;
      }
      
      // required sint32 top = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &top_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bottom;
        break;
      }
      
      // required sint32 bottom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bottom_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_shiftToMapData;
        break;
      }
      
      // optional fixed32 shiftToMapData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_shiftToMapData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &shifttomapdata_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ocean;
        break;
      }
      
      // optional bool ocean = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ocean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ocean_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_boxes;
        break;
      }
      
      // repeated .FlcNavMapIndex.MapDataBox boxes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boxes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_boxes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavMapIndex_MapDataBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 left = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->left(), output);
  }
  
  // required sint32 right = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->right(), output);
  }
  
  // required sint32 top = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->top(), output);
  }
  
  // required sint32 bottom = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->bottom(), output);
  }
  
  // optional fixed32 shiftToMapData = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->shifttomapdata(), output);
  }
  
  // optional bool ocean = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ocean(), output);
  }
  
  // repeated .FlcNavMapIndex.MapDataBox boxes = 7;
  for (int i = 0; i < this->boxes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->boxes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavMapIndex_MapDataBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 left = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->left(), target);
  }
  
  // required sint32 right = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->right(), target);
  }
  
  // required sint32 top = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->top(), target);
  }
  
  // required sint32 bottom = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->bottom(), target);
  }
  
  // optional fixed32 shiftToMapData = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->shifttomapdata(), target);
  }
  
  // optional bool ocean = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ocean(), target);
  }
  
  // repeated .FlcNavMapIndex.MapDataBox boxes = 7;
  for (int i = 0; i < this->boxes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->boxes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavMapIndex_MapDataBox::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->left());
    }
    
    // required sint32 right = 2;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->right());
    }
    
    // required sint32 top = 3;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->top());
    }
    
    // required sint32 bottom = 4;
    if (has_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bottom());
    }
    
    // optional fixed32 shiftToMapData = 5;
    if (has_shifttomapdata()) {
      total_size += 1 + 4;
    }
    
    // optional bool ocean = 6;
    if (has_ocean()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .FlcNavMapIndex.MapDataBox boxes = 7;
  total_size += 1 * this->boxes_size();
  for (int i = 0; i < this->boxes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavMapIndex_MapDataBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavMapIndex_MapDataBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavMapIndex_MapDataBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavMapIndex_MapDataBox::MergeFrom(const FlcNavMapIndex_MapDataBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  boxes_.MergeFrom(from.boxes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_left(from.left());
    }
    if (from._has_bit(1)) {
      set_right(from.right());
    }
    if (from._has_bit(2)) {
      set_top(from.top());
    }
    if (from._has_bit(3)) {
      set_bottom(from.bottom());
    }
    if (from._has_bit(4)) {
      set_shifttomapdata(from.shifttomapdata());
    }
    if (from._has_bit(5)) {
      set_ocean(from.ocean());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavMapIndex_MapDataBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavMapIndex_MapDataBox::CopyFrom(const FlcNavMapIndex_MapDataBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavMapIndex_MapDataBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < boxes_size(); i++) {
    if (!this->boxes(i).IsInitialized()) return false;
  }
  return true;
}

void FlcNavMapIndex_MapDataBox::Swap(FlcNavMapIndex_MapDataBox* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(top_, other->top_);
    std::swap(bottom_, other->bottom_);
    std::swap(shifttomapdata_, other->shifttomapdata_);
    std::swap(ocean_, other->ocean_);
    boxes_.Swap(&other->boxes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavMapIndex_MapDataBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavMapIndex_MapDataBox_descriptor_;
  metadata.reflection = FlcNavMapIndex_MapDataBox_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string FlcNavMapIndex::_default_name_;
#ifndef _MSC_VER
const int FlcNavMapIndex::kNameFieldNumber;
const int FlcNavMapIndex::kRulesFieldNumber;
const int FlcNavMapIndex::kLevelsFieldNumber;
#endif  // !_MSC_VER

FlcNavMapIndex::FlcNavMapIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavMapIndex::InitAsDefaultInstance() {
}

FlcNavMapIndex::FlcNavMapIndex(const FlcNavMapIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavMapIndex::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavMapIndex::~FlcNavMapIndex() {
  SharedDtor();
}

void FlcNavMapIndex::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FlcNavMapIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavMapIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavMapIndex_descriptor_;
}

const FlcNavMapIndex& FlcNavMapIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavMapIndex* FlcNavMapIndex::default_instance_ = NULL;

FlcNavMapIndex* FlcNavMapIndex::New() const {
  return new FlcNavMapIndex;
}

void FlcNavMapIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  rules_.Clear();
  levels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavMapIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rules;
        break;
      }
      
      // repeated .FlcNavMapIndex.MapEncodingRule rules = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rules;
        if (input->ExpectTag(42)) goto parse_levels;
        break;
      }
      
      // repeated .FlcNavMapIndex.MapRootLevel levels = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_levels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_levels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_levels;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavMapIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // repeated .FlcNavMapIndex.MapEncodingRule rules = 4;
  for (int i = 0; i < this->rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rules(i), output);
  }
  
  // repeated .FlcNavMapIndex.MapRootLevel levels = 5;
  for (int i = 0; i < this->levels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->levels(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavMapIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // repeated .FlcNavMapIndex.MapEncodingRule rules = 4;
  for (int i = 0; i < this->rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rules(i), target);
  }
  
  // repeated .FlcNavMapIndex.MapRootLevel levels = 5;
  for (int i = 0; i < this->levels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->levels(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavMapIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated .FlcNavMapIndex.MapEncodingRule rules = 4;
  total_size += 1 * this->rules_size();
  for (int i = 0; i < this->rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rules(i));
  }
  
  // repeated .FlcNavMapIndex.MapRootLevel levels = 5;
  total_size += 1 * this->levels_size();
  for (int i = 0; i < this->levels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->levels(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavMapIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavMapIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavMapIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavMapIndex::MergeFrom(const FlcNavMapIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  rules_.MergeFrom(from.rules_);
  levels_.MergeFrom(from.levels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavMapIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavMapIndex::CopyFrom(const FlcNavMapIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavMapIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < rules_size(); i++) {
    if (!this->rules(i).IsInitialized()) return false;
  }
  for (int i = 0; i < levels_size(); i++) {
    if (!this->levels(i).IsInitialized()) return false;
  }
  return true;
}

void FlcNavMapIndex::Swap(FlcNavMapIndex* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    rules_.Swap(&other->rules_);
    levels_.Swap(&other->levels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavMapIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavMapIndex_descriptor_;
  metadata.reflection = FlcNavMapIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapDataBlock::kBaseIdFieldNumber;
const int MapDataBlock::kDataObjectsFieldNumber;
const int MapDataBlock::kStringTableFieldNumber;
#endif  // !_MSC_VER

MapDataBlock::MapDataBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapDataBlock::InitAsDefaultInstance() {
  stringtable_ = const_cast< ::StringTable*>(&::StringTable::default_instance());
}

MapDataBlock::MapDataBlock(const MapDataBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapDataBlock::SharedCtor() {
  _cached_size_ = 0;
  baseid_ = GOOGLE_ULONGLONG(0);
  stringtable_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapDataBlock::~MapDataBlock() {
  SharedDtor();
}

void MapDataBlock::SharedDtor() {
  if (this != default_instance_) {
    delete stringtable_;
  }
}

void MapDataBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapDataBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapDataBlock_descriptor_;
}

const MapDataBlock& MapDataBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

MapDataBlock* MapDataBlock::default_instance_ = NULL;

MapDataBlock* MapDataBlock::New() const {
  return new MapDataBlock;
}

void MapDataBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    baseid_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(2)) {
      if (stringtable_ != NULL) stringtable_->::StringTable::Clear();
    }
  }
  dataobjects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapDataBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 baseId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &baseid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_dataObjects;
        break;
      }
      
      // repeated .MapData dataObjects = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataObjects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dataobjects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_dataObjects;
        if (input->ExpectTag(122)) goto parse_stringTable;
        break;
      }
      
      // optional .StringTable stringTable = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stringtable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapDataBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 baseId = 10;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->baseid(), output);
  }
  
  // repeated .MapData dataObjects = 12;
  for (int i = 0; i < this->dataobjects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->dataobjects(i), output);
  }
  
  // optional .StringTable stringTable = 15;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->stringtable(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapDataBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 baseId = 10;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->baseid(), target);
  }
  
  // repeated .MapData dataObjects = 12;
  for (int i = 0; i < this->dataobjects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->dataobjects(i), target);
  }
  
  // optional .StringTable stringTable = 15;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->stringtable(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapDataBlock::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 baseId = 10;
    if (has_baseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->baseid());
    }
    
    // optional .StringTable stringTable = 15;
    if (has_stringtable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stringtable());
    }
    
  }
  // repeated .MapData dataObjects = 12;
  total_size += 1 * this->dataobjects_size();
  for (int i = 0; i < this->dataobjects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dataobjects(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapDataBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapDataBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapDataBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapDataBlock::MergeFrom(const MapDataBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  dataobjects_.MergeFrom(from.dataobjects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_baseid(from.baseid());
    }
    if (from._has_bit(2)) {
      mutable_stringtable()->::StringTable::MergeFrom(from.stringtable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapDataBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapDataBlock::CopyFrom(const MapDataBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapDataBlock::IsInitialized() const {
  
  for (int i = 0; i < dataobjects_size(); i++) {
    if (!this->dataobjects(i).IsInitialized()) return false;
  }
  return true;
}

void MapDataBlock::Swap(MapDataBlock* other) {
  if (other != this) {
    std::swap(baseid_, other->baseid_);
    dataobjects_.Swap(&other->dataobjects_);
    std::swap(stringtable_, other->stringtable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapDataBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapDataBlock_descriptor_;
  metadata.reflection = MapDataBlock_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MapData::_default_coordinates_;
const ::std::string MapData::_default_areacoordinates_;
const ::std::string MapData::_default_additionaltypes_;
const ::std::string MapData::_default_types_;
const ::std::string MapData::_default_stringnames_;
const ::std::string MapData::_default_rasterbytes_;
#ifndef _MSC_VER
const int MapData::kCoordinatesFieldNumber;
const int MapData::kAreaCoordinatesFieldNumber;
const int MapData::kPolygonInnerCoordinatesFieldNumber;
const int MapData::kAdditionalTypesFieldNumber;
const int MapData::kTypesFieldNumber;
const int MapData::kStringNamesFieldNumber;
const int MapData::kIdFieldNumber;
const int MapData::kRasterBytesFieldNumber;
#endif  // !_MSC_VER

MapData::MapData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapData::InitAsDefaultInstance() {
}

MapData::MapData(const MapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapData::SharedCtor() {
  _cached_size_ = 0;
  coordinates_ = const_cast< ::std::string*>(&_default_coordinates_);
  areacoordinates_ = const_cast< ::std::string*>(&_default_areacoordinates_);
  additionaltypes_ = const_cast< ::std::string*>(&_default_additionaltypes_);
  types_ = const_cast< ::std::string*>(&_default_types_);
  stringnames_ = const_cast< ::std::string*>(&_default_stringnames_);
  id_ = GOOGLE_LONGLONG(0);
  rasterbytes_ = const_cast< ::std::string*>(&_default_rasterbytes_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapData::~MapData() {
  SharedDtor();
}

void MapData::SharedDtor() {
  if (coordinates_ != &_default_coordinates_) {
    delete coordinates_;
  }
  if (areacoordinates_ != &_default_areacoordinates_) {
    delete areacoordinates_;
  }
  if (additionaltypes_ != &_default_additionaltypes_) {
    delete additionaltypes_;
  }
  if (types_ != &_default_types_) {
    delete types_;
  }
  if (stringnames_ != &_default_stringnames_) {
    delete stringnames_;
  }
  if (rasterbytes_ != &_default_rasterbytes_) {
    delete rasterbytes_;
  }
  if (this != default_instance_) {
  }
}

void MapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapData_descriptor_;
}

const MapData& MapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

MapData* MapData::default_instance_ = NULL;

MapData* MapData::New() const {
  return new MapData;
}

void MapData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (coordinates_ != &_default_coordinates_) {
        coordinates_->clear();
      }
    }
    if (_has_bit(1)) {
      if (areacoordinates_ != &_default_areacoordinates_) {
        areacoordinates_->clear();
      }
    }
    if (_has_bit(3)) {
      if (additionaltypes_ != &_default_additionaltypes_) {
        additionaltypes_->clear();
      }
    }
    if (_has_bit(4)) {
      if (types_ != &_default_types_) {
        types_->clear();
      }
    }
    if (_has_bit(5)) {
      if (stringnames_ != &_default_stringnames_) {
        stringnames_->clear();
      }
    }
    id_ = GOOGLE_LONGLONG(0);
    if (_has_bit(7)) {
      if (rasterbytes_ != &_default_rasterbytes_) {
        rasterbytes_->clear();
      }
    }
  }
  polygoninnercoordinates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes coordinates = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_coordinates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_areaCoordinates;
        break;
      }
      
      // optional bytes areaCoordinates = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_areaCoordinates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_areacoordinates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_polygonInnerCoordinates;
        break;
      }
      
      // repeated bytes polygonInnerCoordinates = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_polygonInnerCoordinates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_polygoninnercoordinates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_polygonInnerCoordinates;
        if (input->ExpectTag(50)) goto parse_additionalTypes;
        break;
      }
      
      // optional bytes additionalTypes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_additionalTypes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_additionaltypes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_types;
        break;
      }
      
      // required bytes types = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_types()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_stringNames;
        break;
      }
      
      // optional bytes stringNames = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringNames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stringnames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_id;
        break;
      }
      
      // required sint64 id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &id_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_rasterBytes;
        break;
      }
      
      // optional bytes rasterBytes = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rasterBytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rasterbytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes coordinates = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->coordinates(), output);
  }
  
  // optional bytes areaCoordinates = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->areacoordinates(), output);
  }
  
  // repeated bytes polygonInnerCoordinates = 4;
  for (int i = 0; i < this->polygoninnercoordinates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->polygoninnercoordinates(i), output);
  }
  
  // optional bytes additionalTypes = 6;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->additionaltypes(), output);
  }
  
  // required bytes types = 7;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->types(), output);
  }
  
  // optional bytes stringNames = 10;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->stringnames(), output);
  }
  
  // required sint64 id = 12;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(12, this->id(), output);
  }
  
  // optional bytes rasterBytes = 15;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      15, this->rasterbytes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes coordinates = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->coordinates(), target);
  }
  
  // optional bytes areaCoordinates = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->areacoordinates(), target);
  }
  
  // repeated bytes polygonInnerCoordinates = 4;
  for (int i = 0; i < this->polygoninnercoordinates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->polygoninnercoordinates(i), target);
  }
  
  // optional bytes additionalTypes = 6;
  if (_has_bit(3)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->additionaltypes(), target);
  }
  
  // required bytes types = 7;
  if (_has_bit(4)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->types(), target);
  }
  
  // optional bytes stringNames = 10;
  if (_has_bit(5)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->stringnames(), target);
  }
  
  // required sint64 id = 12;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(12, this->id(), target);
  }
  
  // optional bytes rasterBytes = 15;
  if (_has_bit(7)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->rasterbytes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes coordinates = 1;
    if (has_coordinates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->coordinates());
    }
    
    // optional bytes areaCoordinates = 2;
    if (has_areacoordinates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->areacoordinates());
    }
    
    // optional bytes additionalTypes = 6;
    if (has_additionaltypes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->additionaltypes());
    }
    
    // required bytes types = 7;
    if (has_types()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->types());
    }
    
    // optional bytes stringNames = 10;
    if (has_stringnames()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stringnames());
    }
    
    // required sint64 id = 12;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->id());
    }
    
    // optional bytes rasterBytes = 15;
    if (has_rasterbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rasterbytes());
    }
    
  }
  // repeated bytes polygonInnerCoordinates = 4;
  total_size += 1 * this->polygoninnercoordinates_size();
  for (int i = 0; i < this->polygoninnercoordinates_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->polygoninnercoordinates(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapData::MergeFrom(const MapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  polygoninnercoordinates_.MergeFrom(from.polygoninnercoordinates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_coordinates(from.coordinates());
    }
    if (from._has_bit(1)) {
      set_areacoordinates(from.areacoordinates());
    }
    if (from._has_bit(3)) {
      set_additionaltypes(from.additionaltypes());
    }
    if (from._has_bit(4)) {
      set_types(from.types());
    }
    if (from._has_bit(5)) {
      set_stringnames(from.stringnames());
    }
    if (from._has_bit(6)) {
      set_id(from.id());
    }
    if (from._has_bit(7)) {
      set_rasterbytes(from.rasterbytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapData::CopyFrom(const MapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000050) != 0x00000050) return false;
  
  return true;
}

void MapData::Swap(MapData* other) {
  if (other != this) {
    std::swap(coordinates_, other->coordinates_);
    std::swap(areacoordinates_, other->areacoordinates_);
    polygoninnercoordinates_.Swap(&other->polygoninnercoordinates_);
    std::swap(additionaltypes_, other->additionaltypes_);
    std::swap(types_, other->types_);
    std::swap(stringnames_, other->stringnames_);
    std::swap(id_, other->id_);
    std::swap(rasterbytes_, other->rasterbytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapData_descriptor_;
  metadata.reflection = MapData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlcNavAddressIndex_CitiesIndex::kTypeFieldNumber;
const int FlcNavAddressIndex_CitiesIndex::kCitiesFieldNumber;
const int FlcNavAddressIndex_CitiesIndex::kBlocksFieldNumber;
#endif  // !_MSC_VER

FlcNavAddressIndex_CitiesIndex::FlcNavAddressIndex_CitiesIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavAddressIndex_CitiesIndex::InitAsDefaultInstance() {
}

FlcNavAddressIndex_CitiesIndex::FlcNavAddressIndex_CitiesIndex(const FlcNavAddressIndex_CitiesIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavAddressIndex_CitiesIndex::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavAddressIndex_CitiesIndex::~FlcNavAddressIndex_CitiesIndex() {
  SharedDtor();
}

void FlcNavAddressIndex_CitiesIndex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlcNavAddressIndex_CitiesIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavAddressIndex_CitiesIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavAddressIndex_CitiesIndex_descriptor_;
}

const FlcNavAddressIndex_CitiesIndex& FlcNavAddressIndex_CitiesIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavAddressIndex_CitiesIndex* FlcNavAddressIndex_CitiesIndex::default_instance_ = NULL;

FlcNavAddressIndex_CitiesIndex* FlcNavAddressIndex_CitiesIndex::New() const {
  return new FlcNavAddressIndex_CitiesIndex;
}

void FlcNavAddressIndex_CitiesIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  cities_.Clear();
  blocks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavAddressIndex_CitiesIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cities;
        break;
      }
      
      // repeated .CityIndex cities = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cities;
        if (input->ExpectTag(58)) goto parse_blocks;
        break;
      }
      
      // repeated .CityBlockIndex blocks = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_blocks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavAddressIndex_CitiesIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // repeated .CityIndex cities = 5;
  for (int i = 0; i < this->cities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cities(i), output);
  }
  
  // repeated .CityBlockIndex blocks = 7;
  for (int i = 0; i < this->blocks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->blocks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavAddressIndex_CitiesIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // repeated .CityIndex cities = 5;
  for (int i = 0; i < this->cities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cities(i), target);
  }
  
  // repeated .CityBlockIndex blocks = 7;
  for (int i = 0; i < this->blocks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->blocks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavAddressIndex_CitiesIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  // repeated .CityIndex cities = 5;
  total_size += 1 * this->cities_size();
  for (int i = 0; i < this->cities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cities(i));
  }
  
  // repeated .CityBlockIndex blocks = 7;
  total_size += 1 * this->blocks_size();
  for (int i = 0; i < this->blocks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blocks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavAddressIndex_CitiesIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavAddressIndex_CitiesIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavAddressIndex_CitiesIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavAddressIndex_CitiesIndex::MergeFrom(const FlcNavAddressIndex_CitiesIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  cities_.MergeFrom(from.cities_);
  blocks_.MergeFrom(from.blocks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavAddressIndex_CitiesIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavAddressIndex_CitiesIndex::CopyFrom(const FlcNavAddressIndex_CitiesIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavAddressIndex_CitiesIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < cities_size(); i++) {
    if (!this->cities(i).IsInitialized()) return false;
  }
  for (int i = 0; i < blocks_size(); i++) {
    if (!this->blocks(i).IsInitialized()) return false;
  }
  return true;
}

void FlcNavAddressIndex_CitiesIndex::Swap(FlcNavAddressIndex_CitiesIndex* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    cities_.Swap(&other->cities_);
    blocks_.Swap(&other->blocks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavAddressIndex_CitiesIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavAddressIndex_CitiesIndex_descriptor_;
  metadata.reflection = FlcNavAddressIndex_CitiesIndex_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string FlcNavAddressIndex::_default_name_;
const ::std::string FlcNavAddressIndex::_default_name_en_;
#ifndef _MSC_VER
const int FlcNavAddressIndex::kNameFieldNumber;
const int FlcNavAddressIndex::kNameEnFieldNumber;
const int FlcNavAddressIndex::kBoundariesFieldNumber;
const int FlcNavAddressIndex::kCitiesFieldNumber;
const int FlcNavAddressIndex::kNameIndexFieldNumber;
#endif  // !_MSC_VER

FlcNavAddressIndex::FlcNavAddressIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavAddressIndex::InitAsDefaultInstance() {
  boundaries_ = const_cast< ::FlcNavTileBox*>(&::FlcNavTileBox::default_instance());
  nameindex_ = const_cast< ::FlcNavAddressNameIndexData*>(&::FlcNavAddressNameIndexData::default_instance());
}

FlcNavAddressIndex::FlcNavAddressIndex(const FlcNavAddressIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavAddressIndex::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  name_en_ = const_cast< ::std::string*>(&_default_name_en_);
  boundaries_ = NULL;
  nameindex_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavAddressIndex::~FlcNavAddressIndex() {
  SharedDtor();
}

void FlcNavAddressIndex::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (name_en_ != &_default_name_en_) {
    delete name_en_;
  }
  if (this != default_instance_) {
    delete boundaries_;
    delete nameindex_;
  }
}

void FlcNavAddressIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavAddressIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavAddressIndex_descriptor_;
}

const FlcNavAddressIndex& FlcNavAddressIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavAddressIndex* FlcNavAddressIndex::default_instance_ = NULL;

FlcNavAddressIndex* FlcNavAddressIndex::New() const {
  return new FlcNavAddressIndex;
}

void FlcNavAddressIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (name_en_ != &_default_name_en_) {
        name_en_->clear();
      }
    }
    if (_has_bit(2)) {
      if (boundaries_ != NULL) boundaries_->::FlcNavTileBox::Clear();
    }
    if (_has_bit(4)) {
      if (nameindex_ != NULL) nameindex_->::FlcNavAddressNameIndexData::Clear();
    }
  }
  cities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavAddressIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name_en;
        break;
      }
      
      // optional string name_en = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_en:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_en()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name_en().data(), this->name_en().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_boundaries;
        break;
      }
      
      // optional .FlcNavTileBox boundaries = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boundaries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boundaries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cities;
        break;
      }
      
      // repeated .FlcNavAddressIndex.CitiesIndex cities = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cities;
        if (input->ExpectTag(58)) goto parse_nameIndex;
        break;
      }
      
      // optional .FlcNavAddressNameIndexData nameIndex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nameIndex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nameindex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavAddressIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string name_en = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en().data(), this->name_en().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name_en(), output);
  }
  
  // optional .FlcNavTileBox boundaries = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->boundaries(), output);
  }
  
  // repeated .FlcNavAddressIndex.CitiesIndex cities = 6;
  for (int i = 0; i < this->cities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cities(i), output);
  }
  
  // optional .FlcNavAddressNameIndexData nameIndex = 7;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->nameindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavAddressIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string name_en = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en().data(), this->name_en().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name_en(), target);
  }
  
  // optional .FlcNavTileBox boundaries = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->boundaries(), target);
  }
  
  // repeated .FlcNavAddressIndex.CitiesIndex cities = 6;
  for (int i = 0; i < this->cities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cities(i), target);
  }
  
  // optional .FlcNavAddressNameIndexData nameIndex = 7;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->nameindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavAddressIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string name_en = 2;
    if (has_name_en()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_en());
    }
    
    // optional .FlcNavTileBox boundaries = 3;
    if (has_boundaries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boundaries());
    }
    
    // optional .FlcNavAddressNameIndexData nameIndex = 7;
    if (has_nameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nameindex());
    }
    
  }
  // repeated .FlcNavAddressIndex.CitiesIndex cities = 6;
  total_size += 1 * this->cities_size();
  for (int i = 0; i < this->cities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cities(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavAddressIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavAddressIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavAddressIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavAddressIndex::MergeFrom(const FlcNavAddressIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  cities_.MergeFrom(from.cities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_name_en(from.name_en());
    }
    if (from._has_bit(2)) {
      mutable_boundaries()->::FlcNavTileBox::MergeFrom(from.boundaries());
    }
    if (from._has_bit(4)) {
      mutable_nameindex()->::FlcNavAddressNameIndexData::MergeFrom(from.nameindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavAddressIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavAddressIndex::CopyFrom(const FlcNavAddressIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavAddressIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_boundaries()) {
    if (!this->boundaries().IsInitialized()) return false;
  }
  for (int i = 0; i < cities_size(); i++) {
    if (!this->cities(i).IsInitialized()) return false;
  }
  if (has_nameindex()) {
    if (!this->nameindex().IsInitialized()) return false;
  }
  return true;
}

void FlcNavAddressIndex::Swap(FlcNavAddressIndex* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(name_en_, other->name_en_);
    std::swap(boundaries_, other->boundaries_);
    cities_.Swap(&other->cities_);
    std::swap(nameindex_, other->nameindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavAddressIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavAddressIndex_descriptor_;
  metadata.reflection = FlcNavAddressIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlcNavAddressNameIndexData_AddressNameIndexData::kAtomFieldNumber;
#endif  // !_MSC_VER

FlcNavAddressNameIndexData_AddressNameIndexData::FlcNavAddressNameIndexData_AddressNameIndexData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavAddressNameIndexData_AddressNameIndexData::InitAsDefaultInstance() {
}

FlcNavAddressNameIndexData_AddressNameIndexData::FlcNavAddressNameIndexData_AddressNameIndexData(const FlcNavAddressNameIndexData_AddressNameIndexData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavAddressNameIndexData_AddressNameIndexData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavAddressNameIndexData_AddressNameIndexData::~FlcNavAddressNameIndexData_AddressNameIndexData() {
  SharedDtor();
}

void FlcNavAddressNameIndexData_AddressNameIndexData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlcNavAddressNameIndexData_AddressNameIndexData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavAddressNameIndexData_AddressNameIndexData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavAddressNameIndexData_AddressNameIndexData_descriptor_;
}

const FlcNavAddressNameIndexData_AddressNameIndexData& FlcNavAddressNameIndexData_AddressNameIndexData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavAddressNameIndexData_AddressNameIndexData* FlcNavAddressNameIndexData_AddressNameIndexData::default_instance_ = NULL;

FlcNavAddressNameIndexData_AddressNameIndexData* FlcNavAddressNameIndexData_AddressNameIndexData::New() const {
  return new FlcNavAddressNameIndexData_AddressNameIndexData;
}

void FlcNavAddressNameIndexData_AddressNameIndexData::Clear() {
  atom_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavAddressNameIndexData_AddressNameIndexData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AddressNameIndexDataAtom atom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_atom;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavAddressNameIndexData_AddressNameIndexData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .AddressNameIndexDataAtom atom = 4;
  for (int i = 0; i < this->atom_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->atom(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavAddressNameIndexData_AddressNameIndexData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .AddressNameIndexDataAtom atom = 4;
  for (int i = 0; i < this->atom_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->atom(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavAddressNameIndexData_AddressNameIndexData::ByteSize() const {
  int total_size = 0;
  
  // repeated .AddressNameIndexDataAtom atom = 4;
  total_size += 1 * this->atom_size();
  for (int i = 0; i < this->atom_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atom(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavAddressNameIndexData_AddressNameIndexData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavAddressNameIndexData_AddressNameIndexData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavAddressNameIndexData_AddressNameIndexData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavAddressNameIndexData_AddressNameIndexData::MergeFrom(const FlcNavAddressNameIndexData_AddressNameIndexData& from) {
  GOOGLE_CHECK_NE(&from, this);
  atom_.MergeFrom(from.atom_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavAddressNameIndexData_AddressNameIndexData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavAddressNameIndexData_AddressNameIndexData::CopyFrom(const FlcNavAddressNameIndexData_AddressNameIndexData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavAddressNameIndexData_AddressNameIndexData::IsInitialized() const {
  
  for (int i = 0; i < atom_size(); i++) {
    if (!this->atom(i).IsInitialized()) return false;
  }
  return true;
}

void FlcNavAddressNameIndexData_AddressNameIndexData::Swap(FlcNavAddressNameIndexData_AddressNameIndexData* other) {
  if (other != this) {
    atom_.Swap(&other->atom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavAddressNameIndexData_AddressNameIndexData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavAddressNameIndexData_AddressNameIndexData_descriptor_;
  metadata.reflection = FlcNavAddressNameIndexData_AddressNameIndexData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FlcNavAddressNameIndexData::kTableFieldNumber;
const int FlcNavAddressNameIndexData::kAtomFieldNumber;
#endif  // !_MSC_VER

FlcNavAddressNameIndexData::FlcNavAddressNameIndexData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavAddressNameIndexData::InitAsDefaultInstance() {
  table_ = const_cast< ::IndexedStringTable*>(&::IndexedStringTable::default_instance());
}

FlcNavAddressNameIndexData::FlcNavAddressNameIndexData(const FlcNavAddressNameIndexData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavAddressNameIndexData::SharedCtor() {
  _cached_size_ = 0;
  table_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavAddressNameIndexData::~FlcNavAddressNameIndexData() {
  SharedDtor();
}

void FlcNavAddressNameIndexData::SharedDtor() {
  if (this != default_instance_) {
    delete table_;
  }
}

void FlcNavAddressNameIndexData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavAddressNameIndexData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavAddressNameIndexData_descriptor_;
}

const FlcNavAddressNameIndexData& FlcNavAddressNameIndexData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavAddressNameIndexData* FlcNavAddressNameIndexData::default_instance_ = NULL;

FlcNavAddressNameIndexData* FlcNavAddressNameIndexData::New() const {
  return new FlcNavAddressNameIndexData;
}

void FlcNavAddressNameIndexData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (table_ != NULL) table_->::IndexedStringTable::Clear();
    }
  }
  atom_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavAddressNameIndexData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IndexedStringTable table = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_atom;
        break;
      }
      
      // repeated .FlcNavAddressNameIndexData.AddressNameIndexData atom = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_atom;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavAddressNameIndexData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .IndexedStringTable table = 4;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->table(), output);
  }
  
  // repeated .FlcNavAddressNameIndexData.AddressNameIndexData atom = 7;
  for (int i = 0; i < this->atom_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->atom(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavAddressNameIndexData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .IndexedStringTable table = 4;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->table(), target);
  }
  
  // repeated .FlcNavAddressNameIndexData.AddressNameIndexData atom = 7;
  for (int i = 0; i < this->atom_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->atom(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavAddressNameIndexData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IndexedStringTable table = 4;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table());
    }
    
  }
  // repeated .FlcNavAddressNameIndexData.AddressNameIndexData atom = 7;
  total_size += 1 * this->atom_size();
  for (int i = 0; i < this->atom_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atom(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavAddressNameIndexData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavAddressNameIndexData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavAddressNameIndexData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavAddressNameIndexData::MergeFrom(const FlcNavAddressNameIndexData& from) {
  GOOGLE_CHECK_NE(&from, this);
  atom_.MergeFrom(from.atom_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_table()->::IndexedStringTable::MergeFrom(from.table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavAddressNameIndexData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavAddressNameIndexData::CopyFrom(const FlcNavAddressNameIndexData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavAddressNameIndexData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < atom_size(); i++) {
    if (!this->atom(i).IsInitialized()) return false;
  }
  return true;
}

void FlcNavAddressNameIndexData::Swap(FlcNavAddressNameIndexData* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    atom_.Swap(&other->atom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavAddressNameIndexData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavAddressNameIndexData_descriptor_;
  metadata.reflection = FlcNavAddressNameIndexData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string AddressNameIndexDataAtom::_default_name_;
const ::std::string AddressNameIndexDataAtom::_default_nameen_;
#ifndef _MSC_VER
const int AddressNameIndexDataAtom::kNameFieldNumber;
const int AddressNameIndexDataAtom::kNameEnFieldNumber;
const int AddressNameIndexDataAtom::kTypeFieldNumber;
const int AddressNameIndexDataAtom::kShiftToIndexFieldNumber;
const int AddressNameIndexDataAtom::kShiftToCityIndexFieldNumber;
#endif  // !_MSC_VER

AddressNameIndexDataAtom::AddressNameIndexDataAtom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddressNameIndexDataAtom::InitAsDefaultInstance() {
}

AddressNameIndexDataAtom::AddressNameIndexDataAtom(const AddressNameIndexDataAtom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddressNameIndexDataAtom::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  nameen_ = const_cast< ::std::string*>(&_default_nameen_);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddressNameIndexDataAtom::~AddressNameIndexDataAtom() {
  SharedDtor();
}

void AddressNameIndexDataAtom::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (nameen_ != &_default_nameen_) {
    delete nameen_;
  }
  if (this != default_instance_) {
  }
}

void AddressNameIndexDataAtom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddressNameIndexDataAtom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddressNameIndexDataAtom_descriptor_;
}

const AddressNameIndexDataAtom& AddressNameIndexDataAtom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

AddressNameIndexDataAtom* AddressNameIndexDataAtom::default_instance_ = NULL;

AddressNameIndexDataAtom* AddressNameIndexDataAtom::New() const {
  return new AddressNameIndexDataAtom;
}

void AddressNameIndexDataAtom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (nameen_ != &_default_nameen_) {
        nameen_->clear();
      }
    }
    type_ = 0u;
  }
  shifttoindex_.Clear();
  shifttocityindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddressNameIndexDataAtom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nameEn;
        break;
      }
      
      // optional string nameEn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nameEn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nameen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nameen().data(), this->nameen().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_shiftToIndex;
        break;
      }
      
      // repeated int32 shiftToIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shiftToIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_shifttoindex())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shifttoindex())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_shiftToIndex;
        if (input->ExpectTag(48)) goto parse_shiftToCityIndex;
        break;
      }
      
      // repeated int32 shiftToCityIndex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shiftToCityIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_shifttocityindex())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shifttocityindex())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_shiftToCityIndex;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddressNameIndexDataAtom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string nameEn = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nameen().data(), this->nameen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nameen(), output);
  }
  
  // required uint32 type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }
  
  // repeated int32 shiftToIndex = 5;
  for (int i = 0; i < this->shifttoindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->shifttoindex(i), output);
  }
  
  // repeated int32 shiftToCityIndex = 6;
  for (int i = 0; i < this->shifttocityindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->shifttocityindex(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddressNameIndexDataAtom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string nameEn = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nameen().data(), this->nameen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nameen(), target);
  }
  
  // required uint32 type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // repeated int32 shiftToIndex = 5;
  for (int i = 0; i < this->shifttoindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->shifttoindex(i), target);
  }
  
  // repeated int32 shiftToCityIndex = 6;
  for (int i = 0; i < this->shifttocityindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->shifttocityindex(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddressNameIndexDataAtom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string nameEn = 2;
    if (has_nameen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nameen());
    }
    
    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  // repeated int32 shiftToIndex = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->shifttoindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shifttoindex(i));
    }
    total_size += 1 * this->shifttoindex_size() + data_size;
  }
  
  // repeated int32 shiftToCityIndex = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->shifttocityindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shifttocityindex(i));
    }
    total_size += 1 * this->shifttocityindex_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddressNameIndexDataAtom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddressNameIndexDataAtom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddressNameIndexDataAtom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddressNameIndexDataAtom::MergeFrom(const AddressNameIndexDataAtom& from) {
  GOOGLE_CHECK_NE(&from, this);
  shifttoindex_.MergeFrom(from.shifttoindex_);
  shifttocityindex_.MergeFrom(from.shifttocityindex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_nameen(from.nameen());
    }
    if (from._has_bit(2)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddressNameIndexDataAtom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressNameIndexDataAtom::CopyFrom(const AddressNameIndexDataAtom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressNameIndexDataAtom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  return true;
}

void AddressNameIndexDataAtom::Swap(AddressNameIndexDataAtom* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(nameen_, other->nameen_);
    std::swap(type_, other->type_);
    shifttoindex_.Swap(&other->shifttoindex_);
    shifttocityindex_.Swap(&other->shifttocityindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddressNameIndexDataAtom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddressNameIndexDataAtom_descriptor_;
  metadata.reflection = AddressNameIndexDataAtom_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CityIndex::_default_name_;
const ::std::string CityIndex::_default_name_en_;
#ifndef _MSC_VER
const int CityIndex::kCityTypeFieldNumber;
const int CityIndex::kNameFieldNumber;
const int CityIndex::kNameEnFieldNumber;
const int CityIndex::kIdFieldNumber;
const int CityIndex::kXFieldNumber;
const int CityIndex::kYFieldNumber;
const int CityIndex::kShiftToCityBlockIndexFieldNumber;
#endif  // !_MSC_VER

CityIndex::CityIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CityIndex::InitAsDefaultInstance() {
}

CityIndex::CityIndex(const CityIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CityIndex::SharedCtor() {
  _cached_size_ = 0;
  city_type_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  name_en_ = const_cast< ::std::string*>(&_default_name_en_);
  id_ = GOOGLE_ULONGLONG(0);
  x_ = 0u;
  y_ = 0u;
  shifttocityblockindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CityIndex::~CityIndex() {
  SharedDtor();
}

void CityIndex::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (name_en_ != &_default_name_en_) {
    delete name_en_;
  }
  if (this != default_instance_) {
  }
}

void CityIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CityIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CityIndex_descriptor_;
}

const CityIndex& CityIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

CityIndex* CityIndex::default_instance_ = NULL;

CityIndex* CityIndex::New() const {
  return new CityIndex;
}

void CityIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_type_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (name_en_ != &_default_name_en_) {
        name_en_->clear();
      }
    }
    id_ = GOOGLE_ULONGLONG(0);
    x_ = 0u;
    y_ = 0u;
    shifttocityblockindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CityIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 city_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_type_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name_en;
        break;
      }
      
      // optional string name_en = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_en:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_en()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name_en().data(), this->name_en().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }
      
      // optional uint64 id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_x;
        break;
      }
      
      // required uint32 x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_y;
        break;
      }
      
      // required uint32 y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_shiftToCityBlockIndex;
        break;
      }
      
      // optional fixed32 shiftToCityBlockIndex = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_shiftToCityBlockIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &shifttocityblockindex_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CityIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 city_type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->city_type(), output);
  }
  
  // required string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string name_en = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en().data(), this->name_en().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name_en(), output);
  }
  
  // optional uint64 id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }
  
  // required uint32 x = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->x(), output);
  }
  
  // required uint32 y = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->y(), output);
  }
  
  // optional fixed32 shiftToCityBlockIndex = 10;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->shifttocityblockindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CityIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 city_type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->city_type(), target);
  }
  
  // required string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string name_en = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en().data(), this->name_en().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name_en(), target);
  }
  
  // optional uint64 id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }
  
  // required uint32 x = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->x(), target);
  }
  
  // required uint32 y = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->y(), target);
  }
  
  // optional fixed32 shiftToCityBlockIndex = 10;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->shifttocityblockindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CityIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 city_type = 1;
    if (has_city_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_type());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string name_en = 3;
    if (has_name_en()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_en());
    }
    
    // optional uint64 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // required uint32 x = 5;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }
    
    // required uint32 y = 6;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }
    
    // optional fixed32 shiftToCityBlockIndex = 10;
    if (has_shifttocityblockindex()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CityIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CityIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CityIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CityIndex::MergeFrom(const CityIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_city_type(from.city_type());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_name_en(from.name_en());
    }
    if (from._has_bit(3)) {
      set_id(from.id());
    }
    if (from._has_bit(4)) {
      set_x(from.x());
    }
    if (from._has_bit(5)) {
      set_y(from.y());
    }
    if (from._has_bit(6)) {
      set_shifttocityblockindex(from.shifttocityblockindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CityIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CityIndex::CopyFrom(const CityIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CityIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000032) != 0x00000032) return false;
  
  return true;
}

void CityIndex::Swap(CityIndex* other) {
  if (other != this) {
    std::swap(city_type_, other->city_type_);
    std::swap(name_, other->name_);
    std::swap(name_en_, other->name_en_);
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(shifttocityblockindex_, other->shifttocityblockindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CityIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CityIndex_descriptor_;
  metadata.reflection = CityIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CityBlockIndex::kShiftToCityIndexFieldNumber;
const int CityBlockIndex::kBuildingsFieldNumber;
const int CityBlockIndex::kStreetsFieldNumber;
#endif  // !_MSC_VER

CityBlockIndex::CityBlockIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CityBlockIndex::InitAsDefaultInstance() {
}

CityBlockIndex::CityBlockIndex(const CityBlockIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CityBlockIndex::SharedCtor() {
  _cached_size_ = 0;
  shifttocityindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CityBlockIndex::~CityBlockIndex() {
  SharedDtor();
}

void CityBlockIndex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CityBlockIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CityBlockIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CityBlockIndex_descriptor_;
}

const CityBlockIndex& CityBlockIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

CityBlockIndex* CityBlockIndex::default_instance_ = NULL;

CityBlockIndex* CityBlockIndex::New() const {
  return new CityBlockIndex;
}

void CityBlockIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shifttocityindex_ = 0u;
  }
  buildings_.Clear();
  streets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CityBlockIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 shiftToCityIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &shifttocityindex_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_buildings;
        break;
      }
      
      // repeated .BuildingIndex buildings = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_buildings;
        if (input->ExpectTag(98)) goto parse_streets;
        break;
      }
      
      // repeated .StreetIndex streets = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_streets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_streets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_streets;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CityBlockIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 shiftToCityIndex = 4;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->shifttocityindex(), output);
  }
  
  // repeated .BuildingIndex buildings = 10;
  for (int i = 0; i < this->buildings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->buildings(i), output);
  }
  
  // repeated .StreetIndex streets = 12;
  for (int i = 0; i < this->streets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->streets(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CityBlockIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 shiftToCityIndex = 4;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->shifttocityindex(), target);
  }
  
  // repeated .BuildingIndex buildings = 10;
  for (int i = 0; i < this->buildings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->buildings(i), target);
  }
  
  // repeated .StreetIndex streets = 12;
  for (int i = 0; i < this->streets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->streets(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CityBlockIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 shiftToCityIndex = 4;
    if (has_shifttocityindex()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .BuildingIndex buildings = 10;
  total_size += 1 * this->buildings_size();
  for (int i = 0; i < this->buildings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildings(i));
  }
  
  // repeated .StreetIndex streets = 12;
  total_size += 1 * this->streets_size();
  for (int i = 0; i < this->streets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->streets(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CityBlockIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CityBlockIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CityBlockIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CityBlockIndex::MergeFrom(const CityBlockIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  buildings_.MergeFrom(from.buildings_);
  streets_.MergeFrom(from.streets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_shifttocityindex(from.shifttocityindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CityBlockIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CityBlockIndex::CopyFrom(const CityBlockIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CityBlockIndex::IsInitialized() const {
  
  for (int i = 0; i < buildings_size(); i++) {
    if (!this->buildings(i).IsInitialized()) return false;
  }
  for (int i = 0; i < streets_size(); i++) {
    if (!this->streets(i).IsInitialized()) return false;
  }
  return true;
}

void CityBlockIndex::Swap(CityBlockIndex* other) {
  if (other != this) {
    std::swap(shifttocityindex_, other->shifttocityindex_);
    buildings_.Swap(&other->buildings_);
    streets_.Swap(&other->streets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CityBlockIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CityBlockIndex_descriptor_;
  metadata.reflection = CityBlockIndex_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string StreetIndex::_default_name_;
const ::std::string StreetIndex::_default_name_en_;
#ifndef _MSC_VER
const int StreetIndex::kNameFieldNumber;
const int StreetIndex::kNameEnFieldNumber;
const int StreetIndex::kXFieldNumber;
const int StreetIndex::kYFieldNumber;
const int StreetIndex::kIdFieldNumber;
const int StreetIndex::kBuildingsFieldNumber;
const int StreetIndex::kIntersectionsFieldNumber;
#endif  // !_MSC_VER

StreetIndex::StreetIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreetIndex::InitAsDefaultInstance() {
}

StreetIndex::StreetIndex(const StreetIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreetIndex::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  name_en_ = const_cast< ::std::string*>(&_default_name_en_);
  x_ = 0;
  y_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreetIndex::~StreetIndex() {
  SharedDtor();
}

void StreetIndex::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (name_en_ != &_default_name_en_) {
    delete name_en_;
  }
  if (this != default_instance_) {
  }
}

void StreetIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreetIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreetIndex_descriptor_;
}

const StreetIndex& StreetIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

StreetIndex* StreetIndex::default_instance_ = NULL;

StreetIndex* StreetIndex::New() const {
  return new StreetIndex;
}

void StreetIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (name_en_ != &_default_name_en_) {
        name_en_->clear();
      }
    }
    x_ = 0;
    y_ = 0;
    id_ = GOOGLE_ULONGLONG(0);
  }
  buildings_.Clear();
  intersections_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreetIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name_en;
        break;
      }
      
      // optional string name_en = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_en:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_en()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name_en().data(), this->name_en().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }
      
      // required sint32 x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &x_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }
      
      // required sint32 y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &y_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_intersections;
        break;
      }
      
      // repeated .StreetIntersection intersections = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_intersections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_intersections()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_intersections;
        if (input->ExpectTag(48)) goto parse_id;
        break;
      }
      
      // optional uint64 id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_buildings;
        break;
      }
      
      // repeated .BuildingIndex buildings = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_buildings;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreetIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string name_en = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en().data(), this->name_en().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name_en(), output);
  }
  
  // required sint32 x = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->x(), output);
  }
  
  // required sint32 y = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->y(), output);
  }
  
  // repeated .StreetIntersection intersections = 5;
  for (int i = 0; i < this->intersections_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->intersections(i), output);
  }
  
  // optional uint64 id = 6;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->id(), output);
  }
  
  // repeated .BuildingIndex buildings = 12;
  for (int i = 0; i < this->buildings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->buildings(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreetIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string name_en = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en().data(), this->name_en().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name_en(), target);
  }
  
  // required sint32 x = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->x(), target);
  }
  
  // required sint32 y = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->y(), target);
  }
  
  // repeated .StreetIntersection intersections = 5;
  for (int i = 0; i < this->intersections_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->intersections(i), target);
  }
  
  // optional uint64 id = 6;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->id(), target);
  }
  
  // repeated .BuildingIndex buildings = 12;
  for (int i = 0; i < this->buildings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->buildings(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreetIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string name_en = 2;
    if (has_name_en()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_en());
    }
    
    // required sint32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->x());
    }
    
    // required sint32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->y());
    }
    
    // optional uint64 id = 6;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
  }
  // repeated .BuildingIndex buildings = 12;
  total_size += 1 * this->buildings_size();
  for (int i = 0; i < this->buildings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildings(i));
  }
  
  // repeated .StreetIntersection intersections = 5;
  total_size += 1 * this->intersections_size();
  for (int i = 0; i < this->intersections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->intersections(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreetIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreetIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreetIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreetIndex::MergeFrom(const StreetIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  buildings_.MergeFrom(from.buildings_);
  intersections_.MergeFrom(from.intersections_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_name_en(from.name_en());
    }
    if (from._has_bit(2)) {
      set_x(from.x());
    }
    if (from._has_bit(3)) {
      set_y(from.y());
    }
    if (from._has_bit(4)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreetIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreetIndex::CopyFrom(const StreetIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreetIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  for (int i = 0; i < buildings_size(); i++) {
    if (!this->buildings(i).IsInitialized()) return false;
  }
  for (int i = 0; i < intersections_size(); i++) {
    if (!this->intersections(i).IsInitialized()) return false;
  }
  return true;
}

void StreetIndex::Swap(StreetIndex* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(name_en_, other->name_en_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(id_, other->id_);
    buildings_.Swap(&other->buildings_);
    intersections_.Swap(&other->intersections_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreetIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreetIndex_descriptor_;
  metadata.reflection = StreetIndex_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string StreetIntersection::_default_name_;
const ::std::string StreetIntersection::_default_name_en_;
#ifndef _MSC_VER
const int StreetIntersection::kNameFieldNumber;
const int StreetIntersection::kNameEnFieldNumber;
const int StreetIntersection::kIntersectedXFieldNumber;
const int StreetIntersection::kIntersectedYFieldNumber;
#endif  // !_MSC_VER

StreetIntersection::StreetIntersection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreetIntersection::InitAsDefaultInstance() {
}

StreetIntersection::StreetIntersection(const StreetIntersection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreetIntersection::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  name_en_ = const_cast< ::std::string*>(&_default_name_en_);
  intersectedx_ = 0;
  intersectedy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreetIntersection::~StreetIntersection() {
  SharedDtor();
}

void StreetIntersection::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (name_en_ != &_default_name_en_) {
    delete name_en_;
  }
  if (this != default_instance_) {
  }
}

void StreetIntersection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreetIntersection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreetIntersection_descriptor_;
}

const StreetIntersection& StreetIntersection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

StreetIntersection* StreetIntersection::default_instance_ = NULL;

StreetIntersection* StreetIntersection::New() const {
  return new StreetIntersection;
}

void StreetIntersection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (name_en_ != &_default_name_en_) {
        name_en_->clear();
      }
    }
    intersectedx_ = 0;
    intersectedy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreetIntersection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name_en;
        break;
      }
      
      // optional string name_en = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_en:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_en()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name_en().data(), this->name_en().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_intersectedX;
        break;
      }
      
      // required sint32 intersectedX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intersectedX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &intersectedx_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_intersectedY;
        break;
      }
      
      // required sint32 intersectedY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intersectedY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &intersectedy_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreetIntersection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string name_en = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en().data(), this->name_en().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name_en(), output);
  }
  
  // required sint32 intersectedX = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->intersectedx(), output);
  }
  
  // required sint32 intersectedY = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->intersectedy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreetIntersection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string name_en = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en().data(), this->name_en().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name_en(), target);
  }
  
  // required sint32 intersectedX = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->intersectedx(), target);
  }
  
  // required sint32 intersectedY = 5;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->intersectedy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreetIntersection::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string name_en = 3;
    if (has_name_en()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_en());
    }
    
    // required sint32 intersectedX = 4;
    if (has_intersectedx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->intersectedx());
    }
    
    // required sint32 intersectedY = 5;
    if (has_intersectedy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->intersectedy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreetIntersection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreetIntersection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreetIntersection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreetIntersection::MergeFrom(const StreetIntersection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_name_en(from.name_en());
    }
    if (from._has_bit(2)) {
      set_intersectedx(from.intersectedx());
    }
    if (from._has_bit(3)) {
      set_intersectedy(from.intersectedy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreetIntersection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreetIntersection::CopyFrom(const StreetIntersection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreetIntersection::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  return true;
}

void StreetIntersection::Swap(StreetIntersection* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(name_en_, other->name_en_);
    std::swap(intersectedx_, other->intersectedx_);
    std::swap(intersectedy_, other->intersectedy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreetIntersection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreetIntersection_descriptor_;
  metadata.reflection = StreetIntersection_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string BuildingIndex::_default_name_;
const ::std::string BuildingIndex::_default_name_en_;
const ::std::string BuildingIndex::_default_name2_;
const ::std::string BuildingIndex::_default_name_en2_;
const ::std::string BuildingIndex::_default_postcode_;
#ifndef _MSC_VER
const int BuildingIndex::kNameFieldNumber;
const int BuildingIndex::kNameEnFieldNumber;
const int BuildingIndex::kName2FieldNumber;
const int BuildingIndex::kNameEn2FieldNumber;
const int BuildingIndex::kInterpolationFieldNumber;
const int BuildingIndex::kXFieldNumber;
const int BuildingIndex::kYFieldNumber;
const int BuildingIndex::kX2FieldNumber;
const int BuildingIndex::kY2FieldNumber;
const int BuildingIndex::kIdFieldNumber;
const int BuildingIndex::kPostcodeFieldNumber;
#endif  // !_MSC_VER

BuildingIndex::BuildingIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildingIndex::InitAsDefaultInstance() {
}

BuildingIndex::BuildingIndex(const BuildingIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingIndex::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  name_en_ = const_cast< ::std::string*>(&_default_name_en_);
  name2_ = const_cast< ::std::string*>(&_default_name2_);
  name_en2_ = const_cast< ::std::string*>(&_default_name_en2_);
  interpolation_ = 0;
  x_ = 0;
  y_ = 0;
  x2_ = 0;
  y2_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  postcode_ = const_cast< ::std::string*>(&_default_postcode_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingIndex::~BuildingIndex() {
  SharedDtor();
}

void BuildingIndex::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (name_en_ != &_default_name_en_) {
    delete name_en_;
  }
  if (name2_ != &_default_name2_) {
    delete name2_;
  }
  if (name_en2_ != &_default_name_en2_) {
    delete name_en2_;
  }
  if (postcode_ != &_default_postcode_) {
    delete postcode_;
  }
  if (this != default_instance_) {
  }
}

void BuildingIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingIndex_descriptor_;
}

const BuildingIndex& BuildingIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

BuildingIndex* BuildingIndex::default_instance_ = NULL;

BuildingIndex* BuildingIndex::New() const {
  return new BuildingIndex;
}

void BuildingIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (name_en_ != &_default_name_en_) {
        name_en_->clear();
      }
    }
    if (_has_bit(2)) {
      if (name2_ != &_default_name2_) {
        name2_->clear();
      }
    }
    if (_has_bit(3)) {
      if (name_en2_ != &_default_name_en2_) {
        name_en2_->clear();
      }
    }
    interpolation_ = 0;
    x_ = 0;
    y_ = 0;
    x2_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    y2_ = 0;
    id_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(10)) {
      if (postcode_ != &_default_postcode_) {
        postcode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name_en;
        break;
      }
      
      // optional string name_en = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_en:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_en()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name_en().data(), this->name_en().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name2;
        break;
      }
      
      // optional string name2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name2().data(), this->name2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name_en2;
        break;
      }
      
      // optional string name_en2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_en2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_en2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name_en2().data(), this->name_en2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_interpolation;
        break;
      }
      
      // optional sint32 interpolation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interpolation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &interpolation_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_x;
        break;
      }
      
      // required sint32 x = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &x_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_y;
        break;
      }
      
      // required sint32 y = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &y_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_x2;
        break;
      }
      
      // optional sint32 x2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &x2_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_y2;
        break;
      }
      
      // optional sint32 y2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &y2_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_id;
        break;
      }
      
      // optional uint64 id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_postcode;
        break;
      }
      
      // optional string postcode = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_postcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->postcode().data(), this->postcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string name_en = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en().data(), this->name_en().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name_en(), output);
  }
  
  // optional string name2 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name2().data(), this->name2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name2(), output);
  }
  
  // optional string name_en2 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en2().data(), this->name_en2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name_en2(), output);
  }
  
  // optional sint32 interpolation = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->interpolation(), output);
  }
  
  // required sint32 x = 7;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->x(), output);
  }
  
  // required sint32 y = 8;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->y(), output);
  }
  
  // optional sint32 x2 = 9;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->x2(), output);
  }
  
  // optional sint32 y2 = 10;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->y2(), output);
  }
  
  // optional uint64 id = 13;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->id(), output);
  }
  
  // optional string postcode = 14;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postcode().data(), this->postcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->postcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildingIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string name_en = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en().data(), this->name_en().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name_en(), target);
  }
  
  // optional string name2 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name2().data(), this->name2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name2(), target);
  }
  
  // optional string name_en2 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en2().data(), this->name_en2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name_en2(), target);
  }
  
  // optional sint32 interpolation = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->interpolation(), target);
  }
  
  // required sint32 x = 7;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->x(), target);
  }
  
  // required sint32 y = 8;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->y(), target);
  }
  
  // optional sint32 x2 = 9;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->x2(), target);
  }
  
  // optional sint32 y2 = 10;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->y2(), target);
  }
  
  // optional uint64 id = 13;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->id(), target);
  }
  
  // optional string postcode = 14;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postcode().data(), this->postcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->postcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string name_en = 2;
    if (has_name_en()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_en());
    }
    
    // optional string name2 = 3;
    if (has_name2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name2());
    }
    
    // optional string name_en2 = 4;
    if (has_name_en2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_en2());
    }
    
    // optional sint32 interpolation = 5;
    if (has_interpolation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->interpolation());
    }
    
    // required sint32 x = 7;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->x());
    }
    
    // required sint32 y = 8;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->y());
    }
    
    // optional sint32 x2 = 9;
    if (has_x2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->x2());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint32 y2 = 10;
    if (has_y2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->y2());
    }
    
    // optional uint64 id = 13;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // optional string postcode = 14;
    if (has_postcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingIndex::MergeFrom(const BuildingIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_name_en(from.name_en());
    }
    if (from._has_bit(2)) {
      set_name2(from.name2());
    }
    if (from._has_bit(3)) {
      set_name_en2(from.name_en2());
    }
    if (from._has_bit(4)) {
      set_interpolation(from.interpolation());
    }
    if (from._has_bit(5)) {
      set_x(from.x());
    }
    if (from._has_bit(6)) {
      set_y(from.y());
    }
    if (from._has_bit(7)) {
      set_x2(from.x2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_y2(from.y2());
    }
    if (from._has_bit(9)) {
      set_id(from.id());
    }
    if (from._has_bit(10)) {
      set_postcode(from.postcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingIndex::CopyFrom(const BuildingIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000061) != 0x00000061) return false;
  
  return true;
}

void BuildingIndex::Swap(BuildingIndex* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(name_en_, other->name_en_);
    std::swap(name2_, other->name2_);
    std::swap(name_en2_, other->name_en2_);
    std::swap(interpolation_, other->interpolation_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(x2_, other->x2_);
    std::swap(y2_, other->y2_);
    std::swap(id_, other->id_);
    std::swap(postcode_, other->postcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingIndex_descriptor_;
  metadata.reflection = BuildingIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransportRoutes::kRoutesFieldNumber;
#endif  // !_MSC_VER

TransportRoutes::TransportRoutes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransportRoutes::InitAsDefaultInstance() {
}

TransportRoutes::TransportRoutes(const TransportRoutes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransportRoutes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransportRoutes::~TransportRoutes() {
  SharedDtor();
}

void TransportRoutes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransportRoutes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportRoutes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransportRoutes_descriptor_;
}

const TransportRoutes& TransportRoutes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

TransportRoutes* TransportRoutes::default_instance_ = NULL;

TransportRoutes* TransportRoutes::New() const {
  return new TransportRoutes;
}

void TransportRoutes::Clear() {
  routes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransportRoutes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TransportRoute routes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_routes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_routes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_routes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransportRoutes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TransportRoute routes = 6;
  for (int i = 0; i < this->routes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->routes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransportRoutes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TransportRoute routes = 6;
  for (int i = 0; i < this->routes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->routes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransportRoutes::ByteSize() const {
  int total_size = 0;
  
  // repeated .TransportRoute routes = 6;
  total_size += 1 * this->routes_size();
  for (int i = 0; i < this->routes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->routes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportRoutes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransportRoutes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransportRoutes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransportRoutes::MergeFrom(const TransportRoutes& from) {
  GOOGLE_CHECK_NE(&from, this);
  routes_.MergeFrom(from.routes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransportRoutes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRoutes::CopyFrom(const TransportRoutes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRoutes::IsInitialized() const {
  
  for (int i = 0; i < routes_size(); i++) {
    if (!this->routes(i).IsInitialized()) return false;
  }
  return true;
}

void TransportRoutes::Swap(TransportRoutes* other) {
  if (other != this) {
    routes_.Swap(&other->routes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransportRoutes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransportRoutes_descriptor_;
  metadata.reflection = TransportRoutes_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string TransportRoute::_default_ref_;
#ifndef _MSC_VER
const int TransportRoute::kIdFieldNumber;
const int TransportRoute::kTypeFieldNumber;
const int TransportRoute::kOperatorFieldNumber;
const int TransportRoute::kRefFieldNumber;
const int TransportRoute::kNameFieldNumber;
const int TransportRoute::kNameEnFieldNumber;
const int TransportRoute::kDistanceFieldNumber;
const int TransportRoute::kDirectStopsFieldNumber;
const int TransportRoute::kReverseStopsFieldNumber;
#endif  // !_MSC_VER

TransportRoute::TransportRoute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransportRoute::InitAsDefaultInstance() {
}

TransportRoute::TransportRoute(const TransportRoute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransportRoute::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  operator__ = 0u;
  ref_ = const_cast< ::std::string*>(&_default_ref_);
  name_ = 0u;
  name_en_ = 0u;
  distance_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransportRoute::~TransportRoute() {
  SharedDtor();
}

void TransportRoute::SharedDtor() {
  if (ref_ != &_default_ref_) {
    delete ref_;
  }
  if (this != default_instance_) {
  }
}

void TransportRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportRoute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransportRoute_descriptor_;
}

const TransportRoute& TransportRoute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

TransportRoute* TransportRoute::default_instance_ = NULL;

TransportRoute* TransportRoute::New() const {
  return new TransportRoute;
}

void TransportRoute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    operator__ = 0u;
    if (_has_bit(3)) {
      if (ref_ != &_default_ref_) {
        ref_->clear();
      }
    }
    name_ = 0u;
    name_en_ = 0u;
    distance_ = 0u;
  }
  directstops_.Clear();
  reversestops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransportRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_operator;
        break;
      }
      
      // optional uint32 operator = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operator__)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ref;
        break;
      }
      
      // optional string ref = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ref().data(), this->ref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_name;
        break;
      }
      
      // optional uint32 name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_name_en;
        break;
      }
      
      // optional uint32 name_en = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name_en:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_en_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_distance;
        break;
      }
      
      // optional uint32 distance = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &distance_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_directStops;
        break;
      }
      
      // repeated .TransportRouteStop directStops = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_directStops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_directstops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_directStops;
        if (input->ExpectTag(130)) goto parse_reverseStops;
        break;
      }
      
      // repeated .TransportRouteStop reverseStops = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reverseStops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reversestops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_reverseStops;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransportRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  // optional uint32 type = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }
  
  // optional uint32 operator = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->operator_(), output);
  }
  
  // optional string ref = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ref(), output);
  }
  
  // optional uint32 name = 6;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->name(), output);
  }
  
  // optional uint32 name_en = 7;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->name_en(), output);
  }
  
  // optional uint32 distance = 8;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->distance(), output);
  }
  
  // repeated .TransportRouteStop directStops = 15;
  for (int i = 0; i < this->directstops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->directstops(i), output);
  }
  
  // repeated .TransportRouteStop reverseStops = 16;
  for (int i = 0; i < this->reversestops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->reversestops(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransportRoute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  // optional uint32 type = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }
  
  // optional uint32 operator = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->operator_(), target);
  }
  
  // optional string ref = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ref(), target);
  }
  
  // optional uint32 name = 6;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->name(), target);
  }
  
  // optional uint32 name_en = 7;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->name_en(), target);
  }
  
  // optional uint32 distance = 8;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->distance(), target);
  }
  
  // repeated .TransportRouteStop directStops = 15;
  for (int i = 0; i < this->directstops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->directstops(i), target);
  }
  
  // repeated .TransportRouteStop reverseStops = 16;
  for (int i = 0; i < this->reversestops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->reversestops(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransportRoute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 operator = 4;
    if (has_operator_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operator_());
    }
    
    // optional string ref = 5;
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref());
    }
    
    // optional uint32 name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name());
    }
    
    // optional uint32 name_en = 7;
    if (has_name_en()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name_en());
    }
    
    // optional uint32 distance = 8;
    if (has_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->distance());
    }
    
  }
  // repeated .TransportRouteStop directStops = 15;
  total_size += 1 * this->directstops_size();
  for (int i = 0; i < this->directstops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->directstops(i));
  }
  
  // repeated .TransportRouteStop reverseStops = 16;
  total_size += 2 * this->reversestops_size();
  for (int i = 0; i < this->reversestops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reversestops(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportRoute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransportRoute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransportRoute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransportRoute::MergeFrom(const TransportRoute& from) {
  GOOGLE_CHECK_NE(&from, this);
  directstops_.MergeFrom(from.directstops_);
  reversestops_.MergeFrom(from.reversestops_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_operator_(from.operator_());
    }
    if (from._has_bit(3)) {
      set_ref(from.ref());
    }
    if (from._has_bit(4)) {
      set_name(from.name());
    }
    if (from._has_bit(5)) {
      set_name_en(from.name_en());
    }
    if (from._has_bit(6)) {
      set_distance(from.distance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransportRoute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRoute::CopyFrom(const TransportRoute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRoute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < directstops_size(); i++) {
    if (!this->directstops(i).IsInitialized()) return false;
  }
  for (int i = 0; i < reversestops_size(); i++) {
    if (!this->reversestops(i).IsInitialized()) return false;
  }
  return true;
}

void TransportRoute::Swap(TransportRoute* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(operator__, other->operator__);
    std::swap(ref_, other->ref_);
    std::swap(name_, other->name_);
    std::swap(name_en_, other->name_en_);
    std::swap(distance_, other->distance_);
    directstops_.Swap(&other->directstops_);
    reversestops_.Swap(&other->reversestops_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransportRoute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransportRoute_descriptor_;
  metadata.reflection = TransportRoute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransportRouteStop::kIdFieldNumber;
const int TransportRouteStop::kDxFieldNumber;
const int TransportRouteStop::kDyFieldNumber;
const int TransportRouteStop::kNameFieldNumber;
const int TransportRouteStop::kNameEnFieldNumber;
#endif  // !_MSC_VER

TransportRouteStop::TransportRouteStop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransportRouteStop::InitAsDefaultInstance() {
}

TransportRouteStop::TransportRouteStop(const TransportRouteStop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransportRouteStop::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  dx_ = 0;
  dy_ = 0;
  name_ = 0u;
  name_en_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransportRouteStop::~TransportRouteStop() {
  SharedDtor();
}

void TransportRouteStop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransportRouteStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportRouteStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransportRouteStop_descriptor_;
}

const TransportRouteStop& TransportRouteStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

TransportRouteStop* TransportRouteStop::default_instance_ = NULL;

TransportRouteStop* TransportRouteStop::New() const {
  return new TransportRouteStop;
}

void TransportRouteStop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    dx_ = 0;
    dy_ = 0;
    name_ = 0u;
    name_en_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransportRouteStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dx;
        break;
      }
      
      // required sint32 dx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dx_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dy;
        break;
      }
      
      // required sint32 dy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dy_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_name;
        break;
      }
      
      // required uint32 name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_name_en;
        break;
      }
      
      // optional uint32 name_en = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name_en:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_en_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransportRouteStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->id(), output);
  }
  
  // required sint32 dx = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->dx(), output);
  }
  
  // required sint32 dy = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->dy(), output);
  }
  
  // required uint32 name = 6;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->name(), output);
  }
  
  // optional uint32 name_en = 7;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->name_en(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransportRouteStop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->id(), target);
  }
  
  // required sint32 dx = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->dx(), target);
  }
  
  // required sint32 dy = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->dy(), target);
  }
  
  // required uint32 name = 6;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->name(), target);
  }
  
  // optional uint32 name_en = 7;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->name_en(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransportRouteStop::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->id());
    }
    
    // required sint32 dx = 2;
    if (has_dx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dx());
    }
    
    // required sint32 dy = 3;
    if (has_dy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dy());
    }
    
    // required uint32 name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name());
    }
    
    // optional uint32 name_en = 7;
    if (has_name_en()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name_en());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportRouteStop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransportRouteStop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransportRouteStop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransportRouteStop::MergeFrom(const TransportRouteStop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_dx(from.dx());
    }
    if (from._has_bit(2)) {
      set_dy(from.dy());
    }
    if (from._has_bit(3)) {
      set_name(from.name());
    }
    if (from._has_bit(4)) {
      set_name_en(from.name_en());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransportRouteStop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRouteStop::CopyFrom(const TransportRouteStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRouteStop::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void TransportRouteStop::Swap(TransportRouteStop* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(dx_, other->dx_);
    std::swap(dy_, other->dy_);
    std::swap(name_, other->name_);
    std::swap(name_en_, other->name_en_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransportRouteStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransportRouteStop_descriptor_;
  metadata.reflection = TransportRouteStop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransportStop::kDxFieldNumber;
const int TransportStop::kDyFieldNumber;
const int TransportStop::kIdFieldNumber;
const int TransportStop::kNameFieldNumber;
const int TransportStop::kNameEnFieldNumber;
const int TransportStop::kRoutesFieldNumber;
#endif  // !_MSC_VER

TransportStop::TransportStop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransportStop::InitAsDefaultInstance() {
}

TransportStop::TransportStop(const TransportStop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransportStop::SharedCtor() {
  _cached_size_ = 0;
  dx_ = 0;
  dy_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = 0u;
  name_en_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransportStop::~TransportStop() {
  SharedDtor();
}

void TransportStop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransportStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransportStop_descriptor_;
}

const TransportStop& TransportStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

TransportStop* TransportStop::default_instance_ = NULL;

TransportStop* TransportStop::New() const {
  return new TransportStop;
}

void TransportStop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dx_ = 0;
    dy_ = 0;
    id_ = GOOGLE_LONGLONG(0);
    name_ = 0u;
    name_en_ = 0u;
  }
  routes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransportStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 dx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dx_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dy;
        break;
      }
      
      // required sint32 dy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dy_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }
      
      // required sint64 id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_name;
        break;
      }
      
      // required uint32 name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_name_en;
        break;
      }
      
      // optional uint32 name_en = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name_en:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_en_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_routes;
        break;
      }
      
      // repeated uint32 routes = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128, input, this->mutable_routes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_routes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_routes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransportStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 dx = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->dx(), output);
  }
  
  // required sint32 dy = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->dy(), output);
  }
  
  // required sint64 id = 5;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->id(), output);
  }
  
  // required uint32 name = 6;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->name(), output);
  }
  
  // optional uint32 name_en = 7;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->name_en(), output);
  }
  
  // repeated uint32 routes = 16;
  for (int i = 0; i < this->routes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->routes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransportStop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 dx = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->dx(), target);
  }
  
  // required sint32 dy = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->dy(), target);
  }
  
  // required sint64 id = 5;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->id(), target);
  }
  
  // required uint32 name = 6;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->name(), target);
  }
  
  // optional uint32 name_en = 7;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->name_en(), target);
  }
  
  // repeated uint32 routes = 16;
  for (int i = 0; i < this->routes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(16, this->routes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransportStop::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 dx = 1;
    if (has_dx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dx());
    }
    
    // required sint32 dy = 2;
    if (has_dy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dy());
    }
    
    // required sint64 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->id());
    }
    
    // required uint32 name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name());
    }
    
    // optional uint32 name_en = 7;
    if (has_name_en()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name_en());
    }
    
  }
  // repeated uint32 routes = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->routes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->routes(i));
    }
    total_size += 2 * this->routes_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportStop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransportStop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransportStop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransportStop::MergeFrom(const TransportStop& from) {
  GOOGLE_CHECK_NE(&from, this);
  routes_.MergeFrom(from.routes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_dx(from.dx());
    }
    if (from._has_bit(1)) {
      set_dy(from.dy());
    }
    if (from._has_bit(2)) {
      set_id(from.id());
    }
    if (from._has_bit(3)) {
      set_name(from.name());
    }
    if (from._has_bit(4)) {
      set_name_en(from.name_en());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransportStop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportStop::CopyFrom(const TransportStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportStop::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void TransportStop::Swap(TransportStop* other) {
  if (other != this) {
    std::swap(dx_, other->dx_);
    std::swap(dy_, other->dy_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(name_en_, other->name_en_);
    routes_.Swap(&other->routes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransportStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransportStop_descriptor_;
  metadata.reflection = TransportStop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransportStopsTree::kLeftFieldNumber;
const int TransportStopsTree::kRightFieldNumber;
const int TransportStopsTree::kTopFieldNumber;
const int TransportStopsTree::kBottomFieldNumber;
const int TransportStopsTree::kSubtreesFieldNumber;
const int TransportStopsTree::kLeafsFieldNumber;
const int TransportStopsTree::kBaseIdFieldNumber;
#endif  // !_MSC_VER

TransportStopsTree::TransportStopsTree()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransportStopsTree::InitAsDefaultInstance() {
}

TransportStopsTree::TransportStopsTree(const TransportStopsTree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransportStopsTree::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0;
  right_ = 0;
  top_ = 0;
  bottom_ = 0;
  baseid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransportStopsTree::~TransportStopsTree() {
  SharedDtor();
}

void TransportStopsTree::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransportStopsTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportStopsTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransportStopsTree_descriptor_;
}

const TransportStopsTree& TransportStopsTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

TransportStopsTree* TransportStopsTree::default_instance_ = NULL;

TransportStopsTree* TransportStopsTree::New() const {
  return new TransportStopsTree;
}

void TransportStopsTree::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    left_ = 0;
    right_ = 0;
    top_ = 0;
    bottom_ = 0;
    baseid_ = GOOGLE_ULONGLONG(0);
  }
  subtrees_.Clear();
  leafs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransportStopsTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 left = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &left_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_right;
        break;
      }
      
      // required sint32 right = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &right_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_top;
        break;
      }
      
      // required sint32 top = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &top_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bottom;
        break;
      }
      
      // required sint32 bottom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bottom_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_subtrees;
        break;
      }
      
      // repeated .TransportStopsTree subtrees = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtrees:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subtrees()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_subtrees;
        if (input->ExpectTag(66)) goto parse_leafs;
        break;
      }
      
      // repeated .TransportStop leafs = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leafs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leafs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_leafs;
        if (input->ExpectTag(128)) goto parse_baseId;
        break;
      }
      
      // optional uint64 baseId = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &baseid_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransportStopsTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 left = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->left(), output);
  }
  
  // required sint32 right = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->right(), output);
  }
  
  // required sint32 top = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->top(), output);
  }
  
  // required sint32 bottom = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->bottom(), output);
  }
  
  // repeated .TransportStopsTree subtrees = 7;
  for (int i = 0; i < this->subtrees_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->subtrees(i), output);
  }
  
  // repeated .TransportStop leafs = 8;
  for (int i = 0; i < this->leafs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->leafs(i), output);
  }
  
  // optional uint64 baseId = 16;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->baseid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransportStopsTree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 left = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->left(), target);
  }
  
  // required sint32 right = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->right(), target);
  }
  
  // required sint32 top = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->top(), target);
  }
  
  // required sint32 bottom = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->bottom(), target);
  }
  
  // repeated .TransportStopsTree subtrees = 7;
  for (int i = 0; i < this->subtrees_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->subtrees(i), target);
  }
  
  // repeated .TransportStop leafs = 8;
  for (int i = 0; i < this->leafs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->leafs(i), target);
  }
  
  // optional uint64 baseId = 16;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->baseid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransportStopsTree::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->left());
    }
    
    // required sint32 right = 2;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->right());
    }
    
    // required sint32 top = 3;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->top());
    }
    
    // required sint32 bottom = 4;
    if (has_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bottom());
    }
    
    // optional uint64 baseId = 16;
    if (has_baseid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->baseid());
    }
    
  }
  // repeated .TransportStopsTree subtrees = 7;
  total_size += 1 * this->subtrees_size();
  for (int i = 0; i < this->subtrees_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subtrees(i));
  }
  
  // repeated .TransportStop leafs = 8;
  total_size += 1 * this->leafs_size();
  for (int i = 0; i < this->leafs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leafs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportStopsTree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransportStopsTree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransportStopsTree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransportStopsTree::MergeFrom(const TransportStopsTree& from) {
  GOOGLE_CHECK_NE(&from, this);
  subtrees_.MergeFrom(from.subtrees_);
  leafs_.MergeFrom(from.leafs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_left(from.left());
    }
    if (from._has_bit(1)) {
      set_right(from.right());
    }
    if (from._has_bit(2)) {
      set_top(from.top());
    }
    if (from._has_bit(3)) {
      set_bottom(from.bottom());
    }
    if (from._has_bit(6)) {
      set_baseid(from.baseid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransportStopsTree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportStopsTree::CopyFrom(const TransportStopsTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportStopsTree::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < subtrees_size(); i++) {
    if (!this->subtrees(i).IsInitialized()) return false;
  }
  for (int i = 0; i < leafs_size(); i++) {
    if (!this->leafs(i).IsInitialized()) return false;
  }
  return true;
}

void TransportStopsTree::Swap(TransportStopsTree* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(top_, other->top_);
    std::swap(bottom_, other->bottom_);
    subtrees_.Swap(&other->subtrees_);
    leafs_.Swap(&other->leafs_);
    std::swap(baseid_, other->baseid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransportStopsTree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransportStopsTree_descriptor_;
  metadata.reflection = TransportStopsTree_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string FlcNavTransportIndex::_default_name_;
#ifndef _MSC_VER
const int FlcNavTransportIndex::kNameFieldNumber;
const int FlcNavTransportIndex::kRoutesFieldNumber;
const int FlcNavTransportIndex::kStopsFieldNumber;
const int FlcNavTransportIndex::kStringTableFieldNumber;
#endif  // !_MSC_VER

FlcNavTransportIndex::FlcNavTransportIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavTransportIndex::InitAsDefaultInstance() {
  routes_ = const_cast< ::TransportRoutes*>(&::TransportRoutes::default_instance());
  stops_ = const_cast< ::TransportStopsTree*>(&::TransportStopsTree::default_instance());
  stringtable_ = const_cast< ::StringTable*>(&::StringTable::default_instance());
}

FlcNavTransportIndex::FlcNavTransportIndex(const FlcNavTransportIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavTransportIndex::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  routes_ = NULL;
  stops_ = NULL;
  stringtable_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavTransportIndex::~FlcNavTransportIndex() {
  SharedDtor();
}

void FlcNavTransportIndex::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete routes_;
    delete stops_;
    delete stringtable_;
  }
}

void FlcNavTransportIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavTransportIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavTransportIndex_descriptor_;
}

const FlcNavTransportIndex& FlcNavTransportIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavTransportIndex* FlcNavTransportIndex::default_instance_ = NULL;

FlcNavTransportIndex* FlcNavTransportIndex::New() const {
  return new FlcNavTransportIndex;
}

void FlcNavTransportIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (routes_ != NULL) routes_->::TransportRoutes::Clear();
    }
    if (_has_bit(2)) {
      if (stops_ != NULL) stops_->::TransportStopsTree::Clear();
    }
    if (_has_bit(3)) {
      if (stringtable_ != NULL) stringtable_->::StringTable::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavTransportIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_routes;
        break;
      }
      
      // optional .TransportRoutes routes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_routes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stops;
        break;
      }
      
      // optional .TransportStopsTree stops = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_stringTable;
        break;
      }
      
      // required .StringTable stringTable = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stringtable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavTransportIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional .TransportRoutes routes = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->routes(), output);
  }
  
  // optional .TransportStopsTree stops = 6;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stops(), output);
  }
  
  // required .StringTable stringTable = 9;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->stringtable(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavTransportIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional .TransportRoutes routes = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->routes(), target);
  }
  
  // optional .TransportStopsTree stops = 6;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->stops(), target);
  }
  
  // required .StringTable stringTable = 9;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->stringtable(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavTransportIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .TransportRoutes routes = 3;
    if (has_routes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->routes());
    }
    
    // optional .TransportStopsTree stops = 6;
    if (has_stops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stops());
    }
    
    // required .StringTable stringTable = 9;
    if (has_stringtable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stringtable());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavTransportIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavTransportIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavTransportIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavTransportIndex::MergeFrom(const FlcNavTransportIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      mutable_routes()->::TransportRoutes::MergeFrom(from.routes());
    }
    if (from._has_bit(2)) {
      mutable_stops()->::TransportStopsTree::MergeFrom(from.stops());
    }
    if (from._has_bit(3)) {
      mutable_stringtable()->::StringTable::MergeFrom(from.stringtable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavTransportIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavTransportIndex::CopyFrom(const FlcNavTransportIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavTransportIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  
  if (has_routes()) {
    if (!this->routes().IsInitialized()) return false;
  }
  if (has_stops()) {
    if (!this->stops().IsInitialized()) return false;
  }
  return true;
}

void FlcNavTransportIndex::Swap(FlcNavTransportIndex* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(routes_, other->routes_);
    std::swap(stops_, other->stops_);
    std::swap(stringtable_, other->stringtable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavTransportIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavTransportIndex_descriptor_;
  metadata.reflection = FlcNavTransportIndex_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string FlcNavPoiIndex::_default_name_;
#ifndef _MSC_VER
const int FlcNavPoiIndex::kNameFieldNumber;
const int FlcNavPoiIndex::kBoundariesFieldNumber;
const int FlcNavPoiIndex::kCategoriesTableFieldNumber;
const int FlcNavPoiIndex::kNameIndexFieldNumber;
const int FlcNavPoiIndex::kBoxesFieldNumber;
const int FlcNavPoiIndex::kPoiDataFieldNumber;
#endif  // !_MSC_VER

FlcNavPoiIndex::FlcNavPoiIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavPoiIndex::InitAsDefaultInstance() {
  boundaries_ = const_cast< ::FlcNavTileBox*>(&::FlcNavTileBox::default_instance());
  nameindex_ = const_cast< ::FlcNavPoiNameIndex*>(&::FlcNavPoiNameIndex::default_instance());
}

FlcNavPoiIndex::FlcNavPoiIndex(const FlcNavPoiIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavPoiIndex::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  boundaries_ = NULL;
  nameindex_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavPoiIndex::~FlcNavPoiIndex() {
  SharedDtor();
}

void FlcNavPoiIndex::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete boundaries_;
    delete nameindex_;
  }
}

void FlcNavPoiIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavPoiIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavPoiIndex_descriptor_;
}

const FlcNavPoiIndex& FlcNavPoiIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavPoiIndex* FlcNavPoiIndex::default_instance_ = NULL;

FlcNavPoiIndex* FlcNavPoiIndex::New() const {
  return new FlcNavPoiIndex;
}

void FlcNavPoiIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (boundaries_ != NULL) boundaries_->::FlcNavTileBox::Clear();
    }
    if (_has_bit(3)) {
      if (nameindex_ != NULL) nameindex_->::FlcNavPoiNameIndex::Clear();
    }
  }
  categoriestable_.Clear();
  boxes_.Clear();
  poidata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavPoiIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_boundaries;
        break;
      }
      
      // required .FlcNavTileBox boundaries = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boundaries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boundaries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_categoriesTable;
        break;
      }
      
      // repeated .FlcNavCategoryTable categoriesTable = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_categoriesTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_categoriestable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_categoriesTable;
        if (input->ExpectTag(34)) goto parse_nameIndex;
        break;
      }
      
      // optional .FlcNavPoiNameIndex nameIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nameIndex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nameindex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_boxes;
        break;
      }
      
      // repeated .FlcNavPoiBox boxes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boxes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_boxes;
        if (input->ExpectTag(74)) goto parse_poiData;
        break;
      }
      
      // repeated .FlcNavPoiBoxData poiData = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poiData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poidata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_poiData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavPoiIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required .FlcNavTileBox boundaries = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->boundaries(), output);
  }
  
  // repeated .FlcNavCategoryTable categoriesTable = 3;
  for (int i = 0; i < this->categoriestable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->categoriestable(i), output);
  }
  
  // optional .FlcNavPoiNameIndex nameIndex = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->nameindex(), output);
  }
  
  // repeated .FlcNavPoiBox boxes = 6;
  for (int i = 0; i < this->boxes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->boxes(i), output);
  }
  
  // repeated .FlcNavPoiBoxData poiData = 9;
  for (int i = 0; i < this->poidata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->poidata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavPoiIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required .FlcNavTileBox boundaries = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->boundaries(), target);
  }
  
  // repeated .FlcNavCategoryTable categoriesTable = 3;
  for (int i = 0; i < this->categoriestable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->categoriestable(i), target);
  }
  
  // optional .FlcNavPoiNameIndex nameIndex = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->nameindex(), target);
  }
  
  // repeated .FlcNavPoiBox boxes = 6;
  for (int i = 0; i < this->boxes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->boxes(i), target);
  }
  
  // repeated .FlcNavPoiBoxData poiData = 9;
  for (int i = 0; i < this->poidata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->poidata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavPoiIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required .FlcNavTileBox boundaries = 2;
    if (has_boundaries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boundaries());
    }
    
    // optional .FlcNavPoiNameIndex nameIndex = 4;
    if (has_nameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nameindex());
    }
    
  }
  // repeated .FlcNavCategoryTable categoriesTable = 3;
  total_size += 1 * this->categoriestable_size();
  for (int i = 0; i < this->categoriestable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->categoriestable(i));
  }
  
  // repeated .FlcNavPoiBox boxes = 6;
  total_size += 1 * this->boxes_size();
  for (int i = 0; i < this->boxes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxes(i));
  }
  
  // repeated .FlcNavPoiBoxData poiData = 9;
  total_size += 1 * this->poidata_size();
  for (int i = 0; i < this->poidata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poidata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavPoiIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavPoiIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavPoiIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavPoiIndex::MergeFrom(const FlcNavPoiIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  categoriestable_.MergeFrom(from.categoriestable_);
  boxes_.MergeFrom(from.boxes_);
  poidata_.MergeFrom(from.poidata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      mutable_boundaries()->::FlcNavTileBox::MergeFrom(from.boundaries());
    }
    if (from._has_bit(3)) {
      mutable_nameindex()->::FlcNavPoiNameIndex::MergeFrom(from.nameindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavPoiIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavPoiIndex::CopyFrom(const FlcNavPoiIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavPoiIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_boundaries()) {
    if (!this->boundaries().IsInitialized()) return false;
  }
  for (int i = 0; i < categoriestable_size(); i++) {
    if (!this->categoriestable(i).IsInitialized()) return false;
  }
  if (has_nameindex()) {
    if (!this->nameindex().IsInitialized()) return false;
  }
  for (int i = 0; i < boxes_size(); i++) {
    if (!this->boxes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < poidata_size(); i++) {
    if (!this->poidata(i).IsInitialized()) return false;
  }
  return true;
}

void FlcNavPoiIndex::Swap(FlcNavPoiIndex* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(boundaries_, other->boundaries_);
    categoriestable_.Swap(&other->categoriestable_);
    std::swap(nameindex_, other->nameindex_);
    boxes_.Swap(&other->boxes_);
    poidata_.Swap(&other->poidata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavPoiIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavPoiIndex_descriptor_;
  metadata.reflection = FlcNavPoiIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlcNavPoiNameIndex_FlcNavPoiNameIndexData::kAtomsFieldNumber;
#endif  // !_MSC_VER

FlcNavPoiNameIndex_FlcNavPoiNameIndexData::FlcNavPoiNameIndex_FlcNavPoiNameIndexData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavPoiNameIndex_FlcNavPoiNameIndexData::InitAsDefaultInstance() {
}

FlcNavPoiNameIndex_FlcNavPoiNameIndexData::FlcNavPoiNameIndex_FlcNavPoiNameIndexData(const FlcNavPoiNameIndex_FlcNavPoiNameIndexData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavPoiNameIndex_FlcNavPoiNameIndexData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavPoiNameIndex_FlcNavPoiNameIndexData::~FlcNavPoiNameIndex_FlcNavPoiNameIndexData() {
  SharedDtor();
}

void FlcNavPoiNameIndex_FlcNavPoiNameIndexData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlcNavPoiNameIndex_FlcNavPoiNameIndexData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavPoiNameIndex_FlcNavPoiNameIndexData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavPoiNameIndex_FlcNavPoiNameIndexData_descriptor_;
}

const FlcNavPoiNameIndex_FlcNavPoiNameIndexData& FlcNavPoiNameIndex_FlcNavPoiNameIndexData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavPoiNameIndex_FlcNavPoiNameIndexData* FlcNavPoiNameIndex_FlcNavPoiNameIndexData::default_instance_ = NULL;

FlcNavPoiNameIndex_FlcNavPoiNameIndexData* FlcNavPoiNameIndex_FlcNavPoiNameIndexData::New() const {
  return new FlcNavPoiNameIndex_FlcNavPoiNameIndexData;
}

void FlcNavPoiNameIndex_FlcNavPoiNameIndexData::Clear() {
  atoms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavPoiNameIndex_FlcNavPoiNameIndexData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FlcNavPoiNameIndexDataAtom atoms = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atoms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atoms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_atoms;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavPoiNameIndex_FlcNavPoiNameIndexData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FlcNavPoiNameIndexDataAtom atoms = 3;
  for (int i = 0; i < this->atoms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->atoms(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavPoiNameIndex_FlcNavPoiNameIndexData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FlcNavPoiNameIndexDataAtom atoms = 3;
  for (int i = 0; i < this->atoms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->atoms(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavPoiNameIndex_FlcNavPoiNameIndexData::ByteSize() const {
  int total_size = 0;
  
  // repeated .FlcNavPoiNameIndexDataAtom atoms = 3;
  total_size += 1 * this->atoms_size();
  for (int i = 0; i < this->atoms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atoms(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavPoiNameIndex_FlcNavPoiNameIndexData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavPoiNameIndex_FlcNavPoiNameIndexData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavPoiNameIndex_FlcNavPoiNameIndexData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavPoiNameIndex_FlcNavPoiNameIndexData::MergeFrom(const FlcNavPoiNameIndex_FlcNavPoiNameIndexData& from) {
  GOOGLE_CHECK_NE(&from, this);
  atoms_.MergeFrom(from.atoms_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavPoiNameIndex_FlcNavPoiNameIndexData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavPoiNameIndex_FlcNavPoiNameIndexData::CopyFrom(const FlcNavPoiNameIndex_FlcNavPoiNameIndexData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavPoiNameIndex_FlcNavPoiNameIndexData::IsInitialized() const {
  
  return true;
}

void FlcNavPoiNameIndex_FlcNavPoiNameIndexData::Swap(FlcNavPoiNameIndex_FlcNavPoiNameIndexData* other) {
  if (other != this) {
    atoms_.Swap(&other->atoms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavPoiNameIndex_FlcNavPoiNameIndexData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavPoiNameIndex_FlcNavPoiNameIndexData_descriptor_;
  metadata.reflection = FlcNavPoiNameIndex_FlcNavPoiNameIndexData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FlcNavPoiNameIndex::kTableFieldNumber;
const int FlcNavPoiNameIndex::kDataFieldNumber;
#endif  // !_MSC_VER

FlcNavPoiNameIndex::FlcNavPoiNameIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavPoiNameIndex::InitAsDefaultInstance() {
  table_ = const_cast< ::IndexedStringTable*>(&::IndexedStringTable::default_instance());
}

FlcNavPoiNameIndex::FlcNavPoiNameIndex(const FlcNavPoiNameIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavPoiNameIndex::SharedCtor() {
  _cached_size_ = 0;
  table_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavPoiNameIndex::~FlcNavPoiNameIndex() {
  SharedDtor();
}

void FlcNavPoiNameIndex::SharedDtor() {
  if (this != default_instance_) {
    delete table_;
  }
}

void FlcNavPoiNameIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavPoiNameIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavPoiNameIndex_descriptor_;
}

const FlcNavPoiNameIndex& FlcNavPoiNameIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavPoiNameIndex* FlcNavPoiNameIndex::default_instance_ = NULL;

FlcNavPoiNameIndex* FlcNavPoiNameIndex::New() const {
  return new FlcNavPoiNameIndex;
}

void FlcNavPoiNameIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (table_ != NULL) table_->::IndexedStringTable::Clear();
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavPoiNameIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IndexedStringTable table = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }
      
      // repeated .FlcNavPoiNameIndex.FlcNavPoiNameIndexData data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavPoiNameIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .IndexedStringTable table = 3;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->table(), output);
  }
  
  // repeated .FlcNavPoiNameIndex.FlcNavPoiNameIndexData data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavPoiNameIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .IndexedStringTable table = 3;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->table(), target);
  }
  
  // repeated .FlcNavPoiNameIndex.FlcNavPoiNameIndexData data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavPoiNameIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IndexedStringTable table = 3;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table());
    }
    
  }
  // repeated .FlcNavPoiNameIndex.FlcNavPoiNameIndexData data = 5;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavPoiNameIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavPoiNameIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavPoiNameIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavPoiNameIndex::MergeFrom(const FlcNavPoiNameIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_table()->::IndexedStringTable::MergeFrom(from.table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavPoiNameIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavPoiNameIndex::CopyFrom(const FlcNavPoiNameIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavPoiNameIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FlcNavPoiNameIndex::Swap(FlcNavPoiNameIndex* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavPoiNameIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavPoiNameIndex_descriptor_;
  metadata.reflection = FlcNavPoiNameIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlcNavPoiNameIndexDataAtom::kZoomFieldNumber;
const int FlcNavPoiNameIndexDataAtom::kXFieldNumber;
const int FlcNavPoiNameIndexDataAtom::kYFieldNumber;
const int FlcNavPoiNameIndexDataAtom::kShiftToFieldNumber;
#endif  // !_MSC_VER

FlcNavPoiNameIndexDataAtom::FlcNavPoiNameIndexDataAtom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavPoiNameIndexDataAtom::InitAsDefaultInstance() {
}

FlcNavPoiNameIndexDataAtom::FlcNavPoiNameIndexDataAtom(const FlcNavPoiNameIndexDataAtom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavPoiNameIndexDataAtom::SharedCtor() {
  _cached_size_ = 0;
  zoom_ = 0u;
  x_ = 0u;
  y_ = 0u;
  shiftto_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavPoiNameIndexDataAtom::~FlcNavPoiNameIndexDataAtom() {
  SharedDtor();
}

void FlcNavPoiNameIndexDataAtom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlcNavPoiNameIndexDataAtom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavPoiNameIndexDataAtom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavPoiNameIndexDataAtom_descriptor_;
}

const FlcNavPoiNameIndexDataAtom& FlcNavPoiNameIndexDataAtom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavPoiNameIndexDataAtom* FlcNavPoiNameIndexDataAtom::default_instance_ = NULL;

FlcNavPoiNameIndexDataAtom* FlcNavPoiNameIndexDataAtom::New() const {
  return new FlcNavPoiNameIndexDataAtom;
}

void FlcNavPoiNameIndexDataAtom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zoom_ = 0u;
    x_ = 0u;
    y_ = 0u;
    shiftto_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavPoiNameIndexDataAtom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoom = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoom_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }
      
      // optional uint32 x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }
      
      // optional uint32 y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_shiftTo;
        break;
      }
      
      // optional fixed32 shiftTo = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_shiftTo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &shiftto_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavPoiNameIndexDataAtom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 zoom = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoom(), output);
  }
  
  // optional uint32 x = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->x(), output);
  }
  
  // optional uint32 y = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->y(), output);
  }
  
  // optional fixed32 shiftTo = 14;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(14, this->shiftto(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavPoiNameIndexDataAtom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 zoom = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoom(), target);
  }
  
  // optional uint32 x = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x(), target);
  }
  
  // optional uint32 y = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->y(), target);
  }
  
  // optional fixed32 shiftTo = 14;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(14, this->shiftto(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavPoiNameIndexDataAtom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoom = 2;
    if (has_zoom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoom());
    }
    
    // optional uint32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }
    
    // optional uint32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }
    
    // optional fixed32 shiftTo = 14;
    if (has_shiftto()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavPoiNameIndexDataAtom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavPoiNameIndexDataAtom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavPoiNameIndexDataAtom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavPoiNameIndexDataAtom::MergeFrom(const FlcNavPoiNameIndexDataAtom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_zoom(from.zoom());
    }
    if (from._has_bit(1)) {
      set_x(from.x());
    }
    if (from._has_bit(2)) {
      set_y(from.y());
    }
    if (from._has_bit(3)) {
      set_shiftto(from.shiftto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavPoiNameIndexDataAtom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavPoiNameIndexDataAtom::CopyFrom(const FlcNavPoiNameIndexDataAtom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavPoiNameIndexDataAtom::IsInitialized() const {
  
  return true;
}

void FlcNavPoiNameIndexDataAtom::Swap(FlcNavPoiNameIndexDataAtom* other) {
  if (other != this) {
    std::swap(zoom_, other->zoom_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(shiftto_, other->shiftto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavPoiNameIndexDataAtom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavPoiNameIndexDataAtom_descriptor_;
  metadata.reflection = FlcNavPoiNameIndexDataAtom_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string FlcNavCategoryTable::_default_category_;
#ifndef _MSC_VER
const int FlcNavCategoryTable::kCategoryFieldNumber;
const int FlcNavCategoryTable::kSubcategoriesFieldNumber;
#endif  // !_MSC_VER

FlcNavCategoryTable::FlcNavCategoryTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavCategoryTable::InitAsDefaultInstance() {
}

FlcNavCategoryTable::FlcNavCategoryTable(const FlcNavCategoryTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavCategoryTable::SharedCtor() {
  _cached_size_ = 0;
  category_ = const_cast< ::std::string*>(&_default_category_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavCategoryTable::~FlcNavCategoryTable() {
  SharedDtor();
}

void FlcNavCategoryTable::SharedDtor() {
  if (category_ != &_default_category_) {
    delete category_;
  }
  if (this != default_instance_) {
  }
}

void FlcNavCategoryTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavCategoryTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavCategoryTable_descriptor_;
}

const FlcNavCategoryTable& FlcNavCategoryTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavCategoryTable* FlcNavCategoryTable::default_instance_ = NULL;

FlcNavCategoryTable* FlcNavCategoryTable::New() const {
  return new FlcNavCategoryTable;
}

void FlcNavCategoryTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (category_ != &_default_category_) {
        category_->clear();
      }
    }
  }
  subcategories_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavCategoryTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string category = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->category().data(), this->category().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subcategories;
        break;
      }
      
      // repeated string subcategories = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subcategories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subcategories()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subcategories(0).data(), this->subcategories(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subcategories;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavCategoryTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string category = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->category(), output);
  }
  
  // repeated string subcategories = 3;
  for (int i = 0; i < this->subcategories_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->subcategories(i).data(), this->subcategories(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->subcategories(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavCategoryTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string category = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->category(), target);
  }
  
  // repeated string subcategories = 3;
  for (int i = 0; i < this->subcategories_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subcategories(i).data(), this->subcategories(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->subcategories(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavCategoryTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string category = 1;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category());
    }
    
  }
  // repeated string subcategories = 3;
  total_size += 1 * this->subcategories_size();
  for (int i = 0; i < this->subcategories_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->subcategories(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavCategoryTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavCategoryTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavCategoryTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavCategoryTable::MergeFrom(const FlcNavCategoryTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  subcategories_.MergeFrom(from.subcategories_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_category(from.category());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavCategoryTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavCategoryTable::CopyFrom(const FlcNavCategoryTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavCategoryTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FlcNavCategoryTable::Swap(FlcNavCategoryTable* other) {
  if (other != this) {
    std::swap(category_, other->category_);
    subcategories_.Swap(&other->subcategories_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavCategoryTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavCategoryTable_descriptor_;
  metadata.reflection = FlcNavCategoryTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlcNavPoiBox::kZoomFieldNumber;
const int FlcNavPoiBox::kLeftFieldNumber;
const int FlcNavPoiBox::kTopFieldNumber;
const int FlcNavPoiBox::kCategoriesFieldNumber;
const int FlcNavPoiBox::kSubBoxesFieldNumber;
const int FlcNavPoiBox::kShiftToDataFieldNumber;
#endif  // !_MSC_VER

FlcNavPoiBox::FlcNavPoiBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavPoiBox::InitAsDefaultInstance() {
  categories_ = const_cast< ::FlcNavPoiCategories*>(&::FlcNavPoiCategories::default_instance());
}

FlcNavPoiBox::FlcNavPoiBox(const FlcNavPoiBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavPoiBox::SharedCtor() {
  _cached_size_ = 0;
  zoom_ = 0u;
  left_ = 0;
  top_ = 0;
  categories_ = NULL;
  shifttodata_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavPoiBox::~FlcNavPoiBox() {
  SharedDtor();
}

void FlcNavPoiBox::SharedDtor() {
  if (this != default_instance_) {
    delete categories_;
  }
}

void FlcNavPoiBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavPoiBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavPoiBox_descriptor_;
}

const FlcNavPoiBox& FlcNavPoiBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavPoiBox* FlcNavPoiBox::default_instance_ = NULL;

FlcNavPoiBox* FlcNavPoiBox::New() const {
  return new FlcNavPoiBox;
}

void FlcNavPoiBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zoom_ = 0u;
    left_ = 0;
    top_ = 0;
    if (_has_bit(3)) {
      if (categories_ != NULL) categories_->::FlcNavPoiCategories::Clear();
    }
    shifttodata_ = 0u;
  }
  subboxes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavPoiBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zoom = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoom_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left;
        break;
      }
      
      // required sint32 left = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &left_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_top;
        break;
      }
      
      // required sint32 top = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &top_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_categories;
        break;
      }
      
      // optional .FlcNavPoiCategories categories = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_categories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_categories()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_subBoxes;
        break;
      }
      
      // repeated .FlcNavPoiBox subBoxes = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subBoxes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subboxes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_subBoxes;
        if (input->ExpectTag(117)) goto parse_shiftToData;
        break;
      }
      
      // optional fixed32 shiftToData = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_shiftToData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &shifttodata_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavPoiBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zoom = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoom(), output);
  }
  
  // required sint32 left = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->left(), output);
  }
  
  // required sint32 top = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->top(), output);
  }
  
  // optional .FlcNavPoiCategories categories = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->categories(), output);
  }
  
  // repeated .FlcNavPoiBox subBoxes = 10;
  for (int i = 0; i < this->subboxes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->subboxes(i), output);
  }
  
  // optional fixed32 shiftToData = 14;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(14, this->shifttodata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavPoiBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zoom = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoom(), target);
  }
  
  // required sint32 left = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->left(), target);
  }
  
  // required sint32 top = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->top(), target);
  }
  
  // optional .FlcNavPoiCategories categories = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->categories(), target);
  }
  
  // repeated .FlcNavPoiBox subBoxes = 10;
  for (int i = 0; i < this->subboxes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->subboxes(i), target);
  }
  
  // optional fixed32 shiftToData = 14;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(14, this->shifttodata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavPoiBox::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zoom = 1;
    if (has_zoom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoom());
    }
    
    // required sint32 left = 2;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->left());
    }
    
    // required sint32 top = 3;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->top());
    }
    
    // optional .FlcNavPoiCategories categories = 4;
    if (has_categories()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->categories());
    }
    
    // optional fixed32 shiftToData = 14;
    if (has_shifttodata()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .FlcNavPoiBox subBoxes = 10;
  total_size += 1 * this->subboxes_size();
  for (int i = 0; i < this->subboxes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subboxes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavPoiBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavPoiBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavPoiBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavPoiBox::MergeFrom(const FlcNavPoiBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  subboxes_.MergeFrom(from.subboxes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_zoom(from.zoom());
    }
    if (from._has_bit(1)) {
      set_left(from.left());
    }
    if (from._has_bit(2)) {
      set_top(from.top());
    }
    if (from._has_bit(3)) {
      mutable_categories()->::FlcNavPoiCategories::MergeFrom(from.categories());
    }
    if (from._has_bit(5)) {
      set_shifttodata(from.shifttodata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavPoiBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavPoiBox::CopyFrom(const FlcNavPoiBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavPoiBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < subboxes_size(); i++) {
    if (!this->subboxes(i).IsInitialized()) return false;
  }
  return true;
}

void FlcNavPoiBox::Swap(FlcNavPoiBox* other) {
  if (other != this) {
    std::swap(zoom_, other->zoom_);
    std::swap(left_, other->left_);
    std::swap(top_, other->top_);
    std::swap(categories_, other->categories_);
    subboxes_.Swap(&other->subboxes_);
    std::swap(shifttodata_, other->shifttodata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavPoiBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavPoiBox_descriptor_;
  metadata.reflection = FlcNavPoiBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlcNavPoiCategories::kCategoriesFieldNumber;
#endif  // !_MSC_VER

FlcNavPoiCategories::FlcNavPoiCategories()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavPoiCategories::InitAsDefaultInstance() {
}

FlcNavPoiCategories::FlcNavPoiCategories(const FlcNavPoiCategories& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavPoiCategories::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavPoiCategories::~FlcNavPoiCategories() {
  SharedDtor();
}

void FlcNavPoiCategories::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlcNavPoiCategories::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavPoiCategories::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavPoiCategories_descriptor_;
}

const FlcNavPoiCategories& FlcNavPoiCategories::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavPoiCategories* FlcNavPoiCategories::default_instance_ = NULL;

FlcNavPoiCategories* FlcNavPoiCategories::New() const {
  return new FlcNavPoiCategories;
}

void FlcNavPoiCategories::Clear() {
  categories_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavPoiCategories::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 categories = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_categories:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_categories())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_categories())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_categories;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavPoiCategories::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 categories = 3;
  for (int i = 0; i < this->categories_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->categories(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavPoiCategories::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 categories = 3;
  for (int i = 0; i < this->categories_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->categories(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavPoiCategories::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 categories = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->categories_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->categories(i));
    }
    total_size += 1 * this->categories_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavPoiCategories::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavPoiCategories* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavPoiCategories*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavPoiCategories::MergeFrom(const FlcNavPoiCategories& from) {
  GOOGLE_CHECK_NE(&from, this);
  categories_.MergeFrom(from.categories_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavPoiCategories::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavPoiCategories::CopyFrom(const FlcNavPoiCategories& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavPoiCategories::IsInitialized() const {
  
  return true;
}

void FlcNavPoiCategories::Swap(FlcNavPoiCategories* other) {
  if (other != this) {
    categories_.Swap(&other->categories_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavPoiCategories::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavPoiCategories_descriptor_;
  metadata.reflection = FlcNavPoiCategories_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlcNavPoiBoxData::kZoomFieldNumber;
const int FlcNavPoiBoxData::kXFieldNumber;
const int FlcNavPoiBoxData::kYFieldNumber;
const int FlcNavPoiBoxData::kPoiDataFieldNumber;
#endif  // !_MSC_VER

FlcNavPoiBoxData::FlcNavPoiBoxData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavPoiBoxData::InitAsDefaultInstance() {
}

FlcNavPoiBoxData::FlcNavPoiBoxData(const FlcNavPoiBoxData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavPoiBoxData::SharedCtor() {
  _cached_size_ = 0;
  zoom_ = 0u;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavPoiBoxData::~FlcNavPoiBoxData() {
  SharedDtor();
}

void FlcNavPoiBoxData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlcNavPoiBoxData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavPoiBoxData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavPoiBoxData_descriptor_;
}

const FlcNavPoiBoxData& FlcNavPoiBoxData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavPoiBoxData* FlcNavPoiBoxData::default_instance_ = NULL;

FlcNavPoiBoxData* FlcNavPoiBoxData::New() const {
  return new FlcNavPoiBoxData;
}

void FlcNavPoiBoxData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zoom_ = 0u;
    x_ = 0u;
    y_ = 0u;
  }
  poidata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavPoiBoxData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoom = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoom_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }
      
      // optional uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }
      
      // optional uint32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_poiData;
        break;
      }
      
      // repeated .FlcNavPoiBoxDataAtom poiData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poiData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poidata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_poiData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavPoiBoxData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 zoom = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoom(), output);
  }
  
  // optional uint32 x = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }
  
  // optional uint32 y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }
  
  // repeated .FlcNavPoiBoxDataAtom poiData = 5;
  for (int i = 0; i < this->poidata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->poidata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavPoiBoxData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 zoom = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoom(), target);
  }
  
  // optional uint32 x = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }
  
  // optional uint32 y = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }
  
  // repeated .FlcNavPoiBoxDataAtom poiData = 5;
  for (int i = 0; i < this->poidata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->poidata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavPoiBoxData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoom = 1;
    if (has_zoom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoom());
    }
    
    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }
    
    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }
    
  }
  // repeated .FlcNavPoiBoxDataAtom poiData = 5;
  total_size += 1 * this->poidata_size();
  for (int i = 0; i < this->poidata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poidata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavPoiBoxData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavPoiBoxData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavPoiBoxData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavPoiBoxData::MergeFrom(const FlcNavPoiBoxData& from) {
  GOOGLE_CHECK_NE(&from, this);
  poidata_.MergeFrom(from.poidata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_zoom(from.zoom());
    }
    if (from._has_bit(1)) {
      set_x(from.x());
    }
    if (from._has_bit(2)) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavPoiBoxData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavPoiBoxData::CopyFrom(const FlcNavPoiBoxData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavPoiBoxData::IsInitialized() const {
  
  for (int i = 0; i < poidata_size(); i++) {
    if (!this->poidata(i).IsInitialized()) return false;
  }
  return true;
}

void FlcNavPoiBoxData::Swap(FlcNavPoiBoxData* other) {
  if (other != this) {
    std::swap(zoom_, other->zoom_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    poidata_.Swap(&other->poidata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavPoiBoxData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavPoiBoxData_descriptor_;
  metadata.reflection = FlcNavPoiBoxData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string FlcNavPoiBoxDataAtom::_default_name_;
const ::std::string FlcNavPoiBoxDataAtom::_default_nameen_;
const ::std::string FlcNavPoiBoxDataAtom::_default_openinghours_;
const ::std::string FlcNavPoiBoxDataAtom::_default_site_;
const ::std::string FlcNavPoiBoxDataAtom::_default_phone_;
const ::std::string FlcNavPoiBoxDataAtom::_default_note_;
#ifndef _MSC_VER
const int FlcNavPoiBoxDataAtom::kDxFieldNumber;
const int FlcNavPoiBoxDataAtom::kDyFieldNumber;
const int FlcNavPoiBoxDataAtom::kCategoriesFieldNumber;
const int FlcNavPoiBoxDataAtom::kNameFieldNumber;
const int FlcNavPoiBoxDataAtom::kNameEnFieldNumber;
const int FlcNavPoiBoxDataAtom::kIdFieldNumber;
const int FlcNavPoiBoxDataAtom::kOpeningHoursFieldNumber;
const int FlcNavPoiBoxDataAtom::kSiteFieldNumber;
const int FlcNavPoiBoxDataAtom::kPhoneFieldNumber;
const int FlcNavPoiBoxDataAtom::kNoteFieldNumber;
#endif  // !_MSC_VER

FlcNavPoiBoxDataAtom::FlcNavPoiBoxDataAtom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavPoiBoxDataAtom::InitAsDefaultInstance() {
}

FlcNavPoiBoxDataAtom::FlcNavPoiBoxDataAtom(const FlcNavPoiBoxDataAtom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavPoiBoxDataAtom::SharedCtor() {
  _cached_size_ = 0;
  dx_ = 0;
  dy_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  nameen_ = const_cast< ::std::string*>(&_default_nameen_);
  id_ = GOOGLE_ULONGLONG(0);
  openinghours_ = const_cast< ::std::string*>(&_default_openinghours_);
  site_ = const_cast< ::std::string*>(&_default_site_);
  phone_ = const_cast< ::std::string*>(&_default_phone_);
  note_ = const_cast< ::std::string*>(&_default_note_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavPoiBoxDataAtom::~FlcNavPoiBoxDataAtom() {
  SharedDtor();
}

void FlcNavPoiBoxDataAtom::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (nameen_ != &_default_nameen_) {
    delete nameen_;
  }
  if (openinghours_ != &_default_openinghours_) {
    delete openinghours_;
  }
  if (site_ != &_default_site_) {
    delete site_;
  }
  if (phone_ != &_default_phone_) {
    delete phone_;
  }
  if (note_ != &_default_note_) {
    delete note_;
  }
  if (this != default_instance_) {
  }
}

void FlcNavPoiBoxDataAtom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavPoiBoxDataAtom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavPoiBoxDataAtom_descriptor_;
}

const FlcNavPoiBoxDataAtom& FlcNavPoiBoxDataAtom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavPoiBoxDataAtom* FlcNavPoiBoxDataAtom::default_instance_ = NULL;

FlcNavPoiBoxDataAtom* FlcNavPoiBoxDataAtom::New() const {
  return new FlcNavPoiBoxDataAtom;
}

void FlcNavPoiBoxDataAtom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dx_ = 0;
    dy_ = 0;
    if (_has_bit(3)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(4)) {
      if (nameen_ != &_default_nameen_) {
        nameen_->clear();
      }
    }
    id_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(6)) {
      if (openinghours_ != &_default_openinghours_) {
        openinghours_->clear();
      }
    }
    if (_has_bit(7)) {
      if (site_ != &_default_site_) {
        site_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (phone_ != &_default_phone_) {
        phone_->clear();
      }
    }
    if (_has_bit(9)) {
      if (note_ != &_default_note_) {
        note_->clear();
      }
    }
  }
  categories_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavPoiBoxDataAtom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 dx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dx_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dy;
        break;
      }
      
      // required sint32 dy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dy_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_categories;
        break;
      }
      
      // repeated uint32 categories = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_categories:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_categories())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_categories())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_categories;
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }
      
      // optional string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_nameEn;
        break;
      }
      
      // optional string nameEn = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nameEn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nameen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nameen().data(), this->nameen().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_id;
        break;
      }
      
      // optional uint64 id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_openingHours;
        break;
      }
      
      // optional string openingHours = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openingHours:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openinghours()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openinghours().data(), this->openinghours().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_site;
        break;
      }
      
      // optional string site = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_site:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_site()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->site().data(), this->site().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_phone;
        break;
      }
      
      // optional string phone = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_note;
        break;
      }
      
      // optional string note = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_note()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->note().data(), this->note().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavPoiBoxDataAtom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 dx = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->dx(), output);
  }
  
  // required sint32 dy = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->dy(), output);
  }
  
  // repeated uint32 categories = 4;
  for (int i = 0; i < this->categories_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->categories(i), output);
  }
  
  // optional string name = 6;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }
  
  // optional string nameEn = 7;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nameen().data(), this->nameen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->nameen(), output);
  }
  
  // optional uint64 id = 8;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->id(), output);
  }
  
  // optional string openingHours = 10;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openinghours().data(), this->openinghours().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->openinghours(), output);
  }
  
  // optional string site = 11;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->site().data(), this->site().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->site(), output);
  }
  
  // optional string phone = 12;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->phone(), output);
  }
  
  // optional string note = 13;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->note(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavPoiBoxDataAtom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 dx = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->dx(), target);
  }
  
  // required sint32 dy = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->dy(), target);
  }
  
  // repeated uint32 categories = 4;
  for (int i = 0; i < this->categories_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->categories(i), target);
  }
  
  // optional string name = 6;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }
  
  // optional string nameEn = 7;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nameen().data(), this->nameen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->nameen(), target);
  }
  
  // optional uint64 id = 8;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->id(), target);
  }
  
  // optional string openingHours = 10;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openinghours().data(), this->openinghours().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->openinghours(), target);
  }
  
  // optional string site = 11;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->site().data(), this->site().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->site(), target);
  }
  
  // optional string phone = 12;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->phone(), target);
  }
  
  // optional string note = 13;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->note(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavPoiBoxDataAtom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 dx = 2;
    if (has_dx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dx());
    }
    
    // required sint32 dy = 3;
    if (has_dy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dy());
    }
    
    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string nameEn = 7;
    if (has_nameen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nameen());
    }
    
    // optional uint64 id = 8;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // optional string openingHours = 10;
    if (has_openinghours()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openinghours());
    }
    
    // optional string site = 11;
    if (has_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->site());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string phone = 12;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }
    
    // optional string note = 13;
    if (has_note()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->note());
    }
    
  }
  // repeated uint32 categories = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->categories_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->categories(i));
    }
    total_size += 1 * this->categories_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavPoiBoxDataAtom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavPoiBoxDataAtom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavPoiBoxDataAtom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavPoiBoxDataAtom::MergeFrom(const FlcNavPoiBoxDataAtom& from) {
  GOOGLE_CHECK_NE(&from, this);
  categories_.MergeFrom(from.categories_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_dx(from.dx());
    }
    if (from._has_bit(1)) {
      set_dy(from.dy());
    }
    if (from._has_bit(3)) {
      set_name(from.name());
    }
    if (from._has_bit(4)) {
      set_nameen(from.nameen());
    }
    if (from._has_bit(5)) {
      set_id(from.id());
    }
    if (from._has_bit(6)) {
      set_openinghours(from.openinghours());
    }
    if (from._has_bit(7)) {
      set_site(from.site());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_phone(from.phone());
    }
    if (from._has_bit(9)) {
      set_note(from.note());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavPoiBoxDataAtom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavPoiBoxDataAtom::CopyFrom(const FlcNavPoiBoxDataAtom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavPoiBoxDataAtom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void FlcNavPoiBoxDataAtom::Swap(FlcNavPoiBoxDataAtom* other) {
  if (other != this) {
    std::swap(dx_, other->dx_);
    std::swap(dy_, other->dy_);
    categories_.Swap(&other->categories_);
    std::swap(name_, other->name_);
    std::swap(nameen_, other->nameen_);
    std::swap(id_, other->id_);
    std::swap(openinghours_, other->openinghours_);
    std::swap(site_, other->site_);
    std::swap(phone_, other->phone_);
    std::swap(note_, other->note_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavPoiBoxDataAtom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavPoiBoxDataAtom_descriptor_;
  metadata.reflection = FlcNavPoiBoxDataAtom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IdTable::kRouteIdFieldNumber;
#endif  // !_MSC_VER

IdTable::IdTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IdTable::InitAsDefaultInstance() {
}

IdTable::IdTable(const IdTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IdTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IdTable::~IdTable() {
  SharedDtor();
}

void IdTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IdTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IdTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IdTable_descriptor_;
}

const IdTable& IdTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

IdTable* IdTable::default_instance_ = NULL;

IdTable* IdTable::New() const {
  return new IdTable;
}

void IdTable::Clear() {
  routeid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IdTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint64 routeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 8, input, this->mutable_routeid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_routeid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_routeId;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IdTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated sint64 routeId = 1;
  for (int i = 0; i < this->routeid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      1, this->routeid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IdTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated sint64 routeId = 1;
  for (int i = 0; i < this->routeid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(1, this->routeid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IdTable::ByteSize() const {
  int total_size = 0;
  
  // repeated sint64 routeId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->routeid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->routeid(i));
    }
    total_size += 1 * this->routeid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IdTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IdTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IdTable::MergeFrom(const IdTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  routeid_.MergeFrom(from.routeid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IdTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdTable::CopyFrom(const IdTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdTable::IsInitialized() const {
  
  return true;
}

void IdTable::Swap(IdTable* other) {
  if (other != this) {
    routeid_.Swap(&other->routeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IdTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IdTable_descriptor_;
  metadata.reflection = IdTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RestrictionData::kTypeFieldNumber;
const int RestrictionData::kFromFieldNumber;
const int RestrictionData::kToFieldNumber;
const int RestrictionData::kViaFieldNumber;
#endif  // !_MSC_VER

RestrictionData::RestrictionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RestrictionData::InitAsDefaultInstance() {
}

RestrictionData::RestrictionData(const RestrictionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RestrictionData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  from_ = 0;
  to_ = 0;
  via_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RestrictionData::~RestrictionData() {
  SharedDtor();
}

void RestrictionData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RestrictionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RestrictionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RestrictionData_descriptor_;
}

const RestrictionData& RestrictionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

RestrictionData* RestrictionData::default_instance_ = NULL;

RestrictionData* RestrictionData::New() const {
  return new RestrictionData;
}

void RestrictionData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    from_ = 0;
    to_ = 0;
    via_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RestrictionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_from;
        break;
      }
      
      // required int32 from = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_to;
        break;
      }
      
      // required int32 to = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_via;
        break;
      }
      
      // optional int32 via = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_via:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &via_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RestrictionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required int32 from = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->from(), output);
  }
  
  // required int32 to = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->to(), output);
  }
  
  // optional int32 via = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->via(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RestrictionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required int32 from = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->from(), target);
  }
  
  // required int32 to = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->to(), target);
  }
  
  // optional int32 via = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->via(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RestrictionData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 from = 2;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from());
    }
    
    // required int32 to = 3;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to());
    }
    
    // optional int32 via = 4;
    if (has_via()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->via());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestrictionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RestrictionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RestrictionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RestrictionData::MergeFrom(const RestrictionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_from(from.from());
    }
    if (from._has_bit(2)) {
      set_to(from.to());
    }
    if (from._has_bit(3)) {
      set_via(from.via());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RestrictionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestrictionData::CopyFrom(const RestrictionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestrictionData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RestrictionData::Swap(RestrictionData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(via_, other->via_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RestrictionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RestrictionData_descriptor_;
  metadata.reflection = RestrictionData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RouteData::_default_points_;
const ::std::string RouteData::_default_pointtypes_;
const ::std::string RouteData::_default_pointjnind_;
const ::std::string RouteData::_default_pointjnwayids_;
const ::std::string RouteData::_default_types_;
const ::std::string RouteData::_default_stringnames_;
#ifndef _MSC_VER
const int RouteData::kPointsFieldNumber;
const int RouteData::kPointTypesFieldNumber;
const int RouteData::kPointJNIndFieldNumber;
const int RouteData::kPointJNWayIdsFieldNumber;
const int RouteData::kTypesFieldNumber;
const int RouteData::kRouteIdFieldNumber;
const int RouteData::kStringNamesFieldNumber;
#endif  // !_MSC_VER

RouteData::RouteData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RouteData::InitAsDefaultInstance() {
}

RouteData::RouteData(const RouteData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RouteData::SharedCtor() {
  _cached_size_ = 0;
  points_ = const_cast< ::std::string*>(&_default_points_);
  pointtypes_ = const_cast< ::std::string*>(&_default_pointtypes_);
  pointjnind_ = const_cast< ::std::string*>(&_default_pointjnind_);
  pointjnwayids_ = const_cast< ::std::string*>(&_default_pointjnwayids_);
  types_ = const_cast< ::std::string*>(&_default_types_);
  routeid_ = 0;
  stringnames_ = const_cast< ::std::string*>(&_default_stringnames_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouteData::~RouteData() {
  SharedDtor();
}

void RouteData::SharedDtor() {
  if (points_ != &_default_points_) {
    delete points_;
  }
  if (pointtypes_ != &_default_pointtypes_) {
    delete pointtypes_;
  }
  if (pointjnind_ != &_default_pointjnind_) {
    delete pointjnind_;
  }
  if (pointjnwayids_ != &_default_pointjnwayids_) {
    delete pointjnwayids_;
  }
  if (types_ != &_default_types_) {
    delete types_;
  }
  if (stringnames_ != &_default_stringnames_) {
    delete stringnames_;
  }
  if (this != default_instance_) {
  }
}

void RouteData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteData_descriptor_;
}

const RouteData& RouteData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

RouteData* RouteData::default_instance_ = NULL;

RouteData* RouteData::New() const {
  return new RouteData;
}

void RouteData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (points_ != &_default_points_) {
        points_->clear();
      }
    }
    if (_has_bit(1)) {
      if (pointtypes_ != &_default_pointtypes_) {
        pointtypes_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pointjnind_ != &_default_pointjnind_) {
        pointjnind_->clear();
      }
    }
    if (_has_bit(3)) {
      if (pointjnwayids_ != &_default_pointjnwayids_) {
        pointjnwayids_->clear();
      }
    }
    if (_has_bit(4)) {
      if (types_ != &_default_types_) {
        types_->clear();
      }
    }
    routeid_ = 0;
    if (_has_bit(6)) {
      if (stringnames_ != &_default_stringnames_) {
        stringnames_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RouteData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pointTypes;
        break;
      }
      
      // optional bytes pointTypes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pointTypes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pointtypes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pointJNInd;
        break;
      }
      
      // optional bytes pointJNInd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pointJNInd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pointjnind()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pointJNWayIds;
        break;
      }
      
      // optional bytes pointJNWayIds = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pointJNWayIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pointjnwayids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_types;
        break;
      }
      
      // required bytes types = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_types()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_routeId;
        break;
      }
      
      // required int32 routeId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &routeid_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_stringNames;
        break;
      }
      
      // optional bytes stringNames = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringNames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stringnames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RouteData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes points = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->points(), output);
  }
  
  // optional bytes pointTypes = 4;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->pointtypes(), output);
  }
  
  // optional bytes pointJNInd = 5;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->pointjnind(), output);
  }
  
  // optional bytes pointJNWayIds = 6;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->pointjnwayids(), output);
  }
  
  // required bytes types = 7;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->types(), output);
  }
  
  // required int32 routeId = 12;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->routeid(), output);
  }
  
  // optional bytes stringNames = 14;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->stringnames(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RouteData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes points = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->points(), target);
  }
  
  // optional bytes pointTypes = 4;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pointtypes(), target);
  }
  
  // optional bytes pointJNInd = 5;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->pointjnind(), target);
  }
  
  // optional bytes pointJNWayIds = 6;
  if (_has_bit(3)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->pointjnwayids(), target);
  }
  
  // required bytes types = 7;
  if (_has_bit(4)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->types(), target);
  }
  
  // required int32 routeId = 12;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->routeid(), target);
  }
  
  // optional bytes stringNames = 14;
  if (_has_bit(6)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->stringnames(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RouteData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes points = 1;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->points());
    }
    
    // optional bytes pointTypes = 4;
    if (has_pointtypes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pointtypes());
    }
    
    // optional bytes pointJNInd = 5;
    if (has_pointjnind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pointjnind());
    }
    
    // optional bytes pointJNWayIds = 6;
    if (has_pointjnwayids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pointjnwayids());
    }
    
    // required bytes types = 7;
    if (has_types()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->types());
    }
    
    // required int32 routeId = 12;
    if (has_routeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->routeid());
    }
    
    // optional bytes stringNames = 14;
    if (has_stringnames()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stringnames());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RouteData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RouteData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RouteData::MergeFrom(const RouteData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_points(from.points());
    }
    if (from._has_bit(1)) {
      set_pointtypes(from.pointtypes());
    }
    if (from._has_bit(2)) {
      set_pointjnind(from.pointjnind());
    }
    if (from._has_bit(3)) {
      set_pointjnwayids(from.pointjnwayids());
    }
    if (from._has_bit(4)) {
      set_types(from.types());
    }
    if (from._has_bit(5)) {
      set_routeid(from.routeid());
    }
    if (from._has_bit(6)) {
      set_stringnames(from.stringnames());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RouteData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteData::CopyFrom(const RouteData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000031) != 0x00000031) return false;
  
  return true;
}

void RouteData::Swap(RouteData* other) {
  if (other != this) {
    std::swap(points_, other->points_);
    std::swap(pointtypes_, other->pointtypes_);
    std::swap(pointjnind_, other->pointjnind_);
    std::swap(pointjnwayids_, other->pointjnwayids_);
    std::swap(types_, other->types_);
    std::swap(routeid_, other->routeid_);
    std::swap(stringnames_, other->stringnames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RouteData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouteData_descriptor_;
  metadata.reflection = RouteData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string FlcNavRoutingIndex_RouteEncodingRule::_default_tag_;
const ::std::string FlcNavRoutingIndex_RouteEncodingRule::_default_value_;
#ifndef _MSC_VER
const int FlcNavRoutingIndex_RouteEncodingRule::kTagFieldNumber;
const int FlcNavRoutingIndex_RouteEncodingRule::kValueFieldNumber;
const int FlcNavRoutingIndex_RouteEncodingRule::kIdFieldNumber;
#endif  // !_MSC_VER

FlcNavRoutingIndex_RouteEncodingRule::FlcNavRoutingIndex_RouteEncodingRule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavRoutingIndex_RouteEncodingRule::InitAsDefaultInstance() {
}

FlcNavRoutingIndex_RouteEncodingRule::FlcNavRoutingIndex_RouteEncodingRule(const FlcNavRoutingIndex_RouteEncodingRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavRoutingIndex_RouteEncodingRule::SharedCtor() {
  _cached_size_ = 0;
  tag_ = const_cast< ::std::string*>(&_default_tag_);
  value_ = const_cast< ::std::string*>(&_default_value_);
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavRoutingIndex_RouteEncodingRule::~FlcNavRoutingIndex_RouteEncodingRule() {
  SharedDtor();
}

void FlcNavRoutingIndex_RouteEncodingRule::SharedDtor() {
  if (tag_ != &_default_tag_) {
    delete tag_;
  }
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void FlcNavRoutingIndex_RouteEncodingRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavRoutingIndex_RouteEncodingRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavRoutingIndex_RouteEncodingRule_descriptor_;
}

const FlcNavRoutingIndex_RouteEncodingRule& FlcNavRoutingIndex_RouteEncodingRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavRoutingIndex_RouteEncodingRule* FlcNavRoutingIndex_RouteEncodingRule::default_instance_ = NULL;

FlcNavRoutingIndex_RouteEncodingRule* FlcNavRoutingIndex_RouteEncodingRule::New() const {
  return new FlcNavRoutingIndex_RouteEncodingRule;
}

void FlcNavRoutingIndex_RouteEncodingRule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (tag_ != &_default_tag_) {
        tag_->clear();
      }
    }
    if (_has_bit(1)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavRoutingIndex_RouteEncodingRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_value;
        break;
      }
      
      // required string value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavRoutingIndex_RouteEncodingRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string tag = 3;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tag(), output);
  }
  
  // required string value = 5;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->value(), output);
  }
  
  // optional uint32 id = 7;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavRoutingIndex_RouteEncodingRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string tag = 3;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }
  
  // required string value = 5;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->value(), target);
  }
  
  // optional uint32 id = 7;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavRoutingIndex_RouteEncodingRule::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }
    
    // required string value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
    // optional uint32 id = 7;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavRoutingIndex_RouteEncodingRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavRoutingIndex_RouteEncodingRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavRoutingIndex_RouteEncodingRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavRoutingIndex_RouteEncodingRule::MergeFrom(const FlcNavRoutingIndex_RouteEncodingRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tag(from.tag());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
    if (from._has_bit(2)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavRoutingIndex_RouteEncodingRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavRoutingIndex_RouteEncodingRule::CopyFrom(const FlcNavRoutingIndex_RouteEncodingRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavRoutingIndex_RouteEncodingRule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void FlcNavRoutingIndex_RouteEncodingRule::Swap(FlcNavRoutingIndex_RouteEncodingRule* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(value_, other->value_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavRoutingIndex_RouteEncodingRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavRoutingIndex_RouteEncodingRule_descriptor_;
  metadata.reflection = FlcNavRoutingIndex_RouteEncodingRule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FlcNavRoutingIndex_RouteDataBox::kLeftFieldNumber;
const int FlcNavRoutingIndex_RouteDataBox::kRightFieldNumber;
const int FlcNavRoutingIndex_RouteDataBox::kTopFieldNumber;
const int FlcNavRoutingIndex_RouteDataBox::kBottomFieldNumber;
const int FlcNavRoutingIndex_RouteDataBox::kShiftToDataFieldNumber;
const int FlcNavRoutingIndex_RouteDataBox::kBoxesFieldNumber;
#endif  // !_MSC_VER

FlcNavRoutingIndex_RouteDataBox::FlcNavRoutingIndex_RouteDataBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavRoutingIndex_RouteDataBox::InitAsDefaultInstance() {
}

FlcNavRoutingIndex_RouteDataBox::FlcNavRoutingIndex_RouteDataBox(const FlcNavRoutingIndex_RouteDataBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavRoutingIndex_RouteDataBox::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0;
  right_ = 0;
  top_ = 0;
  bottom_ = 0;
  shifttodata_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavRoutingIndex_RouteDataBox::~FlcNavRoutingIndex_RouteDataBox() {
  SharedDtor();
}

void FlcNavRoutingIndex_RouteDataBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlcNavRoutingIndex_RouteDataBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavRoutingIndex_RouteDataBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavRoutingIndex_RouteDataBox_descriptor_;
}

const FlcNavRoutingIndex_RouteDataBox& FlcNavRoutingIndex_RouteDataBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavRoutingIndex_RouteDataBox* FlcNavRoutingIndex_RouteDataBox::default_instance_ = NULL;

FlcNavRoutingIndex_RouteDataBox* FlcNavRoutingIndex_RouteDataBox::New() const {
  return new FlcNavRoutingIndex_RouteDataBox;
}

void FlcNavRoutingIndex_RouteDataBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    left_ = 0;
    right_ = 0;
    top_ = 0;
    bottom_ = 0;
    shifttodata_ = 0u;
  }
  boxes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavRoutingIndex_RouteDataBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 left = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &left_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_right;
        break;
      }
      
      // required sint32 right = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &right_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_top;
        break;
      }
      
      // required sint32 top = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &top_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bottom;
        break;
      }
      
      // required sint32 bottom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bottom_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_shiftToData;
        break;
      }
      
      // optional fixed32 shiftToData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_shiftToData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &shifttodata_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_boxes;
        break;
      }
      
      // repeated .FlcNavRoutingIndex.RouteDataBox boxes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boxes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_boxes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavRoutingIndex_RouteDataBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 left = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->left(), output);
  }
  
  // required sint32 right = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->right(), output);
  }
  
  // required sint32 top = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->top(), output);
  }
  
  // required sint32 bottom = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->bottom(), output);
  }
  
  // optional fixed32 shiftToData = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->shifttodata(), output);
  }
  
  // repeated .FlcNavRoutingIndex.RouteDataBox boxes = 7;
  for (int i = 0; i < this->boxes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->boxes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavRoutingIndex_RouteDataBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 left = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->left(), target);
  }
  
  // required sint32 right = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->right(), target);
  }
  
  // required sint32 top = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->top(), target);
  }
  
  // required sint32 bottom = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->bottom(), target);
  }
  
  // optional fixed32 shiftToData = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->shifttodata(), target);
  }
  
  // repeated .FlcNavRoutingIndex.RouteDataBox boxes = 7;
  for (int i = 0; i < this->boxes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->boxes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavRoutingIndex_RouteDataBox::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->left());
    }
    
    // required sint32 right = 2;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->right());
    }
    
    // required sint32 top = 3;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->top());
    }
    
    // required sint32 bottom = 4;
    if (has_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bottom());
    }
    
    // optional fixed32 shiftToData = 5;
    if (has_shifttodata()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .FlcNavRoutingIndex.RouteDataBox boxes = 7;
  total_size += 1 * this->boxes_size();
  for (int i = 0; i < this->boxes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavRoutingIndex_RouteDataBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavRoutingIndex_RouteDataBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavRoutingIndex_RouteDataBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavRoutingIndex_RouteDataBox::MergeFrom(const FlcNavRoutingIndex_RouteDataBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  boxes_.MergeFrom(from.boxes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_left(from.left());
    }
    if (from._has_bit(1)) {
      set_right(from.right());
    }
    if (from._has_bit(2)) {
      set_top(from.top());
    }
    if (from._has_bit(3)) {
      set_bottom(from.bottom());
    }
    if (from._has_bit(4)) {
      set_shifttodata(from.shifttodata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavRoutingIndex_RouteDataBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavRoutingIndex_RouteDataBox::CopyFrom(const FlcNavRoutingIndex_RouteDataBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavRoutingIndex_RouteDataBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < boxes_size(); i++) {
    if (!this->boxes(i).IsInitialized()) return false;
  }
  return true;
}

void FlcNavRoutingIndex_RouteDataBox::Swap(FlcNavRoutingIndex_RouteDataBox* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(top_, other->top_);
    std::swap(bottom_, other->bottom_);
    std::swap(shifttodata_, other->shifttodata_);
    boxes_.Swap(&other->boxes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavRoutingIndex_RouteDataBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavRoutingIndex_RouteDataBox_descriptor_;
  metadata.reflection = FlcNavRoutingIndex_RouteDataBox_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FlcNavRoutingIndex_RouteDataBlock::kIdTableFieldNumber;
const int FlcNavRoutingIndex_RouteDataBlock::kStringTableFieldNumber;
const int FlcNavRoutingIndex_RouteDataBlock::kDataObjectsFieldNumber;
const int FlcNavRoutingIndex_RouteDataBlock::kRestrictionsFieldNumber;
#endif  // !_MSC_VER

FlcNavRoutingIndex_RouteDataBlock::FlcNavRoutingIndex_RouteDataBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavRoutingIndex_RouteDataBlock::InitAsDefaultInstance() {
  idtable_ = const_cast< ::IdTable*>(&::IdTable::default_instance());
  stringtable_ = const_cast< ::StringTable*>(&::StringTable::default_instance());
}

FlcNavRoutingIndex_RouteDataBlock::FlcNavRoutingIndex_RouteDataBlock(const FlcNavRoutingIndex_RouteDataBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavRoutingIndex_RouteDataBlock::SharedCtor() {
  _cached_size_ = 0;
  idtable_ = NULL;
  stringtable_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavRoutingIndex_RouteDataBlock::~FlcNavRoutingIndex_RouteDataBlock() {
  SharedDtor();
}

void FlcNavRoutingIndex_RouteDataBlock::SharedDtor() {
  if (this != default_instance_) {
    delete idtable_;
    delete stringtable_;
  }
}

void FlcNavRoutingIndex_RouteDataBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavRoutingIndex_RouteDataBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavRoutingIndex_RouteDataBlock_descriptor_;
}

const FlcNavRoutingIndex_RouteDataBlock& FlcNavRoutingIndex_RouteDataBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavRoutingIndex_RouteDataBlock* FlcNavRoutingIndex_RouteDataBlock::default_instance_ = NULL;

FlcNavRoutingIndex_RouteDataBlock* FlcNavRoutingIndex_RouteDataBlock::New() const {
  return new FlcNavRoutingIndex_RouteDataBlock;
}

void FlcNavRoutingIndex_RouteDataBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (idtable_ != NULL) idtable_->::IdTable::Clear();
    }
    if (_has_bit(1)) {
      if (stringtable_ != NULL) stringtable_->::StringTable::Clear();
    }
  }
  dataobjects_.Clear();
  restrictions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavRoutingIndex_RouteDataBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .IdTable idTable = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_idtable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_dataObjects;
        break;
      }
      
      // repeated .RouteData dataObjects = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataObjects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dataobjects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_dataObjects;
        if (input->ExpectTag(58)) goto parse_restrictions;
        break;
      }
      
      // repeated .RestrictionData restrictions = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_restrictions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_restrictions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_restrictions;
        if (input->ExpectTag(66)) goto parse_stringTable;
        break;
      }
      
      // optional .StringTable stringTable = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stringtable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavRoutingIndex_RouteDataBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .IdTable idTable = 5;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->idtable(), output);
  }
  
  // repeated .RouteData dataObjects = 6;
  for (int i = 0; i < this->dataobjects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->dataobjects(i), output);
  }
  
  // repeated .RestrictionData restrictions = 7;
  for (int i = 0; i < this->restrictions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->restrictions(i), output);
  }
  
  // optional .StringTable stringTable = 8;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->stringtable(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavRoutingIndex_RouteDataBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .IdTable idTable = 5;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->idtable(), target);
  }
  
  // repeated .RouteData dataObjects = 6;
  for (int i = 0; i < this->dataobjects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->dataobjects(i), target);
  }
  
  // repeated .RestrictionData restrictions = 7;
  for (int i = 0; i < this->restrictions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->restrictions(i), target);
  }
  
  // optional .StringTable stringTable = 8;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->stringtable(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavRoutingIndex_RouteDataBlock::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .IdTable idTable = 5;
    if (has_idtable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->idtable());
    }
    
    // optional .StringTable stringTable = 8;
    if (has_stringtable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stringtable());
    }
    
  }
  // repeated .RouteData dataObjects = 6;
  total_size += 1 * this->dataobjects_size();
  for (int i = 0; i < this->dataobjects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dataobjects(i));
  }
  
  // repeated .RestrictionData restrictions = 7;
  total_size += 1 * this->restrictions_size();
  for (int i = 0; i < this->restrictions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->restrictions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavRoutingIndex_RouteDataBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavRoutingIndex_RouteDataBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavRoutingIndex_RouteDataBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavRoutingIndex_RouteDataBlock::MergeFrom(const FlcNavRoutingIndex_RouteDataBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  dataobjects_.MergeFrom(from.dataobjects_);
  restrictions_.MergeFrom(from.restrictions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_idtable()->::IdTable::MergeFrom(from.idtable());
    }
    if (from._has_bit(1)) {
      mutable_stringtable()->::StringTable::MergeFrom(from.stringtable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavRoutingIndex_RouteDataBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavRoutingIndex_RouteDataBlock::CopyFrom(const FlcNavRoutingIndex_RouteDataBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavRoutingIndex_RouteDataBlock::IsInitialized() const {
  
  for (int i = 0; i < dataobjects_size(); i++) {
    if (!this->dataobjects(i).IsInitialized()) return false;
  }
  for (int i = 0; i < restrictions_size(); i++) {
    if (!this->restrictions(i).IsInitialized()) return false;
  }
  return true;
}

void FlcNavRoutingIndex_RouteDataBlock::Swap(FlcNavRoutingIndex_RouteDataBlock* other) {
  if (other != this) {
    std::swap(idtable_, other->idtable_);
    std::swap(stringtable_, other->stringtable_);
    dataobjects_.Swap(&other->dataobjects_);
    restrictions_.Swap(&other->restrictions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavRoutingIndex_RouteDataBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavRoutingIndex_RouteDataBlock_descriptor_;
  metadata.reflection = FlcNavRoutingIndex_RouteDataBlock_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string FlcNavRoutingIndex::_default_name_;
#ifndef _MSC_VER
const int FlcNavRoutingIndex::kNameFieldNumber;
const int FlcNavRoutingIndex::kRulesFieldNumber;
const int FlcNavRoutingIndex::kRootBoxesFieldNumber;
const int FlcNavRoutingIndex::kBlocksFieldNumber;
#endif  // !_MSC_VER

FlcNavRoutingIndex::FlcNavRoutingIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlcNavRoutingIndex::InitAsDefaultInstance() {
}

FlcNavRoutingIndex::FlcNavRoutingIndex(const FlcNavRoutingIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlcNavRoutingIndex::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlcNavRoutingIndex::~FlcNavRoutingIndex() {
  SharedDtor();
}

void FlcNavRoutingIndex::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FlcNavRoutingIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlcNavRoutingIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlcNavRoutingIndex_descriptor_;
}

const FlcNavRoutingIndex& FlcNavRoutingIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flcnav_5fodb_2eproto();  return *default_instance_;
}

FlcNavRoutingIndex* FlcNavRoutingIndex::default_instance_ = NULL;

FlcNavRoutingIndex* FlcNavRoutingIndex::New() const {
  return new FlcNavRoutingIndex;
}

void FlcNavRoutingIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  rules_.Clear();
  rootboxes_.Clear();
  blocks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlcNavRoutingIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rules;
        break;
      }
      
      // repeated .FlcNavRoutingIndex.RouteEncodingRule rules = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rules;
        if (input->ExpectTag(26)) goto parse_rootBoxes;
        break;
      }
      
      // repeated .FlcNavRoutingIndex.RouteDataBox rootBoxes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rootBoxes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rootboxes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rootBoxes;
        if (input->ExpectTag(42)) goto parse_blocks;
        break;
      }
      
      // repeated .FlcNavRoutingIndex.RouteDataBlock blocks = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_blocks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlcNavRoutingIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // repeated .FlcNavRoutingIndex.RouteEncodingRule rules = 2;
  for (int i = 0; i < this->rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rules(i), output);
  }
  
  // repeated .FlcNavRoutingIndex.RouteDataBox rootBoxes = 3;
  for (int i = 0; i < this->rootboxes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rootboxes(i), output);
  }
  
  // repeated .FlcNavRoutingIndex.RouteDataBlock blocks = 5;
  for (int i = 0; i < this->blocks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->blocks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlcNavRoutingIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // repeated .FlcNavRoutingIndex.RouteEncodingRule rules = 2;
  for (int i = 0; i < this->rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rules(i), target);
  }
  
  // repeated .FlcNavRoutingIndex.RouteDataBox rootBoxes = 3;
  for (int i = 0; i < this->rootboxes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rootboxes(i), target);
  }
  
  // repeated .FlcNavRoutingIndex.RouteDataBlock blocks = 5;
  for (int i = 0; i < this->blocks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->blocks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlcNavRoutingIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated .FlcNavRoutingIndex.RouteEncodingRule rules = 2;
  total_size += 1 * this->rules_size();
  for (int i = 0; i < this->rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rules(i));
  }
  
  // repeated .FlcNavRoutingIndex.RouteDataBox rootBoxes = 3;
  total_size += 1 * this->rootboxes_size();
  for (int i = 0; i < this->rootboxes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rootboxes(i));
  }
  
  // repeated .FlcNavRoutingIndex.RouteDataBlock blocks = 5;
  total_size += 1 * this->blocks_size();
  for (int i = 0; i < this->blocks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blocks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlcNavRoutingIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlcNavRoutingIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlcNavRoutingIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlcNavRoutingIndex::MergeFrom(const FlcNavRoutingIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  rules_.MergeFrom(from.rules_);
  rootboxes_.MergeFrom(from.rootboxes_);
  blocks_.MergeFrom(from.blocks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlcNavRoutingIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlcNavRoutingIndex::CopyFrom(const FlcNavRoutingIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlcNavRoutingIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < rules_size(); i++) {
    if (!this->rules(i).IsInitialized()) return false;
  }
  for (int i = 0; i < rootboxes_size(); i++) {
    if (!this->rootboxes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < blocks_size(); i++) {
    if (!this->blocks(i).IsInitialized()) return false;
  }
  return true;
}

void FlcNavRoutingIndex::Swap(FlcNavRoutingIndex* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    rules_.Swap(&other->rules_);
    rootboxes_.Swap(&other->rootboxes_);
    blocks_.Swap(&other->blocks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlcNavRoutingIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlcNavRoutingIndex_descriptor_;
  metadata.reflection = FlcNavRoutingIndex_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
